
RTOS2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008148  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080083e8  080083e8  000093e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084f4  080084f4  0000a074  2**0
                  CONTENTS
  4 .ARM          00000008  080084f4  080084f4  000094f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084fc  080084fc  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084fc  080084fc  000094fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008500  08008500  00009500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  24000000  08008504  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004264  24000074  08008578  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240042d8  08008578  0000a2d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d440  00000000  00000000  0000a0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b71  00000000  00000000  000274e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e8  00000000  00000000  0002b058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b8  00000000  00000000  0002c740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d700  00000000  00000000  0002d8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c957  00000000  00000000  0006aff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00192a9a  00000000  00000000  0008794f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021a3e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066f0  00000000  00000000  0021a42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00220b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080083d0 	.word	0x080083d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	080083d0 	.word	0x080083d0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <SystemInit+0xfc>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a3c      	ldr	r2, [pc, #240]	@ (800076c <SystemInit+0xfc>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <SystemInit+0xfc>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a38      	ldr	r2, [pc, #224]	@ (800076c <SystemInit+0xfc>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <SystemInit+0x100>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <SystemInit+0x100>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SystemInit+0x104>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <SystemInit+0x104>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SystemInit+0x104>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <SystemInit+0x104>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	492c      	ldr	r1, [pc, #176]	@ (8000774 <SystemInit+0x104>)
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemInit+0x108>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <SystemInit+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <SystemInit+0x100>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemInit+0x104>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <SystemInit+0x104>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemInit+0x104>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <SystemInit+0x10c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SystemInit+0x104>)
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <SystemInit+0x110>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <SystemInit+0x104>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <SystemInit+0x114>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <SystemInit+0x104>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemInit+0x114>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <SystemInit+0x104>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <SystemInit+0x114>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0x104>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <SystemInit+0x104>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <SystemInit+0x104>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <SystemInit+0x118>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <SystemInit+0x118>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <SystemInit+0x11c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <SystemInit+0x120>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <SystemInit+0x124>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <SystemInit+0x128>)
 800075c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000760:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	52002000 	.word	0x52002000
 8000774:	58024400 	.word	0x58024400
 8000778:	eaf6ed7f 	.word	0xeaf6ed7f
 800077c:	02020200 	.word	0x02020200
 8000780:	01ff0000 	.word	0x01ff0000
 8000784:	01010280 	.word	0x01010280
 8000788:	580000c0 	.word	0x580000c0
 800078c:	5c001000 	.word	0x5c001000
 8000790:	ffff0000 	.word	0xffff0000
 8000794:	51008108 	.word	0x51008108
 8000798:	52004000 	.word	0x52004000

0800079c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	4a07      	ldr	r2, [pc, #28]	@ (80007c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80007ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	4a06      	ldr	r2, [pc, #24]	@ (80007cc <vApplicationGetIdleTaskMemory+0x30>)
 80007b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2280      	movs	r2, #128	@ 0x80
 80007b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80007ba:	bf00      	nop
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	24000090 	.word	0x24000090
 80007cc:	24000130 	.word	0x24000130

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b5b0      	push	{r4, r5, r7, lr}
 80007d2:	b090      	sub	sp, #64	@ 0x40
 80007d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007d6:	f000 f9cd 	bl	8000b74 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007e0:	bf00      	nop
 80007e2:	4b39      	ldr	r3, [pc, #228]	@ (80008c8 <main+0xf8>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d004      	beq.n	80007f8 <main+0x28>
 80007ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007f0:	1e5a      	subs	r2, r3, #1
 80007f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	dcf4      	bgt.n	80007e2 <main+0x12>
  if ( timeout < 0 )
 80007f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da01      	bge.n	8000802 <main+0x32>
  {
  Error_Handler();
 80007fe:	f000 f9f7 	bl	8000bf0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000802:	f000 fcb3 	bl	800116c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000806:	f000 f86f 	bl	80008e8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800080a:	4b2f      	ldr	r3, [pc, #188]	@ (80008c8 <main+0xf8>)
 800080c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000810:	4a2d      	ldr	r2, [pc, #180]	@ (80008c8 <main+0xf8>)
 8000812:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000816:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800081a:	4b2b      	ldr	r3, [pc, #172]	@ (80008c8 <main+0xf8>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000828:	2000      	movs	r0, #0
 800082a:	f001 f843 	bl	80018b4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800082e:	2100      	movs	r1, #0
 8000830:	2000      	movs	r0, #0
 8000832:	f001 f859 	bl	80018e8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000836:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800083a:	63fb      	str	r3, [r7, #60]	@ 0x3c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800083c:	bf00      	nop
 800083e:	4b22      	ldr	r3, [pc, #136]	@ (80008c8 <main+0xf8>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000846:	2b00      	cmp	r3, #0
 8000848:	d104      	bne.n	8000854 <main+0x84>
 800084a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800084c:	1e5a      	subs	r2, r3, #1
 800084e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000850:	2b00      	cmp	r3, #0
 8000852:	dcf4      	bgt.n	800083e <main+0x6e>
if ( timeout < 0 )
 8000854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000856:	2b00      	cmp	r3, #0
 8000858:	da01      	bge.n	800085e <main+0x8e>
{
Error_Handler();
 800085a:	f000 f9c9 	bl	8000bf0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085e:	f000 f8fb 	bl	8000a58 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000862:	f000 f8ad 	bl	80009c0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("\n\nstart...\r\n");
 8000866:	4819      	ldr	r0, [pc, #100]	@ (80008cc <main+0xfc>)
 8000868:	f006 ffaa 	bl	80077c0 <puts>
  printf("start...\r\n");
 800086c:	4818      	ldr	r0, [pc, #96]	@ (80008d0 <main+0x100>)
 800086e:	f006 ffa7 	bl	80077c0 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000872:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <main+0x104>)
 8000874:	f107 0420 	add.w	r4, r7, #32
 8000878:	461d      	mov	r5, r3
 800087a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800087c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800087e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000882:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f005 fb44 	bl	8005f1a <osThreadCreate>
 8000892:	4603      	mov	r3, r0
 8000894:	4a10      	ldr	r2, [pc, #64]	@ (80008d8 <main+0x108>)
 8000896:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* definition and creation of Task_LED */
//  osThreadDef(Task_LED, StartTask_LED, osPriorityNormal, 0, 128);
  osThreadDef(Task_LED, StartTask_LED, osPriorityLow, 0, 128);
 8000898:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <main+0x10c>)
 800089a:	1d3c      	adds	r4, r7, #4
 800089c:	461d      	mov	r5, r3
 800089e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskHandle_LED = osThreadCreate(osThread(Task_LED), NULL);
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f005 fb33 	bl	8005f1a <osThreadCreate>
 80008b4:	4603      	mov	r3, r0
 80008b6:	4a0a      	ldr	r2, [pc, #40]	@ (80008e0 <main+0x110>)
 80008b8:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80008ba:	f005 fb27 	bl	8005f0c <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("No RTOS!!\r\n");
 80008be:	4809      	ldr	r0, [pc, #36]	@ (80008e4 <main+0x114>)
 80008c0:	f006 ff7e 	bl	80077c0 <puts>
 80008c4:	e7fb      	b.n	80008be <main+0xee>
 80008c6:	bf00      	nop
 80008c8:	58024400 	.word	0x58024400
 80008cc:	080083e8 	.word	0x080083e8
 80008d0:	080083f4 	.word	0x080083f4
 80008d4:	08008418 	.word	0x08008418
 80008d8:	240003c4 	.word	0x240003c4
 80008dc:	08008440 	.word	0x08008440
 80008e0:	240003c8 	.word	0x240003c8
 80008e4:	08008400 	.word	0x08008400

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b09c      	sub	sp, #112	@ 0x70
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f2:	224c      	movs	r2, #76	@ 0x4c
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f007 f842 	bl	8007980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2220      	movs	r2, #32
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f007 f83c 	bl	8007980 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000908:	2004      	movs	r0, #4
 800090a:	f001 f801 	bl	8001910 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4b29      	ldr	r3, [pc, #164]	@ (80009b8 <SystemClock_Config+0xd0>)
 8000914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000916:	4a28      	ldr	r2, [pc, #160]	@ (80009b8 <SystemClock_Config+0xd0>)
 8000918:	f023 0301 	bic.w	r3, r3, #1
 800091c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800091e:	4b26      	ldr	r3, [pc, #152]	@ (80009b8 <SystemClock_Config+0xd0>)
 8000920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	4b24      	ldr	r3, [pc, #144]	@ (80009bc <SystemClock_Config+0xd4>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000930:	4a22      	ldr	r2, [pc, #136]	@ (80009bc <SystemClock_Config+0xd4>)
 8000932:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b20      	ldr	r3, [pc, #128]	@ (80009bc <SystemClock_Config+0xd4>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000944:	bf00      	nop
 8000946:	4b1d      	ldr	r3, [pc, #116]	@ (80009bc <SystemClock_Config+0xd4>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800094e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000952:	d1f8      	bne.n	8000946 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000954:	2302      	movs	r3, #2
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000958:	2301      	movs	r3, #1
 800095a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095c:	2340      	movs	r3, #64	@ 0x40
 800095e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000960:	2300      	movs	r3, #0
 8000962:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000964:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000968:	4618      	mov	r0, r3
 800096a:	f001 f82b 	bl	80019c4 <HAL_RCC_OscConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000974:	f000 f93c 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000978:	233f      	movs	r3, #63	@ 0x3f
 800097a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000988:	2340      	movs	r3, #64	@ 0x40
 800098a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800098c:	2340      	movs	r3, #64	@ 0x40
 800098e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000990:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000994:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000996:	2340      	movs	r3, #64	@ 0x40
 8000998:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2101      	movs	r1, #1
 800099e:	4618      	mov	r0, r3
 80009a0:	f001 fc6a 	bl	8002278 <HAL_RCC_ClockConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009aa:	f000 f921 	bl	8000bf0 <Error_Handler>
  }
}
 80009ae:	bf00      	nop
 80009b0:	3770      	adds	r7, #112	@ 0x70
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	58000400 	.word	0x58000400
 80009bc:	58024800 	.word	0x58024800

080009c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009c4:	4b22      	ldr	r3, [pc, #136]	@ (8000a50 <MX_USART3_UART_Init+0x90>)
 80009c6:	4a23      	ldr	r2, [pc, #140]	@ (8000a54 <MX_USART3_UART_Init+0x94>)
 80009c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ca:	4b21      	ldr	r3, [pc, #132]	@ (8000a50 <MX_USART3_UART_Init+0x90>)
 80009cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a50 <MX_USART3_UART_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a50 <MX_USART3_UART_Init+0x90>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009de:	4b1c      	ldr	r3, [pc, #112]	@ (8000a50 <MX_USART3_UART_Init+0x90>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a50 <MX_USART3_UART_Init+0x90>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b19      	ldr	r3, [pc, #100]	@ (8000a50 <MX_USART3_UART_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f0:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <MX_USART3_UART_Init+0x90>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f6:	4b16      	ldr	r3, [pc, #88]	@ (8000a50 <MX_USART3_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009fc:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <MX_USART3_UART_Init+0x90>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a02:	4b13      	ldr	r3, [pc, #76]	@ (8000a50 <MX_USART3_UART_Init+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a08:	4811      	ldr	r0, [pc, #68]	@ (8000a50 <MX_USART3_UART_Init+0x90>)
 8000a0a:	f004 f8fd 	bl	8004c08 <HAL_UART_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a14:	f000 f8ec 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a18:	2100      	movs	r1, #0
 8000a1a:	480d      	ldr	r0, [pc, #52]	@ (8000a50 <MX_USART3_UART_Init+0x90>)
 8000a1c:	f005 f993 	bl	8005d46 <HAL_UARTEx_SetTxFifoThreshold>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a26:	f000 f8e3 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4808      	ldr	r0, [pc, #32]	@ (8000a50 <MX_USART3_UART_Init+0x90>)
 8000a2e:	f005 f9c8 	bl	8005dc2 <HAL_UARTEx_SetRxFifoThreshold>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a38:	f000 f8da 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a3c:	4804      	ldr	r0, [pc, #16]	@ (8000a50 <MX_USART3_UART_Init+0x90>)
 8000a3e:	f005 f949 	bl	8005cd4 <HAL_UARTEx_DisableFifoMode>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a48:	f000 f8d2 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	24000330 	.word	0x24000330
 8000a54:	40004800 	.word	0x40004800

08000a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <MX_GPIO_Init+0x84>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a74:	4a19      	ldr	r2, [pc, #100]	@ (8000adc <MX_GPIO_Init+0x84>)
 8000a76:	f043 0302 	orr.w	r3, r3, #2
 8000a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a7e:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <MX_GPIO_Init+0x84>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a84:	f003 0302 	and.w	r3, r3, #2
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8c:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <MX_GPIO_Init+0x84>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a92:	4a12      	ldr	r2, [pc, #72]	@ (8000adc <MX_GPIO_Init+0x84>)
 8000a94:	f043 0308 	orr.w	r3, r3, #8
 8000a98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <MX_GPIO_Init+0x84>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa2:	f003 0308 	and.w	r3, r3, #8
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_G_Pin|LED_R_Pin, GPIO_PIN_SET);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ab0:	480b      	ldr	r0, [pc, #44]	@ (8000ae0 <MX_GPIO_Init+0x88>)
 8000ab2:	f000 fecb 	bl	800184c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8000ab6:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	4619      	mov	r1, r3
 8000ace:	4804      	ldr	r0, [pc, #16]	@ (8000ae0 <MX_GPIO_Init+0x88>)
 8000ad0:	f000 fd0c 	bl	80014ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad4:	bf00      	nop
 8000ad6:	3720      	adds	r7, #32
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	58024400 	.word	0x58024400
 8000ae0:	58020400 	.word	0x58020400

08000ae4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000aec:	1d39      	adds	r1, r7, #4
 8000aee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000af2:	2201      	movs	r2, #1
 8000af4:	4803      	ldr	r0, [pc, #12]	@ (8000b04 <__io_putchar+0x20>)
 8000af6:	f004 f8d7 	bl	8004ca8 <HAL_UART_Transmit>

  return ch;
 8000afa:	687b      	ldr	r3, [r7, #4]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	24000330 	.word	0x24000330

08000b08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	static uint32_t cnt = 0;
  /* Infinite loop */
  for(;;)
  {
	printf("DefaultTask %u\r\n", cnt++);
 8000b10:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <StartDefaultTask+0x28>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	4906      	ldr	r1, [pc, #24]	@ (8000b30 <StartDefaultTask+0x28>)
 8000b18:	600a      	str	r2, [r1, #0]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <StartDefaultTask+0x2c>)
 8000b1e:	f006 fde7 	bl	80076f0 <iprintf>
    osDelay(1000);
 8000b22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b26:	f005 fa44 	bl	8005fb2 <osDelay>
	printf("DefaultTask %u\r\n", cnt++);
 8000b2a:	bf00      	nop
 8000b2c:	e7f0      	b.n	8000b10 <StartDefaultTask+0x8>
 8000b2e:	bf00      	nop
 8000b30:	240003cc 	.word	0x240003cc
 8000b34:	0800845c 	.word	0x0800845c

08000b38 <StartTask_LED>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask_LED */
void StartTask_LED(void const * argument)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	static uint32_t cnt = 100;
  /* Infinite loop */
  for(;;)
  {
	printf("Task_LED %u\r\n", cnt++);
 8000b40:	4b09      	ldr	r3, [pc, #36]	@ (8000b68 <StartTask_LED+0x30>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	1c5a      	adds	r2, r3, #1
 8000b46:	4908      	ldr	r1, [pc, #32]	@ (8000b68 <StartTask_LED+0x30>)
 8000b48:	600a      	str	r2, [r1, #0]
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4807      	ldr	r0, [pc, #28]	@ (8000b6c <StartTask_LED+0x34>)
 8000b4e:	f006 fdcf 	bl	80076f0 <iprintf>
	HAL_GPIO_TogglePin(GPIOB, LED_G_Pin|LED_R_Pin);
 8000b52:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b56:	4806      	ldr	r0, [pc, #24]	@ (8000b70 <StartTask_LED+0x38>)
 8000b58:	f000 fe91 	bl	800187e <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000b5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b60:	f005 fa27 	bl	8005fb2 <osDelay>
	printf("Task_LED %u\r\n", cnt++);
 8000b64:	bf00      	nop
 8000b66:	e7eb      	b.n	8000b40 <StartTask_LED+0x8>
 8000b68:	24000008 	.word	0x24000008
 8000b6c:	08008470 	.word	0x08008470
 8000b70:	58020400 	.word	0x58020400

08000b74 <MPU_Config>:


 /* MPU Configuration */

void MPU_Config(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b86:	f000 fc39 	bl	80013fc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b96:	231f      	movs	r3, #31
 8000b98:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b9a:	2387      	movs	r3, #135	@ 0x87
 8000b9c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000baa:	2301      	movs	r3, #1
 8000bac:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 fc57 	bl	800146c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bbe:	2004      	movs	r0, #4
 8000bc0:	f000 fc34 	bl	800142c <HAL_MPU_Enable>

}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a04      	ldr	r2, [pc, #16]	@ (8000bec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d101      	bne.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bde:	f000 fb01 	bl	80011e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40001000 	.word	0x40001000

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <Error_Handler+0x8>

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <HAL_MspInit+0x38>)
 8000c04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c08:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <HAL_MspInit+0x38>)
 8000c0a:	f043 0302 	orr.w	r3, r3, #2
 8000c0e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c12:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <HAL_MspInit+0x38>)
 8000c14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c18:	f003 0302 	and.w	r3, r3, #2
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	210f      	movs	r1, #15
 8000c24:	f06f 0001 	mvn.w	r0, #1
 8000c28:	f000 fbc0 	bl	80013ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	58024400 	.word	0x58024400

08000c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b0ba      	sub	sp, #232	@ 0xe8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c50:	f107 0310 	add.w	r3, r7, #16
 8000c54:	22c0      	movs	r2, #192	@ 0xc0
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f006 fe91 	bl	8007980 <memset>
  if(huart->Instance==USART3)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a27      	ldr	r2, [pc, #156]	@ (8000d00 <HAL_UART_MspInit+0xc8>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d146      	bne.n	8000cf6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c68:	f04f 0202 	mov.w	r2, #2
 8000c6c:	f04f 0300 	mov.w	r3, #0
 8000c70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c7a:	f107 0310 	add.w	r3, r7, #16
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f001 fec8 	bl	8002a14 <HAL_RCCEx_PeriphCLKConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c8a:	f7ff ffb1 	bl	8000bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d04 <HAL_UART_MspInit+0xcc>)
 8000c90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c94:	4a1b      	ldr	r2, [pc, #108]	@ (8000d04 <HAL_UART_MspInit+0xcc>)
 8000c96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c9a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c9e:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <HAL_UART_MspInit+0xcc>)
 8000ca0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ca4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cac:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <HAL_UART_MspInit+0xcc>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb2:	4a14      	ldr	r2, [pc, #80]	@ (8000d04 <HAL_UART_MspInit+0xcc>)
 8000cb4:	f043 0308 	orr.w	r3, r3, #8
 8000cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cbc:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <HAL_UART_MspInit+0xcc>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	@ (8000d08 <HAL_UART_MspInit+0xd0>)
 8000cf2:	f000 fbfb 	bl	80014ec <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000cf6:	bf00      	nop
 8000cf8:	37e8      	adds	r7, #232	@ 0xe8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40004800 	.word	0x40004800
 8000d04:	58024400 	.word	0x58024400
 8000d08:	58020c00 	.word	0x58020c00

08000d0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b090      	sub	sp, #64	@ 0x40
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b0f      	cmp	r3, #15
 8000d18:	d827      	bhi.n	8000d6a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	6879      	ldr	r1, [r7, #4]
 8000d1e:	2036      	movs	r0, #54	@ 0x36
 8000d20:	f000 fb44 	bl	80013ac <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d24:	2036      	movs	r0, #54	@ 0x36
 8000d26:	f000 fb5b 	bl	80013e0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000d2a:	4a29      	ldr	r2, [pc, #164]	@ (8000dd0 <HAL_InitTick+0xc4>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d30:	4b28      	ldr	r3, [pc, #160]	@ (8000dd4 <HAL_InitTick+0xc8>)
 8000d32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d36:	4a27      	ldr	r2, [pc, #156]	@ (8000dd4 <HAL_InitTick+0xc8>)
 8000d38:	f043 0310 	orr.w	r3, r3, #16
 8000d3c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d40:	4b24      	ldr	r3, [pc, #144]	@ (8000dd4 <HAL_InitTick+0xc8>)
 8000d42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d46:	f003 0310 	and.w	r3, r3, #16
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d4e:	f107 0210 	add.w	r2, r7, #16
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f001 fe19 	bl	8002990 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d60:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d106      	bne.n	8000d76 <HAL_InitTick+0x6a>
 8000d68:	e001      	b.n	8000d6e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e02b      	b.n	8000dc6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d6e:	f001 fde3 	bl	8002938 <HAL_RCC_GetPCLK1Freq>
 8000d72:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000d74:	e004      	b.n	8000d80 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d76:	f001 fddf 	bl	8002938 <HAL_RCC_GetPCLK1Freq>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d82:	4a15      	ldr	r2, [pc, #84]	@ (8000dd8 <HAL_InitTick+0xcc>)
 8000d84:	fba2 2303 	umull	r2, r3, r2, r3
 8000d88:	0c9b      	lsrs	r3, r3, #18
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <HAL_InitTick+0xd0>)
 8000d90:	4a13      	ldr	r2, [pc, #76]	@ (8000de0 <HAL_InitTick+0xd4>)
 8000d92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d94:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <HAL_InitTick+0xd0>)
 8000d96:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d9a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d9c:	4a0f      	ldr	r2, [pc, #60]	@ (8000ddc <HAL_InitTick+0xd0>)
 8000d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000da0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <HAL_InitTick+0xd0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <HAL_InitTick+0xd0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000dae:	480b      	ldr	r0, [pc, #44]	@ (8000ddc <HAL_InitTick+0xd0>)
 8000db0:	f003 fc5c 	bl	800466c <HAL_TIM_Base_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d104      	bne.n	8000dc4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dba:	4808      	ldr	r0, [pc, #32]	@ (8000ddc <HAL_InitTick+0xd0>)
 8000dbc:	f003 fcb8 	bl	8004730 <HAL_TIM_Base_Start_IT>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	e000      	b.n	8000dc6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3740      	adds	r7, #64	@ 0x40
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2400000c 	.word	0x2400000c
 8000dd4:	58024400 	.word	0x58024400
 8000dd8:	431bde83 	.word	0x431bde83
 8000ddc:	240003d0 	.word	0x240003d0
 8000de0:	40001000 	.word	0x40001000

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <NMI_Handler+0x4>

08000dec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e20:	4802      	ldr	r0, [pc, #8]	@ (8000e2c <TIM6_DAC_IRQHandler+0x10>)
 8000e22:	f003 fcfd 	bl	8004820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	240003d0 	.word	0x240003d0

08000e30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	e00a      	b.n	8000e58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e42:	f3af 8000 	nop.w
 8000e46:	4601      	mov	r1, r0
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	1c5a      	adds	r2, r3, #1
 8000e4c:	60ba      	str	r2, [r7, #8]
 8000e4e:	b2ca      	uxtb	r2, r1
 8000e50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	3301      	adds	r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	dbf0      	blt.n	8000e42 <_read+0x12>
  }

  return len;
 8000e60:	687b      	ldr	r3, [r7, #4]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b086      	sub	sp, #24
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	60f8      	str	r0, [r7, #12]
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	e009      	b.n	8000e90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	1c5a      	adds	r2, r3, #1
 8000e80:	60ba      	str	r2, [r7, #8]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fe2d 	bl	8000ae4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	697a      	ldr	r2, [r7, #20]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	dbf1      	blt.n	8000e7c <_write+0x12>
  }
  return len;
 8000e98:	687b      	ldr	r3, [r7, #4]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <_close>:

int _close(int file)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000eca:	605a      	str	r2, [r3, #4]
  return 0;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <_isatty>:

int _isatty(int file)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f14:	4a14      	ldr	r2, [pc, #80]	@ (8000f68 <_sbrk+0x5c>)
 8000f16:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <_sbrk+0x60>)
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f20:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f28:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <_sbrk+0x64>)
 8000f2a:	4a12      	ldr	r2, [pc, #72]	@ (8000f74 <_sbrk+0x68>)
 8000f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2e:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <_sbrk+0x64>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d207      	bcs.n	8000f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f3c:	f006 fdd4 	bl	8007ae8 <__errno>
 8000f40:	4603      	mov	r3, r0
 8000f42:	220c      	movs	r2, #12
 8000f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4a:	e009      	b.n	8000f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f4c:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f52:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	4a05      	ldr	r2, [pc, #20]	@ (8000f70 <_sbrk+0x64>)
 8000f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	24080000 	.word	0x24080000
 8000f6c:	00000400 	.word	0x00000400
 8000f70:	2400041c 	.word	0x2400041c
 8000f74:	240042d8 	.word	0x240042d8

08000f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f7c:	f7ff fb78 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f80:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f82:	490d      	ldr	r1, [pc, #52]	@ (8000fb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f84:	4a0d      	ldr	r2, [pc, #52]	@ (8000fbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f98:	4c0a      	ldr	r4, [pc, #40]	@ (8000fc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa6:	f006 fda5 	bl	8007af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000faa:	f7ff fc11 	bl	80007d0 <main>
  bx  lr
 8000fae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fb4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fb8:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000fbc:	08008504 	.word	0x08008504
  ldr r2, =_sbss
 8000fc0:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000fc4:	240042d8 	.word	0x240042d8

08000fc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC3_IRQHandler>

08000fca <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d105      	bne.n	8000fe4 <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	bf00      	nop
 8000fdc:	f7ff fe08 	bl	8000bf0 <Error_Handler>
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	e007      	b.n	8000ffa <stm32_lock_init+0x30>
  {
    lock->basepri[i] = 0;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d9f4      	bls.n	8000fea <stm32_lock_init+0x20>
  }
  lock->nesting_level = 0;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	721a      	strb	r2, [r3, #8]
}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b084      	sub	sp, #16
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d105      	bne.n	8001028 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
}
 800101e:	bf00      	nop
 8001020:	f7ff fde6 	bl	8000bf0 <Error_Handler>
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7a1b      	ldrb	r3, [r3, #8]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d905      	bls.n	800103c <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
 8001034:	f7ff fddc 	bl	8000bf0 <Error_Handler>
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	7a1b      	ldrb	r3, [r3, #8]
 8001040:	1c5a      	adds	r2, r3, #1
 8001042:	b2d1      	uxtb	r1, r2
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	7211      	strb	r1, [r2, #8]
 8001048:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800104a:	f3ef 8211 	mrs	r2, BASEPRI
 800104e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001052:	f383 8811 	msr	BASEPRI, r3
 8001056:	f3bf 8f6f 	isb	sy
 800105a:	f3bf 8f4f 	dsb	sy
 800105e:	60fa      	str	r2, [r7, #12]
 8001060:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b084      	sub	sp, #16
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d105      	bne.n	800108c <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
 8001084:	f7ff fdb4 	bl	8000bf0 <Error_Handler>
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <stm32_lock_release+0x16>
  lock->nesting_level--;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7a1b      	ldrb	r3, [r3, #8]
 8001090:	3b01      	subs	r3, #1
 8001092:	b2da      	uxtb	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7a1b      	ldrb	r3, [r3, #8]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d905      	bls.n	80010ac <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 80010a0:	b672      	cpsid	i
}
 80010a2:	bf00      	nop
 80010a4:	f7ff fda4 	bl	8000bf0 <Error_Handler>
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7a1b      	ldrb	r3, [r3, #8]
 80010b0:	461a      	mov	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80010c0:	bf00      	nop
}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d105      	bne.n	80010e4 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 80010d8:	f006 fd06 	bl	8007ae8 <__errno>
 80010dc:	4603      	mov	r3, r0
 80010de:	2216      	movs	r2, #22
 80010e0:	601a      	str	r2, [r3, #0]
    return;
 80010e2:	e016      	b.n	8001112 <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80010e4:	200c      	movs	r0, #12
 80010e6:	f006 f98b 	bl	8007400 <malloc>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d005      	beq.n	8001106 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff63 	bl	8000fca <stm32_lock_init>
    return;
 8001104:	e005      	b.n	8001112 <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8001106:	b672      	cpsid	i
}
 8001108:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 800110a:	f7ff fd71 	bl	8000bf0 <Error_Handler>
 800110e:	bf00      	nop
 8001110:	e7fd      	b.n	800110e <__retarget_lock_init_recursive+0x44>
}
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d105      	bne.n	8001132 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001126:	b672      	cpsid	i
}
 8001128:	bf00      	nop
 800112a:	f7ff fd61 	bl	8000bf0 <Error_Handler>
 800112e:	bf00      	nop
 8001130:	e7fd      	b.n	800112e <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff6a 	bl	800100e <stm32_lock_acquire>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d105      	bne.n	800115c <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001150:	b672      	cpsid	i
}
 8001152:	bf00      	nop
 8001154:	f7ff fd4c 	bl	8000bf0 <Error_Handler>
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff87 	bl	8001072 <stm32_lock_release>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001172:	2003      	movs	r0, #3
 8001174:	f000 f90f 	bl	8001396 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001178:	f001 fa34 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 800117c:	4602      	mov	r2, r0
 800117e:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <HAL_Init+0x68>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	0a1b      	lsrs	r3, r3, #8
 8001184:	f003 030f 	and.w	r3, r3, #15
 8001188:	4913      	ldr	r1, [pc, #76]	@ (80011d8 <HAL_Init+0x6c>)
 800118a:	5ccb      	ldrb	r3, [r1, r3]
 800118c:	f003 031f 	and.w	r3, r3, #31
 8001190:	fa22 f303 	lsr.w	r3, r2, r3
 8001194:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001196:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <HAL_Init+0x68>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	4a0e      	ldr	r2, [pc, #56]	@ (80011d8 <HAL_Init+0x6c>)
 80011a0:	5cd3      	ldrb	r3, [r2, r3]
 80011a2:	f003 031f 	and.w	r3, r3, #31
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ac:	4a0b      	ldr	r2, [pc, #44]	@ (80011dc <HAL_Init+0x70>)
 80011ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011b0:	4a0b      	ldr	r2, [pc, #44]	@ (80011e0 <HAL_Init+0x74>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b6:	200f      	movs	r0, #15
 80011b8:	f7ff fda8 	bl	8000d0c <HAL_InitTick>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e002      	b.n	80011cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011c6:	f7ff fd19 	bl	8000bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	58024400 	.word	0x58024400
 80011d8:	08008488 	.word	0x08008488
 80011dc:	24000004 	.word	0x24000004
 80011e0:	24000000 	.word	0x24000000

080011e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_IncTick+0x20>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <HAL_IncTick+0x24>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	4a04      	ldr	r2, [pc, #16]	@ (8001208 <HAL_IncTick+0x24>)
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	24000010 	.word	0x24000010
 8001208:	24000438 	.word	0x24000438

0800120c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b03      	ldr	r3, [pc, #12]	@ (8001220 <HAL_GetTick+0x14>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	24000438 	.word	0x24000438

08001224 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001228:	4b03      	ldr	r3, [pc, #12]	@ (8001238 <HAL_GetREVID+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	0c1b      	lsrs	r3, r3, #16
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	5c001000 	.word	0x5c001000

0800123c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800124c:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <__NVIC_SetPriorityGrouping+0x40>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001258:	4013      	ands	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 8001266:	4313      	orrs	r3, r2
 8001268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126a:	4a04      	ldr	r2, [pc, #16]	@ (800127c <__NVIC_SetPriorityGrouping+0x40>)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	60d3      	str	r3, [r2, #12]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00
 8001280:	05fa0000 	.word	0x05fa0000

08001284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001288:	4b04      	ldr	r3, [pc, #16]	@ (800129c <__NVIC_GetPriorityGrouping+0x18>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	f003 0307 	and.w	r3, r3, #7
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	db0b      	blt.n	80012ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	f003 021f 	and.w	r2, r3, #31
 80012b8:	4907      	ldr	r1, [pc, #28]	@ (80012d8 <__NVIC_EnableIRQ+0x38>)
 80012ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012be:	095b      	lsrs	r3, r3, #5
 80012c0:	2001      	movs	r0, #1
 80012c2:	fa00 f202 	lsl.w	r2, r0, r2
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000e100 	.word	0xe000e100

080012dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	db0a      	blt.n	8001306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	490c      	ldr	r1, [pc, #48]	@ (8001328 <__NVIC_SetPriority+0x4c>)
 80012f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001304:	e00a      	b.n	800131c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4908      	ldr	r1, [pc, #32]	@ (800132c <__NVIC_SetPriority+0x50>)
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	3b04      	subs	r3, #4
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	440b      	add	r3, r1
 800131a:	761a      	strb	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	@ 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2b04      	cmp	r3, #4
 800134c:	bf28      	it	cs
 800134e:	2304      	movcs	r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	2b06      	cmp	r3, #6
 8001358:	d902      	bls.n	8001360 <NVIC_EncodePriority+0x30>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b03      	subs	r3, #3
 800135e:	e000      	b.n	8001362 <NVIC_EncodePriority+0x32>
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	f04f 32ff 	mov.w	r2, #4294967295
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	4313      	orrs	r3, r2
         );
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	@ 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ff4c 	bl	800123c <__NVIC_SetPriorityGrouping>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013ba:	f7ff ff63 	bl	8001284 <__NVIC_GetPriorityGrouping>
 80013be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	68b9      	ldr	r1, [r7, #8]
 80013c4:	6978      	ldr	r0, [r7, #20]
 80013c6:	f7ff ffb3 	bl	8001330 <NVIC_EncodePriority>
 80013ca:	4602      	mov	r2, r0
 80013cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013d0:	4611      	mov	r1, r2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ff82 	bl	80012dc <__NVIC_SetPriority>
}
 80013d8:	bf00      	nop
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff56 	bl	80012a0 <__NVIC_EnableIRQ>
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001400:	f3bf 8f5f 	dmb	sy
}
 8001404:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001406:	4b07      	ldr	r3, [pc, #28]	@ (8001424 <HAL_MPU_Disable+0x28>)
 8001408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140a:	4a06      	ldr	r2, [pc, #24]	@ (8001424 <HAL_MPU_Disable+0x28>)
 800140c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001410:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001412:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <HAL_MPU_Disable+0x2c>)
 8001414:	2200      	movs	r2, #0
 8001416:	605a      	str	r2, [r3, #4]
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00
 8001428:	e000ed90 	.word	0xe000ed90

0800142c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001434:	4a0b      	ldr	r2, [pc, #44]	@ (8001464 <HAL_MPU_Enable+0x38>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800143e:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <HAL_MPU_Enable+0x3c>)
 8001440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001442:	4a09      	ldr	r2, [pc, #36]	@ (8001468 <HAL_MPU_Enable+0x3c>)
 8001444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001448:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800144a:	f3bf 8f4f 	dsb	sy
}
 800144e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001450:	f3bf 8f6f 	isb	sy
}
 8001454:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed90 	.word	0xe000ed90
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	785a      	ldrb	r2, [r3, #1]
 8001478:	4b1b      	ldr	r3, [pc, #108]	@ (80014e8 <HAL_MPU_ConfigRegion+0x7c>)
 800147a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800147c:	4b1a      	ldr	r3, [pc, #104]	@ (80014e8 <HAL_MPU_ConfigRegion+0x7c>)
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	4a19      	ldr	r2, [pc, #100]	@ (80014e8 <HAL_MPU_ConfigRegion+0x7c>)
 8001482:	f023 0301 	bic.w	r3, r3, #1
 8001486:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001488:	4a17      	ldr	r2, [pc, #92]	@ (80014e8 <HAL_MPU_ConfigRegion+0x7c>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7b1b      	ldrb	r3, [r3, #12]
 8001494:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7adb      	ldrb	r3, [r3, #11]
 800149a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800149c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	7a9b      	ldrb	r3, [r3, #10]
 80014a2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7b5b      	ldrb	r3, [r3, #13]
 80014aa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	7b9b      	ldrb	r3, [r3, #14]
 80014b2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	7bdb      	ldrb	r3, [r3, #15]
 80014ba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7a5b      	ldrb	r3, [r3, #9]
 80014c2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7a1b      	ldrb	r3, [r3, #8]
 80014ca:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014cc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	7812      	ldrb	r2, [r2, #0]
 80014d2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014d4:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014d6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014d8:	6113      	str	r3, [r2, #16]
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed90 	.word	0xe000ed90

080014ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	@ 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80014fa:	4b89      	ldr	r3, [pc, #548]	@ (8001720 <HAL_GPIO_Init+0x234>)
 80014fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014fe:	e194      	b.n	800182a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	2101      	movs	r1, #1
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	fa01 f303 	lsl.w	r3, r1, r3
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 8186 	beq.w	8001824 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	2b01      	cmp	r3, #1
 8001522:	d005      	beq.n	8001530 <HAL_GPIO_Init+0x44>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d130      	bne.n	8001592 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	2203      	movs	r2, #3
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	68da      	ldr	r2, [r3, #12]
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001566:	2201      	movs	r2, #1
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	091b      	lsrs	r3, r3, #4
 800157c:	f003 0201 	and.w	r2, r3, #1
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	2b03      	cmp	r3, #3
 800159c:	d017      	beq.n	80015ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	2203      	movs	r2, #3
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d123      	bne.n	8001622 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	08da      	lsrs	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3208      	adds	r2, #8
 80015e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	220f      	movs	r2, #15
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	691a      	ldr	r2, [r3, #16]
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	08da      	lsrs	r2, r3, #3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3208      	adds	r2, #8
 800161c:	69b9      	ldr	r1, [r7, #24]
 800161e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	2203      	movs	r2, #3
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 0203 	and.w	r2, r3, #3
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 80e0 	beq.w	8001824 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001664:	4b2f      	ldr	r3, [pc, #188]	@ (8001724 <HAL_GPIO_Init+0x238>)
 8001666:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800166a:	4a2e      	ldr	r2, [pc, #184]	@ (8001724 <HAL_GPIO_Init+0x238>)
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001674:	4b2b      	ldr	r3, [pc, #172]	@ (8001724 <HAL_GPIO_Init+0x238>)
 8001676:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001682:	4a29      	ldr	r2, [pc, #164]	@ (8001728 <HAL_GPIO_Init+0x23c>)
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	3302      	adds	r3, #2
 800168a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	220f      	movs	r2, #15
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a20      	ldr	r2, [pc, #128]	@ (800172c <HAL_GPIO_Init+0x240>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d052      	beq.n	8001754 <HAL_GPIO_Init+0x268>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001730 <HAL_GPIO_Init+0x244>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d031      	beq.n	800171a <HAL_GPIO_Init+0x22e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001734 <HAL_GPIO_Init+0x248>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d02b      	beq.n	8001716 <HAL_GPIO_Init+0x22a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001738 <HAL_GPIO_Init+0x24c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d025      	beq.n	8001712 <HAL_GPIO_Init+0x226>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a1c      	ldr	r2, [pc, #112]	@ (800173c <HAL_GPIO_Init+0x250>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d01f      	beq.n	800170e <HAL_GPIO_Init+0x222>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001740 <HAL_GPIO_Init+0x254>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d019      	beq.n	800170a <HAL_GPIO_Init+0x21e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001744 <HAL_GPIO_Init+0x258>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d013      	beq.n	8001706 <HAL_GPIO_Init+0x21a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a19      	ldr	r2, [pc, #100]	@ (8001748 <HAL_GPIO_Init+0x25c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d00d      	beq.n	8001702 <HAL_GPIO_Init+0x216>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a18      	ldr	r2, [pc, #96]	@ (800174c <HAL_GPIO_Init+0x260>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d007      	beq.n	80016fe <HAL_GPIO_Init+0x212>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a17      	ldr	r2, [pc, #92]	@ (8001750 <HAL_GPIO_Init+0x264>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d101      	bne.n	80016fa <HAL_GPIO_Init+0x20e>
 80016f6:	2309      	movs	r3, #9
 80016f8:	e02d      	b.n	8001756 <HAL_GPIO_Init+0x26a>
 80016fa:	230a      	movs	r3, #10
 80016fc:	e02b      	b.n	8001756 <HAL_GPIO_Init+0x26a>
 80016fe:	2308      	movs	r3, #8
 8001700:	e029      	b.n	8001756 <HAL_GPIO_Init+0x26a>
 8001702:	2307      	movs	r3, #7
 8001704:	e027      	b.n	8001756 <HAL_GPIO_Init+0x26a>
 8001706:	2306      	movs	r3, #6
 8001708:	e025      	b.n	8001756 <HAL_GPIO_Init+0x26a>
 800170a:	2305      	movs	r3, #5
 800170c:	e023      	b.n	8001756 <HAL_GPIO_Init+0x26a>
 800170e:	2304      	movs	r3, #4
 8001710:	e021      	b.n	8001756 <HAL_GPIO_Init+0x26a>
 8001712:	2303      	movs	r3, #3
 8001714:	e01f      	b.n	8001756 <HAL_GPIO_Init+0x26a>
 8001716:	2302      	movs	r3, #2
 8001718:	e01d      	b.n	8001756 <HAL_GPIO_Init+0x26a>
 800171a:	2301      	movs	r3, #1
 800171c:	e01b      	b.n	8001756 <HAL_GPIO_Init+0x26a>
 800171e:	bf00      	nop
 8001720:	58000080 	.word	0x58000080
 8001724:	58024400 	.word	0x58024400
 8001728:	58000400 	.word	0x58000400
 800172c:	58020000 	.word	0x58020000
 8001730:	58020400 	.word	0x58020400
 8001734:	58020800 	.word	0x58020800
 8001738:	58020c00 	.word	0x58020c00
 800173c:	58021000 	.word	0x58021000
 8001740:	58021400 	.word	0x58021400
 8001744:	58021800 	.word	0x58021800
 8001748:	58021c00 	.word	0x58021c00
 800174c:	58022000 	.word	0x58022000
 8001750:	58022400 	.word	0x58022400
 8001754:	2300      	movs	r3, #0
 8001756:	69fa      	ldr	r2, [r7, #28]
 8001758:	f002 0203 	and.w	r2, r2, #3
 800175c:	0092      	lsls	r2, r2, #2
 800175e:	4093      	lsls	r3, r2
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001766:	4938      	ldr	r1, [pc, #224]	@ (8001848 <HAL_GPIO_Init+0x35c>)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	3302      	adds	r3, #2
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001774:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800179a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80017c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	3301      	adds	r3, #1
 8001828:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	fa22 f303 	lsr.w	r3, r2, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	f47f ae63 	bne.w	8001500 <HAL_GPIO_Init+0x14>
  }
}
 800183a:	bf00      	nop
 800183c:	bf00      	nop
 800183e:	3724      	adds	r7, #36	@ 0x24
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	58000400 	.word	0x58000400

0800184c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
 8001858:	4613      	mov	r3, r2
 800185a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800185c:	787b      	ldrb	r3, [r7, #1]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001862:	887a      	ldrh	r2, [r7, #2]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001868:	e003      	b.n	8001872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	041a      	lsls	r2, r3, #16
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	619a      	str	r2, [r3, #24]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800187e:	b480      	push	{r7}
 8001880:	b085      	sub	sp, #20
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	460b      	mov	r3, r1
 8001888:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001890:	887a      	ldrh	r2, [r7, #2]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4013      	ands	r3, r2
 8001896:	041a      	lsls	r2, r3, #16
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	43d9      	mvns	r1, r3
 800189c:	887b      	ldrh	r3, [r7, #2]
 800189e:	400b      	ands	r3, r1
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	619a      	str	r2, [r3, #24]
}
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80018bc:	4a08      	ldr	r2, [pc, #32]	@ (80018e0 <HAL_HSEM_FastTake+0x2c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3320      	adds	r3, #32
 80018c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c6:	4a07      	ldr	r2, [pc, #28]	@ (80018e4 <HAL_HSEM_FastTake+0x30>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d101      	bne.n	80018d0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	e000      	b.n	80018d2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	58026400 	.word	0x58026400
 80018e4:	80000300 	.word	0x80000300

080018e8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80018f2:	4906      	ldr	r1, [pc, #24]	@ (800190c <HAL_HSEM_Release+0x24>)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	58026400 	.word	0x58026400

08001910 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001918:	4b29      	ldr	r3, [pc, #164]	@ (80019c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	2b06      	cmp	r3, #6
 8001922:	d00a      	beq.n	800193a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001924:	4b26      	ldr	r3, [pc, #152]	@ (80019c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	429a      	cmp	r2, r3
 8001930:	d001      	beq.n	8001936 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e040      	b.n	80019b8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	e03e      	b.n	80019b8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800193a:	4b21      	ldr	r3, [pc, #132]	@ (80019c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001942:	491f      	ldr	r1, [pc, #124]	@ (80019c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4313      	orrs	r3, r2
 8001948:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800194a:	f7ff fc5f 	bl	800120c <HAL_GetTick>
 800194e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001950:	e009      	b.n	8001966 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001952:	f7ff fc5b 	bl	800120c <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001960:	d901      	bls.n	8001966 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e028      	b.n	80019b8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001966:	4b16      	ldr	r3, [pc, #88]	@ (80019c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800196e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001972:	d1ee      	bne.n	8001952 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b1e      	cmp	r3, #30
 8001978:	d008      	beq.n	800198c <HAL_PWREx_ConfigSupply+0x7c>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b2e      	cmp	r3, #46	@ 0x2e
 800197e:	d005      	beq.n	800198c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b1d      	cmp	r3, #29
 8001984:	d002      	beq.n	800198c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b2d      	cmp	r3, #45	@ 0x2d
 800198a:	d114      	bne.n	80019b6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800198c:	f7ff fc3e 	bl	800120c <HAL_GetTick>
 8001990:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001992:	e009      	b.n	80019a8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001994:	f7ff fc3a 	bl	800120c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019a2:	d901      	bls.n	80019a8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e007      	b.n	80019b8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80019a8:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <HAL_PWREx_ConfigSupply+0xb0>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019b4:	d1ee      	bne.n	8001994 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	58024800 	.word	0x58024800

080019c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08c      	sub	sp, #48	@ 0x30
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d102      	bne.n	80019d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	f000 bc48 	b.w	8002268 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 8088 	beq.w	8001af6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019e6:	4b99      	ldr	r3, [pc, #612]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019f0:	4b96      	ldr	r3, [pc, #600]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 80019f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80019f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019f8:	2b10      	cmp	r3, #16
 80019fa:	d007      	beq.n	8001a0c <HAL_RCC_OscConfig+0x48>
 80019fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019fe:	2b18      	cmp	r3, #24
 8001a00:	d111      	bne.n	8001a26 <HAL_RCC_OscConfig+0x62>
 8001a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d10c      	bne.n	8001a26 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0c:	4b8f      	ldr	r3, [pc, #572]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d06d      	beq.n	8001af4 <HAL_RCC_OscConfig+0x130>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d169      	bne.n	8001af4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	f000 bc21 	b.w	8002268 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a2e:	d106      	bne.n	8001a3e <HAL_RCC_OscConfig+0x7a>
 8001a30:	4b86      	ldr	r3, [pc, #536]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a85      	ldr	r2, [pc, #532]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001a36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	e02e      	b.n	8001a9c <HAL_RCC_OscConfig+0xd8>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x9c>
 8001a46:	4b81      	ldr	r3, [pc, #516]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a80      	ldr	r2, [pc, #512]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001a4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b7e      	ldr	r3, [pc, #504]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a7d      	ldr	r2, [pc, #500]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001a58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e01d      	b.n	8001a9c <HAL_RCC_OscConfig+0xd8>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a68:	d10c      	bne.n	8001a84 <HAL_RCC_OscConfig+0xc0>
 8001a6a:	4b78      	ldr	r3, [pc, #480]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a77      	ldr	r2, [pc, #476]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	4b75      	ldr	r3, [pc, #468]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a74      	ldr	r2, [pc, #464]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e00b      	b.n	8001a9c <HAL_RCC_OscConfig+0xd8>
 8001a84:	4b71      	ldr	r3, [pc, #452]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a70      	ldr	r2, [pc, #448]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4b6e      	ldr	r3, [pc, #440]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a6d      	ldr	r2, [pc, #436]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d013      	beq.n	8001acc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fbb2 	bl	800120c <HAL_GetTick>
 8001aa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aac:	f7ff fbae 	bl	800120c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b64      	cmp	r3, #100	@ 0x64
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e3d4      	b.n	8002268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001abe:	4b63      	ldr	r3, [pc, #396]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0xe8>
 8001aca:	e014      	b.n	8001af6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001acc:	f7ff fb9e 	bl	800120c <HAL_GetTick>
 8001ad0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad4:	f7ff fb9a 	bl	800120c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b64      	cmp	r3, #100	@ 0x64
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e3c0      	b.n	8002268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ae6:	4b59      	ldr	r3, [pc, #356]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x110>
 8001af2:	e000      	b.n	8001af6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 80ca 	beq.w	8001c98 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b04:	4b51      	ldr	r3, [pc, #324]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b0c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b0e:	4b4f      	ldr	r3, [pc, #316]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b12:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_RCC_OscConfig+0x166>
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	2b18      	cmp	r3, #24
 8001b1e:	d156      	bne.n	8001bce <HAL_RCC_OscConfig+0x20a>
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d151      	bne.n	8001bce <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b2a:	4b48      	ldr	r3, [pc, #288]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d005      	beq.n	8001b42 <HAL_RCC_OscConfig+0x17e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e392      	b.n	8002268 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b42:	4b42      	ldr	r3, [pc, #264]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 0219 	bic.w	r2, r3, #25
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	493f      	ldr	r1, [pc, #252]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff fb5a 	bl	800120c <HAL_GetTick>
 8001b58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b5c:	f7ff fb56 	bl	800120c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e37c      	b.n	8002268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b6e:	4b37      	ldr	r3, [pc, #220]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7a:	f7ff fb53 	bl	8001224 <HAL_GetREVID>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d817      	bhi.n	8001bb8 <HAL_RCC_OscConfig+0x1f4>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	2b40      	cmp	r3, #64	@ 0x40
 8001b8e:	d108      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x1de>
 8001b90:	4b2e      	ldr	r3, [pc, #184]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001b98:	4a2c      	ldr	r2, [pc, #176]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001b9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b9e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ba0:	e07a      	b.n	8001c98 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	031b      	lsls	r3, r3, #12
 8001bb0:	4926      	ldr	r1, [pc, #152]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bb6:	e06f      	b.n	8001c98 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb8:	4b24      	ldr	r3, [pc, #144]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	061b      	lsls	r3, r3, #24
 8001bc6:	4921      	ldr	r1, [pc, #132]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bcc:	e064      	b.n	8001c98 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d047      	beq.n	8001c66 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 0219 	bic.w	r2, r3, #25
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	491a      	ldr	r1, [pc, #104]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7ff fb10 	bl	800120c <HAL_GetTick>
 8001bec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf0:	f7ff fb0c 	bl	800120c <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e332      	b.n	8002268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c02:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0e:	f7ff fb09 	bl	8001224 <HAL_GetREVID>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d819      	bhi.n	8001c50 <HAL_RCC_OscConfig+0x28c>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	2b40      	cmp	r3, #64	@ 0x40
 8001c22:	d108      	bne.n	8001c36 <HAL_RCC_OscConfig+0x272>
 8001c24:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001c2c:	4a07      	ldr	r2, [pc, #28]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001c2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c32:	6053      	str	r3, [r2, #4]
 8001c34:	e030      	b.n	8001c98 <HAL_RCC_OscConfig+0x2d4>
 8001c36:	4b05      	ldr	r3, [pc, #20]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	031b      	lsls	r3, r3, #12
 8001c44:	4901      	ldr	r1, [pc, #4]	@ (8001c4c <HAL_RCC_OscConfig+0x288>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
 8001c4a:	e025      	b.n	8001c98 <HAL_RCC_OscConfig+0x2d4>
 8001c4c:	58024400 	.word	0x58024400
 8001c50:	4b9a      	ldr	r3, [pc, #616]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	061b      	lsls	r3, r3, #24
 8001c5e:	4997      	ldr	r1, [pc, #604]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
 8001c64:	e018      	b.n	8001c98 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c66:	4b95      	ldr	r3, [pc, #596]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a94      	ldr	r2, [pc, #592]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001c6c:	f023 0301 	bic.w	r3, r3, #1
 8001c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c72:	f7ff facb 	bl	800120c <HAL_GetTick>
 8001c76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7a:	f7ff fac7 	bl	800120c <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e2ed      	b.n	8002268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c8c:	4b8b      	ldr	r3, [pc, #556]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f0      	bne.n	8001c7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 80a9 	beq.w	8001df8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ca6:	4b85      	ldr	r3, [pc, #532]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cb0:	4b82      	ldr	r3, [pc, #520]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d007      	beq.n	8001ccc <HAL_RCC_OscConfig+0x308>
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2b18      	cmp	r3, #24
 8001cc0:	d13a      	bne.n	8001d38 <HAL_RCC_OscConfig+0x374>
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d135      	bne.n	8001d38 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ccc:	4b7b      	ldr	r3, [pc, #492]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x320>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	2b80      	cmp	r3, #128	@ 0x80
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e2c1      	b.n	8002268 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ce4:	f7ff fa9e 	bl	8001224 <HAL_GetREVID>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d817      	bhi.n	8001d22 <HAL_RCC_OscConfig+0x35e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	2b20      	cmp	r3, #32
 8001cf8:	d108      	bne.n	8001d0c <HAL_RCC_OscConfig+0x348>
 8001cfa:	4b70      	ldr	r3, [pc, #448]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001d02:	4a6e      	ldr	r2, [pc, #440]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001d04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d08:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d0a:	e075      	b.n	8001df8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d0c:	4b6b      	ldr	r3, [pc, #428]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	069b      	lsls	r3, r3, #26
 8001d1a:	4968      	ldr	r1, [pc, #416]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d20:	e06a      	b.n	8001df8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d22:	4b66      	ldr	r3, [pc, #408]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	061b      	lsls	r3, r3, #24
 8001d30:	4962      	ldr	r1, [pc, #392]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d36:	e05f      	b.n	8001df8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d042      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d40:	4b5e      	ldr	r3, [pc, #376]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a5d      	ldr	r2, [pc, #372]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4c:	f7ff fa5e 	bl	800120c <HAL_GetTick>
 8001d50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d54:	f7ff fa5a 	bl	800120c <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e280      	b.n	8002268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d66:	4b55      	ldr	r3, [pc, #340]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d72:	f7ff fa57 	bl	8001224 <HAL_GetREVID>
 8001d76:	4603      	mov	r3, r0
 8001d78:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d817      	bhi.n	8001db0 <HAL_RCC_OscConfig+0x3ec>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	2b20      	cmp	r3, #32
 8001d86:	d108      	bne.n	8001d9a <HAL_RCC_OscConfig+0x3d6>
 8001d88:	4b4c      	ldr	r3, [pc, #304]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001d90:	4a4a      	ldr	r2, [pc, #296]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001d92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d96:	6053      	str	r3, [r2, #4]
 8001d98:	e02e      	b.n	8001df8 <HAL_RCC_OscConfig+0x434>
 8001d9a:	4b48      	ldr	r3, [pc, #288]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	069b      	lsls	r3, r3, #26
 8001da8:	4944      	ldr	r1, [pc, #272]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	604b      	str	r3, [r1, #4]
 8001dae:	e023      	b.n	8001df8 <HAL_RCC_OscConfig+0x434>
 8001db0:	4b42      	ldr	r3, [pc, #264]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	061b      	lsls	r3, r3, #24
 8001dbe:	493f      	ldr	r1, [pc, #252]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	60cb      	str	r3, [r1, #12]
 8001dc4:	e018      	b.n	8001df8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a3c      	ldr	r2, [pc, #240]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001dcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd2:	f7ff fa1b 	bl	800120c <HAL_GetTick>
 8001dd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001dda:	f7ff fa17 	bl	800120c <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e23d      	b.n	8002268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001dec:	4b33      	ldr	r3, [pc, #204]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f0      	bne.n	8001dda <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d036      	beq.n	8001e72 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d019      	beq.n	8001e40 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001e0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e10:	4a2a      	ldr	r2, [pc, #168]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e18:	f7ff f9f8 	bl	800120c <HAL_GetTick>
 8001e1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e20:	f7ff f9f4 	bl	800120c <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e21a      	b.n	8002268 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e32:	4b22      	ldr	r3, [pc, #136]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0x45c>
 8001e3e:	e018      	b.n	8001e72 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e40:	4b1e      	ldr	r3, [pc, #120]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001e42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e44:	4a1d      	ldr	r2, [pc, #116]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001e46:	f023 0301 	bic.w	r3, r3, #1
 8001e4a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4c:	f7ff f9de 	bl	800120c <HAL_GetTick>
 8001e50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e54:	f7ff f9da 	bl	800120c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e200      	b.n	8002268 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e66:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0320 	and.w	r3, r3, #32
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d039      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d01c      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e86:	4b0d      	ldr	r3, [pc, #52]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001e8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e92:	f7ff f9bb 	bl	800120c <HAL_GetTick>
 8001e96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e9a:	f7ff f9b7 	bl	800120c <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e1dd      	b.n	8002268 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001eac:	4b03      	ldr	r3, [pc, #12]	@ (8001ebc <HAL_RCC_OscConfig+0x4f8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x4d6>
 8001eb8:	e01b      	b.n	8001ef2 <HAL_RCC_OscConfig+0x52e>
 8001eba:	bf00      	nop
 8001ebc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ec0:	4b9b      	ldr	r3, [pc, #620]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a9a      	ldr	r2, [pc, #616]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8001ec6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001eca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ecc:	f7ff f99e 	bl	800120c <HAL_GetTick>
 8001ed0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ed4:	f7ff f99a 	bl	800120c <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e1c0      	b.n	8002268 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ee6:	4b92      	ldr	r3, [pc, #584]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8081 	beq.w	8002002 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f00:	4b8c      	ldr	r3, [pc, #560]	@ (8002134 <HAL_RCC_OscConfig+0x770>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a8b      	ldr	r2, [pc, #556]	@ (8002134 <HAL_RCC_OscConfig+0x770>)
 8001f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f0c:	f7ff f97e 	bl	800120c <HAL_GetTick>
 8001f10:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f14:	f7ff f97a 	bl	800120c <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	@ 0x64
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e1a0      	b.n	8002268 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f26:	4b83      	ldr	r3, [pc, #524]	@ (8002134 <HAL_RCC_OscConfig+0x770>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d106      	bne.n	8001f48 <HAL_RCC_OscConfig+0x584>
 8001f3a:	4b7d      	ldr	r3, [pc, #500]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f3e:	4a7c      	ldr	r2, [pc, #496]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f46:	e02d      	b.n	8001fa4 <HAL_RCC_OscConfig+0x5e0>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x5a6>
 8001f50:	4b77      	ldr	r3, [pc, #476]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8001f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f54:	4a76      	ldr	r2, [pc, #472]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8001f56:	f023 0301 	bic.w	r3, r3, #1
 8001f5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f5c:	4b74      	ldr	r3, [pc, #464]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f60:	4a73      	ldr	r2, [pc, #460]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8001f62:	f023 0304 	bic.w	r3, r3, #4
 8001f66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f68:	e01c      	b.n	8001fa4 <HAL_RCC_OscConfig+0x5e0>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b05      	cmp	r3, #5
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x5c8>
 8001f72:	4b6f      	ldr	r3, [pc, #444]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f76:	4a6e      	ldr	r2, [pc, #440]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f7e:	4b6c      	ldr	r3, [pc, #432]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8001f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f82:	4a6b      	ldr	r2, [pc, #428]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f8a:	e00b      	b.n	8001fa4 <HAL_RCC_OscConfig+0x5e0>
 8001f8c:	4b68      	ldr	r3, [pc, #416]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8001f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f90:	4a67      	ldr	r2, [pc, #412]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8001f92:	f023 0301 	bic.w	r3, r3, #1
 8001f96:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f98:	4b65      	ldr	r3, [pc, #404]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9c:	4a64      	ldr	r2, [pc, #400]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8001f9e:	f023 0304 	bic.w	r3, r3, #4
 8001fa2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d015      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fac:	f7ff f92e 	bl	800120c <HAL_GetTick>
 8001fb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fb2:	e00a      	b.n	8001fca <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb4:	f7ff f92a 	bl	800120c <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e14e      	b.n	8002268 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fca:	4b59      	ldr	r3, [pc, #356]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0ee      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x5f0>
 8001fd6:	e014      	b.n	8002002 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd8:	f7ff f918 	bl	800120c <HAL_GetTick>
 8001fdc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fde:	e00a      	b.n	8001ff6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe0:	f7ff f914 	bl	800120c <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e138      	b.n	8002268 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ff6:	4b4e      	ldr	r3, [pc, #312]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1ee      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 812d 	beq.w	8002266 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800200c:	4b48      	ldr	r3, [pc, #288]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002014:	2b18      	cmp	r3, #24
 8002016:	f000 80bd 	beq.w	8002194 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201e:	2b02      	cmp	r3, #2
 8002020:	f040 809e 	bne.w	8002160 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002024:	4b42      	ldr	r3, [pc, #264]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a41      	ldr	r2, [pc, #260]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 800202a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800202e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002030:	f7ff f8ec 	bl	800120c <HAL_GetTick>
 8002034:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002038:	f7ff f8e8 	bl	800120c <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e10e      	b.n	8002268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800204a:	4b39      	ldr	r3, [pc, #228]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002056:	4b36      	ldr	r3, [pc, #216]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8002058:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800205a:	4b37      	ldr	r3, [pc, #220]	@ (8002138 <HAL_RCC_OscConfig+0x774>)
 800205c:	4013      	ands	r3, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002066:	0112      	lsls	r2, r2, #4
 8002068:	430a      	orrs	r2, r1
 800206a:	4931      	ldr	r1, [pc, #196]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 800206c:	4313      	orrs	r3, r2
 800206e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002074:	3b01      	subs	r3, #1
 8002076:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800207e:	3b01      	subs	r3, #1
 8002080:	025b      	lsls	r3, r3, #9
 8002082:	b29b      	uxth	r3, r3
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800208a:	3b01      	subs	r3, #1
 800208c:	041b      	lsls	r3, r3, #16
 800208e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002098:	3b01      	subs	r3, #1
 800209a:	061b      	lsls	r3, r3, #24
 800209c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80020a0:	4923      	ldr	r1, [pc, #140]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80020a6:	4b22      	ldr	r3, [pc, #136]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 80020a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020aa:	4a21      	ldr	r2, [pc, #132]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 80020b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020b6:	4b21      	ldr	r3, [pc, #132]	@ (800213c <HAL_RCC_OscConfig+0x778>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020be:	00d2      	lsls	r2, r2, #3
 80020c0:	491b      	ldr	r1, [pc, #108]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80020c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 80020c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ca:	f023 020c 	bic.w	r2, r3, #12
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	4917      	ldr	r1, [pc, #92]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80020d8:	4b15      	ldr	r3, [pc, #84]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 80020da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020dc:	f023 0202 	bic.w	r2, r3, #2
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e4:	4912      	ldr	r1, [pc, #72]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80020ea:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 80020ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ee:	4a10      	ldr	r2, [pc, #64]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 80020f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 80020f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fa:	4a0d      	ldr	r2, [pc, #52]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 80020fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002100:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002102:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8002104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002106:	4a0a      	ldr	r2, [pc, #40]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8002108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800210c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800210e:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8002110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002112:	4a07      	ldr	r2, [pc, #28]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800211a:	4b05      	ldr	r3, [pc, #20]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a04      	ldr	r2, [pc, #16]	@ (8002130 <HAL_RCC_OscConfig+0x76c>)
 8002120:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002126:	f7ff f871 	bl	800120c <HAL_GetTick>
 800212a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800212c:	e011      	b.n	8002152 <HAL_RCC_OscConfig+0x78e>
 800212e:	bf00      	nop
 8002130:	58024400 	.word	0x58024400
 8002134:	58024800 	.word	0x58024800
 8002138:	fffffc0c 	.word	0xfffffc0c
 800213c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002140:	f7ff f864 	bl	800120c <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e08a      	b.n	8002268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002152:	4b47      	ldr	r3, [pc, #284]	@ (8002270 <HAL_RCC_OscConfig+0x8ac>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0x77c>
 800215e:	e082      	b.n	8002266 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002160:	4b43      	ldr	r3, [pc, #268]	@ (8002270 <HAL_RCC_OscConfig+0x8ac>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a42      	ldr	r2, [pc, #264]	@ (8002270 <HAL_RCC_OscConfig+0x8ac>)
 8002166:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800216a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7ff f84e 	bl	800120c <HAL_GetTick>
 8002170:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002174:	f7ff f84a 	bl	800120c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e070      	b.n	8002268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002186:	4b3a      	ldr	r3, [pc, #232]	@ (8002270 <HAL_RCC_OscConfig+0x8ac>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x7b0>
 8002192:	e068      	b.n	8002266 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002194:	4b36      	ldr	r3, [pc, #216]	@ (8002270 <HAL_RCC_OscConfig+0x8ac>)
 8002196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002198:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800219a:	4b35      	ldr	r3, [pc, #212]	@ (8002270 <HAL_RCC_OscConfig+0x8ac>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d031      	beq.n	800220c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	f003 0203 	and.w	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d12a      	bne.n	800220c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d122      	bne.n	800220c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d11a      	bne.n	800220c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	0a5b      	lsrs	r3, r3, #9
 80021da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021e2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d111      	bne.n	800220c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	0c1b      	lsrs	r3, r3, #16
 80021ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d108      	bne.n	800220c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	0e1b      	lsrs	r3, r3, #24
 80021fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002206:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002208:	429a      	cmp	r2, r3
 800220a:	d001      	beq.n	8002210 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e02b      	b.n	8002268 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002210:	4b17      	ldr	r3, [pc, #92]	@ (8002270 <HAL_RCC_OscConfig+0x8ac>)
 8002212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002214:	08db      	lsrs	r3, r3, #3
 8002216:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800221a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	429a      	cmp	r2, r3
 8002224:	d01f      	beq.n	8002266 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002226:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <HAL_RCC_OscConfig+0x8ac>)
 8002228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222a:	4a11      	ldr	r2, [pc, #68]	@ (8002270 <HAL_RCC_OscConfig+0x8ac>)
 800222c:	f023 0301 	bic.w	r3, r3, #1
 8002230:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002232:	f7fe ffeb 	bl	800120c <HAL_GetTick>
 8002236:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002238:	bf00      	nop
 800223a:	f7fe ffe7 	bl	800120c <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002242:	4293      	cmp	r3, r2
 8002244:	d0f9      	beq.n	800223a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002246:	4b0a      	ldr	r3, [pc, #40]	@ (8002270 <HAL_RCC_OscConfig+0x8ac>)
 8002248:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800224a:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <HAL_RCC_OscConfig+0x8b0>)
 800224c:	4013      	ands	r3, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002252:	00d2      	lsls	r2, r2, #3
 8002254:	4906      	ldr	r1, [pc, #24]	@ (8002270 <HAL_RCC_OscConfig+0x8ac>)
 8002256:	4313      	orrs	r3, r2
 8002258:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800225a:	4b05      	ldr	r3, [pc, #20]	@ (8002270 <HAL_RCC_OscConfig+0x8ac>)
 800225c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225e:	4a04      	ldr	r2, [pc, #16]	@ (8002270 <HAL_RCC_OscConfig+0x8ac>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3730      	adds	r7, #48	@ 0x30
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	58024400 	.word	0x58024400
 8002274:	ffff0007 	.word	0xffff0007

08002278 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e19c      	b.n	80025c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800228c:	4b8a      	ldr	r3, [pc, #552]	@ (80024b8 <HAL_RCC_ClockConfig+0x240>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 030f 	and.w	r3, r3, #15
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d910      	bls.n	80022bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b87      	ldr	r3, [pc, #540]	@ (80024b8 <HAL_RCC_ClockConfig+0x240>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 020f 	bic.w	r2, r3, #15
 80022a2:	4985      	ldr	r1, [pc, #532]	@ (80024b8 <HAL_RCC_ClockConfig+0x240>)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b83      	ldr	r3, [pc, #524]	@ (80024b8 <HAL_RCC_ClockConfig+0x240>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e184      	b.n	80025c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d010      	beq.n	80022ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	4b7b      	ldr	r3, [pc, #492]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d908      	bls.n	80022ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022d8:	4b78      	ldr	r3, [pc, #480]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	4975      	ldr	r1, [pc, #468]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d010      	beq.n	8002318 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	4b70      	ldr	r3, [pc, #448]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002302:	429a      	cmp	r2, r3
 8002304:	d908      	bls.n	8002318 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002306:	4b6d      	ldr	r3, [pc, #436]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	496a      	ldr	r1, [pc, #424]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002314:	4313      	orrs	r3, r2
 8002316:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	2b00      	cmp	r3, #0
 8002322:	d010      	beq.n	8002346 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699a      	ldr	r2, [r3, #24]
 8002328:	4b64      	ldr	r3, [pc, #400]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002330:	429a      	cmp	r2, r3
 8002332:	d908      	bls.n	8002346 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002334:	4b61      	ldr	r3, [pc, #388]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	495e      	ldr	r1, [pc, #376]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002342:	4313      	orrs	r3, r2
 8002344:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0320 	and.w	r3, r3, #32
 800234e:	2b00      	cmp	r3, #0
 8002350:	d010      	beq.n	8002374 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69da      	ldr	r2, [r3, #28]
 8002356:	4b59      	ldr	r3, [pc, #356]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800235e:	429a      	cmp	r2, r3
 8002360:	d908      	bls.n	8002374 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002362:	4b56      	ldr	r3, [pc, #344]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	4953      	ldr	r1, [pc, #332]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002370:	4313      	orrs	r3, r2
 8002372:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d010      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	4b4d      	ldr	r3, [pc, #308]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f003 030f 	and.w	r3, r3, #15
 800238c:	429a      	cmp	r2, r3
 800238e:	d908      	bls.n	80023a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002390:	4b4a      	ldr	r3, [pc, #296]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f023 020f 	bic.w	r2, r3, #15
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4947      	ldr	r1, [pc, #284]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d055      	beq.n	800245a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023ae:	4b43      	ldr	r3, [pc, #268]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	4940      	ldr	r1, [pc, #256]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d107      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023c8:	4b3c      	ldr	r3, [pc, #240]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d121      	bne.n	8002418 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0f6      	b.n	80025c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d107      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023e0:	4b36      	ldr	r3, [pc, #216]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d115      	bne.n	8002418 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0ea      	b.n	80025c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d107      	bne.n	8002408 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023f8:	4b30      	ldr	r3, [pc, #192]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0de      	b.n	80025c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002408:	4b2c      	ldr	r3, [pc, #176]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0d6      	b.n	80025c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002418:	4b28      	ldr	r3, [pc, #160]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f023 0207 	bic.w	r2, r3, #7
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	4925      	ldr	r1, [pc, #148]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002426:	4313      	orrs	r3, r2
 8002428:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800242a:	f7fe feef 	bl	800120c <HAL_GetTick>
 800242e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002430:	e00a      	b.n	8002448 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002432:	f7fe feeb 	bl	800120c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e0be      	b.n	80025c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002448:	4b1c      	ldr	r3, [pc, #112]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	429a      	cmp	r2, r3
 8002458:	d1eb      	bne.n	8002432 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d010      	beq.n	8002488 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	4b14      	ldr	r3, [pc, #80]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	429a      	cmp	r2, r3
 8002474:	d208      	bcs.n	8002488 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002476:	4b11      	ldr	r3, [pc, #68]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f023 020f 	bic.w	r2, r3, #15
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	490e      	ldr	r1, [pc, #56]	@ (80024bc <HAL_RCC_ClockConfig+0x244>)
 8002484:	4313      	orrs	r3, r2
 8002486:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002488:	4b0b      	ldr	r3, [pc, #44]	@ (80024b8 <HAL_RCC_ClockConfig+0x240>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d214      	bcs.n	80024c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b08      	ldr	r3, [pc, #32]	@ (80024b8 <HAL_RCC_ClockConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 020f 	bic.w	r2, r3, #15
 800249e:	4906      	ldr	r1, [pc, #24]	@ (80024b8 <HAL_RCC_ClockConfig+0x240>)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b04      	ldr	r3, [pc, #16]	@ (80024b8 <HAL_RCC_ClockConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e086      	b.n	80025c6 <HAL_RCC_ClockConfig+0x34e>
 80024b8:	52002000 	.word	0x52002000
 80024bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d010      	beq.n	80024ee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	4b3f      	ldr	r3, [pc, #252]	@ (80025d0 <HAL_RCC_ClockConfig+0x358>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024d8:	429a      	cmp	r2, r3
 80024da:	d208      	bcs.n	80024ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024dc:	4b3c      	ldr	r3, [pc, #240]	@ (80025d0 <HAL_RCC_ClockConfig+0x358>)
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	4939      	ldr	r1, [pc, #228]	@ (80025d0 <HAL_RCC_ClockConfig+0x358>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d010      	beq.n	800251c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	4b34      	ldr	r3, [pc, #208]	@ (80025d0 <HAL_RCC_ClockConfig+0x358>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002506:	429a      	cmp	r2, r3
 8002508:	d208      	bcs.n	800251c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800250a:	4b31      	ldr	r3, [pc, #196]	@ (80025d0 <HAL_RCC_ClockConfig+0x358>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	492e      	ldr	r1, [pc, #184]	@ (80025d0 <HAL_RCC_ClockConfig+0x358>)
 8002518:	4313      	orrs	r3, r2
 800251a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b00      	cmp	r3, #0
 8002526:	d010      	beq.n	800254a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699a      	ldr	r2, [r3, #24]
 800252c:	4b28      	ldr	r3, [pc, #160]	@ (80025d0 <HAL_RCC_ClockConfig+0x358>)
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002534:	429a      	cmp	r2, r3
 8002536:	d208      	bcs.n	800254a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002538:	4b25      	ldr	r3, [pc, #148]	@ (80025d0 <HAL_RCC_ClockConfig+0x358>)
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	4922      	ldr	r1, [pc, #136]	@ (80025d0 <HAL_RCC_ClockConfig+0x358>)
 8002546:	4313      	orrs	r3, r2
 8002548:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0320 	and.w	r3, r3, #32
 8002552:	2b00      	cmp	r3, #0
 8002554:	d010      	beq.n	8002578 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69da      	ldr	r2, [r3, #28]
 800255a:	4b1d      	ldr	r3, [pc, #116]	@ (80025d0 <HAL_RCC_ClockConfig+0x358>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002562:	429a      	cmp	r2, r3
 8002564:	d208      	bcs.n	8002578 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002566:	4b1a      	ldr	r3, [pc, #104]	@ (80025d0 <HAL_RCC_ClockConfig+0x358>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	4917      	ldr	r1, [pc, #92]	@ (80025d0 <HAL_RCC_ClockConfig+0x358>)
 8002574:	4313      	orrs	r3, r2
 8002576:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002578:	f000 f834 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 800257c:	4602      	mov	r2, r0
 800257e:	4b14      	ldr	r3, [pc, #80]	@ (80025d0 <HAL_RCC_ClockConfig+0x358>)
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	0a1b      	lsrs	r3, r3, #8
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	4912      	ldr	r1, [pc, #72]	@ (80025d4 <HAL_RCC_ClockConfig+0x35c>)
 800258a:	5ccb      	ldrb	r3, [r1, r3]
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
 8002594:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002596:	4b0e      	ldr	r3, [pc, #56]	@ (80025d0 <HAL_RCC_ClockConfig+0x358>)
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	4a0d      	ldr	r2, [pc, #52]	@ (80025d4 <HAL_RCC_ClockConfig+0x35c>)
 80025a0:	5cd3      	ldrb	r3, [r2, r3]
 80025a2:	f003 031f 	and.w	r3, r3, #31
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ac:	4a0a      	ldr	r2, [pc, #40]	@ (80025d8 <HAL_RCC_ClockConfig+0x360>)
 80025ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025b0:	4a0a      	ldr	r2, [pc, #40]	@ (80025dc <HAL_RCC_ClockConfig+0x364>)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80025b6:	4b0a      	ldr	r3, [pc, #40]	@ (80025e0 <HAL_RCC_ClockConfig+0x368>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fba6 	bl	8000d0c <HAL_InitTick>
 80025c0:	4603      	mov	r3, r0
 80025c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	58024400 	.word	0x58024400
 80025d4:	08008488 	.word	0x08008488
 80025d8:	24000004 	.word	0x24000004
 80025dc:	24000000 	.word	0x24000000
 80025e0:	2400000c 	.word	0x2400000c

080025e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	@ 0x24
 80025e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ea:	4bb3      	ldr	r3, [pc, #716]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025f2:	2b18      	cmp	r3, #24
 80025f4:	f200 8155 	bhi.w	80028a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80025f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002600 <HAL_RCC_GetSysClockFreq+0x1c>)
 80025fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fe:	bf00      	nop
 8002600:	08002665 	.word	0x08002665
 8002604:	080028a3 	.word	0x080028a3
 8002608:	080028a3 	.word	0x080028a3
 800260c:	080028a3 	.word	0x080028a3
 8002610:	080028a3 	.word	0x080028a3
 8002614:	080028a3 	.word	0x080028a3
 8002618:	080028a3 	.word	0x080028a3
 800261c:	080028a3 	.word	0x080028a3
 8002620:	0800268b 	.word	0x0800268b
 8002624:	080028a3 	.word	0x080028a3
 8002628:	080028a3 	.word	0x080028a3
 800262c:	080028a3 	.word	0x080028a3
 8002630:	080028a3 	.word	0x080028a3
 8002634:	080028a3 	.word	0x080028a3
 8002638:	080028a3 	.word	0x080028a3
 800263c:	080028a3 	.word	0x080028a3
 8002640:	08002691 	.word	0x08002691
 8002644:	080028a3 	.word	0x080028a3
 8002648:	080028a3 	.word	0x080028a3
 800264c:	080028a3 	.word	0x080028a3
 8002650:	080028a3 	.word	0x080028a3
 8002654:	080028a3 	.word	0x080028a3
 8002658:	080028a3 	.word	0x080028a3
 800265c:	080028a3 	.word	0x080028a3
 8002660:	08002697 	.word	0x08002697
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002664:	4b94      	ldr	r3, [pc, #592]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d009      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002670:	4b91      	ldr	r3, [pc, #580]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	08db      	lsrs	r3, r3, #3
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	4a90      	ldr	r2, [pc, #576]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
 8002680:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002682:	e111      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002684:	4b8d      	ldr	r3, [pc, #564]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002686:	61bb      	str	r3, [r7, #24]
      break;
 8002688:	e10e      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800268a:	4b8d      	ldr	r3, [pc, #564]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800268c:	61bb      	str	r3, [r7, #24]
      break;
 800268e:	e10b      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002690:	4b8c      	ldr	r3, [pc, #560]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002692:	61bb      	str	r3, [r7, #24]
      break;
 8002694:	e108      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002696:	4b88      	ldr	r3, [pc, #544]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80026a0:	4b85      	ldr	r3, [pc, #532]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026ac:	4b82      	ldr	r3, [pc, #520]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80026b6:	4b80      	ldr	r3, [pc, #512]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ba:	08db      	lsrs	r3, r3, #3
 80026bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80e1 	beq.w	800289c <HAL_RCC_GetSysClockFreq+0x2b8>
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	f000 8083 	beq.w	80027e8 <HAL_RCC_GetSysClockFreq+0x204>
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	f200 80a1 	bhi.w	800282c <HAL_RCC_GetSysClockFreq+0x248>
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x114>
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d056      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80026f6:	e099      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026f8:	4b6f      	ldr	r3, [pc, #444]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b00      	cmp	r3, #0
 8002702:	d02d      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002704:	4b6c      	ldr	r3, [pc, #432]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	08db      	lsrs	r3, r3, #3
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	4a6b      	ldr	r2, [pc, #428]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
 8002714:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	ee07 3a90 	vmov	s15, r3
 800271c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	ee07 3a90 	vmov	s15, r3
 8002726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800272a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800272e:	4b62      	ldr	r3, [pc, #392]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002736:	ee07 3a90 	vmov	s15, r3
 800273a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800273e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002742:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80028c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800274a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800274e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800275a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800275e:	e087      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	ee07 3a90 	vmov	s15, r3
 8002766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800276a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80028cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800276e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002772:	4b51      	ldr	r3, [pc, #324]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002782:	ed97 6a02 	vldr	s12, [r7, #8]
 8002786:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80028c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800278a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800278e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800279a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800279e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027a2:	e065      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	ee07 3a90 	vmov	s15, r3
 80027aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80028d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027b6:	4b40      	ldr	r3, [pc, #256]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027be:	ee07 3a90 	vmov	s15, r3
 80027c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80027ca:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80028c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027e6:	e043      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	ee07 3a90 	vmov	s15, r3
 80027ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027f2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80028d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80027f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027fa:	4b2f      	ldr	r3, [pc, #188]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800280a:	ed97 6a02 	vldr	s12, [r7, #8]
 800280e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80028c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800281a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800281e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002826:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800282a:	e021      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	ee07 3a90 	vmov	s15, r3
 8002832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002836:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80028d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800283a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800283e:	4b1e      	ldr	r3, [pc, #120]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002846:	ee07 3a90 	vmov	s15, r3
 800284a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800284e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002852:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80028c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800285a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800285e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800286e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002870:	4b11      	ldr	r3, [pc, #68]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002874:	0a5b      	lsrs	r3, r3, #9
 8002876:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800287a:	3301      	adds	r3, #1
 800287c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	ee07 3a90 	vmov	s15, r3
 8002884:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002888:	edd7 6a07 	vldr	s13, [r7, #28]
 800288c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002894:	ee17 3a90 	vmov	r3, s15
 8002898:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800289a:	e005      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	61bb      	str	r3, [r7, #24]
      break;
 80028a0:	e002      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80028a2:	4b07      	ldr	r3, [pc, #28]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028a4:	61bb      	str	r3, [r7, #24]
      break;
 80028a6:	bf00      	nop
  }

  return sysclockfreq;
 80028a8:	69bb      	ldr	r3, [r7, #24]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3724      	adds	r7, #36	@ 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	58024400 	.word	0x58024400
 80028bc:	03d09000 	.word	0x03d09000
 80028c0:	003d0900 	.word	0x003d0900
 80028c4:	017d7840 	.word	0x017d7840
 80028c8:	46000000 	.word	0x46000000
 80028cc:	4c742400 	.word	0x4c742400
 80028d0:	4a742400 	.word	0x4a742400
 80028d4:	4bbebc20 	.word	0x4bbebc20

080028d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80028de:	f7ff fe81 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 80028e2:	4602      	mov	r2, r0
 80028e4:	4b10      	ldr	r3, [pc, #64]	@ (8002928 <HAL_RCC_GetHCLKFreq+0x50>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	490f      	ldr	r1, [pc, #60]	@ (800292c <HAL_RCC_GetHCLKFreq+0x54>)
 80028f0:	5ccb      	ldrb	r3, [r1, r3]
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	fa22 f303 	lsr.w	r3, r2, r3
 80028fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002928 <HAL_RCC_GetHCLKFreq+0x50>)
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	4a09      	ldr	r2, [pc, #36]	@ (800292c <HAL_RCC_GetHCLKFreq+0x54>)
 8002906:	5cd3      	ldrb	r3, [r2, r3]
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	fa22 f303 	lsr.w	r3, r2, r3
 8002912:	4a07      	ldr	r2, [pc, #28]	@ (8002930 <HAL_RCC_GetHCLKFreq+0x58>)
 8002914:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002916:	4a07      	ldr	r2, [pc, #28]	@ (8002934 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800291c:	4b04      	ldr	r3, [pc, #16]	@ (8002930 <HAL_RCC_GetHCLKFreq+0x58>)
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	58024400 	.word	0x58024400
 800292c:	08008488 	.word	0x08008488
 8002930:	24000004 	.word	0x24000004
 8002934:	24000000 	.word	0x24000000

08002938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800293c:	f7ff ffcc 	bl	80028d8 <HAL_RCC_GetHCLKFreq>
 8002940:	4602      	mov	r2, r0
 8002942:	4b06      	ldr	r3, [pc, #24]	@ (800295c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	091b      	lsrs	r3, r3, #4
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	4904      	ldr	r1, [pc, #16]	@ (8002960 <HAL_RCC_GetPCLK1Freq+0x28>)
 800294e:	5ccb      	ldrb	r3, [r1, r3]
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002958:	4618      	mov	r0, r3
 800295a:	bd80      	pop	{r7, pc}
 800295c:	58024400 	.word	0x58024400
 8002960:	08008488 	.word	0x08008488

08002964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002968:	f7ff ffb6 	bl	80028d8 <HAL_RCC_GetHCLKFreq>
 800296c:	4602      	mov	r2, r0
 800296e:	4b06      	ldr	r3, [pc, #24]	@ (8002988 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	0a1b      	lsrs	r3, r3, #8
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	4904      	ldr	r1, [pc, #16]	@ (800298c <HAL_RCC_GetPCLK2Freq+0x28>)
 800297a:	5ccb      	ldrb	r3, [r1, r3]
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002984:	4618      	mov	r0, r3
 8002986:	bd80      	pop	{r7, pc}
 8002988:	58024400 	.word	0x58024400
 800298c:	08008488 	.word	0x08008488

08002990 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	223f      	movs	r2, #63	@ 0x3f
 800299e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029a0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a0c <HAL_RCC_GetClockConfig+0x7c>)
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	f003 0207 	and.w	r2, r3, #7
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80029ac:	4b17      	ldr	r3, [pc, #92]	@ (8002a0c <HAL_RCC_GetClockConfig+0x7c>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80029b8:	4b14      	ldr	r3, [pc, #80]	@ (8002a0c <HAL_RCC_GetClockConfig+0x7c>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	f003 020f 	and.w	r2, r3, #15
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80029c4:	4b11      	ldr	r3, [pc, #68]	@ (8002a0c <HAL_RCC_GetClockConfig+0x7c>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80029d0:	4b0e      	ldr	r3, [pc, #56]	@ (8002a0c <HAL_RCC_GetClockConfig+0x7c>)
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80029dc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a0c <HAL_RCC_GetClockConfig+0x7c>)
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80029e8:	4b08      	ldr	r3, [pc, #32]	@ (8002a0c <HAL_RCC_GetClockConfig+0x7c>)
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029f4:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <HAL_RCC_GetClockConfig+0x80>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 020f 	and.w	r2, r3, #15
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	601a      	str	r2, [r3, #0]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	58024400 	.word	0x58024400
 8002a10:	52002000 	.word	0x52002000

08002a14 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a18:	b0ca      	sub	sp, #296	@ 0x128
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a20:	2300      	movs	r3, #0
 8002a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a26:	2300      	movs	r3, #0
 8002a28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a34:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002a38:	2500      	movs	r5, #0
 8002a3a:	ea54 0305 	orrs.w	r3, r4, r5
 8002a3e:	d049      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a46:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002a4a:	d02f      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002a4c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002a50:	d828      	bhi.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a56:	d01a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a5c:	d822      	bhi.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002a62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a66:	d007      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a68:	e01c      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a6a:	4bb8      	ldr	r3, [pc, #736]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6e:	4ab7      	ldr	r2, [pc, #732]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a76:	e01a      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	2102      	movs	r1, #2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f001 fc8f 	bl	80043a4 <RCCEx_PLL2_Config>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a8c:	e00f      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a92:	3328      	adds	r3, #40	@ 0x28
 8002a94:	2102      	movs	r1, #2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f001 fd36 	bl	8004508 <RCCEx_PLL3_Config>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002aa2:	e004      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002aaa:	e000      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10a      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002ab6:	4ba5      	ldr	r3, [pc, #660]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ac2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ac4:	4aa1      	ldr	r2, [pc, #644]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	6513      	str	r3, [r2, #80]	@ 0x50
 8002aca:	e003      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002acc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ad0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002adc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002ae0:	f04f 0900 	mov.w	r9, #0
 8002ae4:	ea58 0309 	orrs.w	r3, r8, r9
 8002ae8:	d047      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d82a      	bhi.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002af4:	a201      	add	r2, pc, #4	@ (adr r2, 8002afc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afa:	bf00      	nop
 8002afc:	08002b11 	.word	0x08002b11
 8002b00:	08002b1f 	.word	0x08002b1f
 8002b04:	08002b35 	.word	0x08002b35
 8002b08:	08002b53 	.word	0x08002b53
 8002b0c:	08002b53 	.word	0x08002b53
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b10:	4b8e      	ldr	r3, [pc, #568]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b14:	4a8d      	ldr	r2, [pc, #564]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b1c:	e01a      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b22:	3308      	adds	r3, #8
 8002b24:	2100      	movs	r1, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f001 fc3c 	bl	80043a4 <RCCEx_PLL2_Config>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b32:	e00f      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b38:	3328      	adds	r3, #40	@ 0x28
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f001 fce3 	bl	8004508 <RCCEx_PLL3_Config>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b48:	e004      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b50:	e000      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002b52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10a      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b5c:	4b7b      	ldr	r3, [pc, #492]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b60:	f023 0107 	bic.w	r1, r3, #7
 8002b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6a:	4a78      	ldr	r2, [pc, #480]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b70:	e003      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b82:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002b86:	f04f 0b00 	mov.w	fp, #0
 8002b8a:	ea5a 030b 	orrs.w	r3, sl, fp
 8002b8e:	d04c      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b9a:	d030      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002b9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ba0:	d829      	bhi.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002ba2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ba4:	d02d      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002ba6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ba8:	d825      	bhi.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002baa:	2b80      	cmp	r3, #128	@ 0x80
 8002bac:	d018      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002bae:	2b80      	cmp	r3, #128	@ 0x80
 8002bb0:	d821      	bhi.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002bb6:	2b40      	cmp	r3, #64	@ 0x40
 8002bb8:	d007      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002bba:	e01c      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bbc:	4b63      	ldr	r3, [pc, #396]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc0:	4a62      	ldr	r2, [pc, #392]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002bc8:	e01c      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bce:	3308      	adds	r3, #8
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f001 fbe6 	bl	80043a4 <RCCEx_PLL2_Config>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002bde:	e011      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002be4:	3328      	adds	r3, #40	@ 0x28
 8002be6:	2100      	movs	r1, #0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f001 fc8d 	bl	8004508 <RCCEx_PLL3_Config>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002bf4:	e006      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002bfc:	e002      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002bfe:	bf00      	nop
 8002c00:	e000      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002c02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10a      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002c0c:	4b4f      	ldr	r3, [pc, #316]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c10:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1a:	4a4c      	ldr	r2, [pc, #304]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c20:	e003      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c32:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002c36:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002c40:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002c44:	460b      	mov	r3, r1
 8002c46:	4313      	orrs	r3, r2
 8002c48:	d053      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002c52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c56:	d035      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002c58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c5c:	d82e      	bhi.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c5e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002c62:	d031      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002c64:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002c68:	d828      	bhi.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c6e:	d01a      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002c70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c74:	d822      	bhi.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002c7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c7e:	d007      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002c80:	e01c      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c82:	4b32      	ldr	r3, [pc, #200]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c86:	4a31      	ldr	r2, [pc, #196]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c8e:	e01c      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c94:	3308      	adds	r3, #8
 8002c96:	2100      	movs	r1, #0
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f001 fb83 	bl	80043a4 <RCCEx_PLL2_Config>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ca4:	e011      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002caa:	3328      	adds	r3, #40	@ 0x28
 8002cac:	2100      	movs	r1, #0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f001 fc2a 	bl	8004508 <RCCEx_PLL3_Config>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cba:	e006      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cc2:	e002      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002cc4:	bf00      	nop
 8002cc6:	e000      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10b      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002ce2:	4a1a      	ldr	r2, [pc, #104]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ce8:	e003      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002cfe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002d02:	2300      	movs	r3, #0
 8002d04:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002d08:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	d056      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002d1a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d1e:	d038      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002d20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d24:	d831      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d26:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d2a:	d034      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002d2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d30:	d82b      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d36:	d01d      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002d38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d3c:	d825      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d006      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002d42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d46:	d00a      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002d48:	e01f      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d4a:	bf00      	nop
 8002d4c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d50:	4ba2      	ldr	r3, [pc, #648]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d54:	4aa1      	ldr	r2, [pc, #644]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d5c:	e01c      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d62:	3308      	adds	r3, #8
 8002d64:	2100      	movs	r1, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f001 fb1c 	bl	80043a4 <RCCEx_PLL2_Config>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002d72:	e011      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d78:	3328      	adds	r3, #40	@ 0x28
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f001 fbc3 	bl	8004508 <RCCEx_PLL3_Config>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d88:	e006      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d90:	e002      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002d92:	bf00      	nop
 8002d94:	e000      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002d96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10b      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002da0:	4b8e      	ldr	r3, [pc, #568]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002db0:	4a8a      	ldr	r2, [pc, #552]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002db2:	430b      	orrs	r3, r1
 8002db4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002db6:	e003      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002dcc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002dd6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	d03a      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de6:	2b30      	cmp	r3, #48	@ 0x30
 8002de8:	d01f      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002dea:	2b30      	cmp	r3, #48	@ 0x30
 8002dec:	d819      	bhi.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	d00c      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002df2:	2b20      	cmp	r3, #32
 8002df4:	d815      	bhi.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d019      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002dfa:	2b10      	cmp	r3, #16
 8002dfc:	d111      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dfe:	4b77      	ldr	r3, [pc, #476]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e02:	4a76      	ldr	r2, [pc, #472]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002e0a:	e011      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e10:	3308      	adds	r3, #8
 8002e12:	2102      	movs	r1, #2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f001 fac5 	bl	80043a4 <RCCEx_PLL2_Config>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002e20:	e006      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e28:	e002      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002e2a:	bf00      	nop
 8002e2c:	e000      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002e2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e38:	4b68      	ldr	r3, [pc, #416]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e46:	4a65      	ldr	r2, [pc, #404]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e4c:	e003      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002e62:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002e66:	2300      	movs	r3, #0
 8002e68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002e6c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4313      	orrs	r3, r2
 8002e74:	d051      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e80:	d035      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002e82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e86:	d82e      	bhi.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e8c:	d031      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002e8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e92:	d828      	bhi.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e98:	d01a      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002e9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e9e:	d822      	bhi.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002ea4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ea8:	d007      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002eaa:	e01c      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eac:	4b4b      	ldr	r3, [pc, #300]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb0:	4a4a      	ldr	r2, [pc, #296]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002eb8:	e01c      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ebe:	3308      	adds	r3, #8
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f001 fa6e 	bl	80043a4 <RCCEx_PLL2_Config>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ece:	e011      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ed4:	3328      	adds	r3, #40	@ 0x28
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f001 fb15 	bl	8004508 <RCCEx_PLL3_Config>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ee4:	e006      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002eec:	e002      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002eee:	bf00      	nop
 8002ef0:	e000      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002ef2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ef4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10a      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002efc:	4b37      	ldr	r3, [pc, #220]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f00:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f0a:	4a34      	ldr	r2, [pc, #208]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f10:	e003      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f22:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002f26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002f30:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002f34:	460b      	mov	r3, r1
 8002f36:	4313      	orrs	r3, r2
 8002f38:	d056      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f44:	d033      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002f46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f4a:	d82c      	bhi.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f50:	d02f      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002f52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f56:	d826      	bhi.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f5c:	d02b      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002f5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f62:	d820      	bhi.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f68:	d012      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002f6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f6e:	d81a      	bhi.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d022      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002f74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f78:	d115      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f7e:	3308      	adds	r3, #8
 8002f80:	2101      	movs	r1, #1
 8002f82:	4618      	mov	r0, r3
 8002f84:	f001 fa0e 	bl	80043a4 <RCCEx_PLL2_Config>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f8e:	e015      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f94:	3328      	adds	r3, #40	@ 0x28
 8002f96:	2101      	movs	r1, #1
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f001 fab5 	bl	8004508 <RCCEx_PLL3_Config>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002fa4:	e00a      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fac:	e006      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002fae:	bf00      	nop
 8002fb0:	e004      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002fb2:	bf00      	nop
 8002fb4:	e002      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002fb6:	bf00      	nop
 8002fb8:	e000      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10d      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002fc4:	4b05      	ldr	r3, [pc, #20]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fc8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fd2:	4a02      	ldr	r2, [pc, #8]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002fd8:	e006      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002fda:	bf00      	nop
 8002fdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fe4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ffe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003002:	460b      	mov	r3, r1
 8003004:	4313      	orrs	r3, r2
 8003006:	d055      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003010:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003014:	d033      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003016:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800301a:	d82c      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800301c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003020:	d02f      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003026:	d826      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003028:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800302c:	d02b      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800302e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003032:	d820      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003034:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003038:	d012      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800303a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800303e:	d81a      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003040:	2b00      	cmp	r3, #0
 8003042:	d022      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003044:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003048:	d115      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800304a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800304e:	3308      	adds	r3, #8
 8003050:	2101      	movs	r1, #1
 8003052:	4618      	mov	r0, r3
 8003054:	f001 f9a6 	bl	80043a4 <RCCEx_PLL2_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800305e:	e015      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003064:	3328      	adds	r3, #40	@ 0x28
 8003066:	2101      	movs	r1, #1
 8003068:	4618      	mov	r0, r3
 800306a:	f001 fa4d 	bl	8004508 <RCCEx_PLL3_Config>
 800306e:	4603      	mov	r3, r0
 8003070:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003074:	e00a      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800307c:	e006      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800307e:	bf00      	nop
 8003080:	e004      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003082:	bf00      	nop
 8003084:	e002      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003086:	bf00      	nop
 8003088:	e000      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800308a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800308c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10b      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003094:	4ba3      	ldr	r3, [pc, #652]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003098:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800309c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80030a4:	4a9f      	ldr	r2, [pc, #636]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030a6:	430b      	orrs	r3, r1
 80030a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80030aa:	e003      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80030b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80030c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80030c4:	2300      	movs	r3, #0
 80030c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80030ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80030ce:	460b      	mov	r3, r1
 80030d0:	4313      	orrs	r3, r2
 80030d2:	d037      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80030d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030de:	d00e      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80030e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030e4:	d816      	bhi.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d018      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80030ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030ee:	d111      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030f0:	4b8c      	ldr	r3, [pc, #560]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f4:	4a8b      	ldr	r2, [pc, #556]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80030fc:	e00f      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003102:	3308      	adds	r3, #8
 8003104:	2101      	movs	r1, #1
 8003106:	4618      	mov	r0, r3
 8003108:	f001 f94c 	bl	80043a4 <RCCEx_PLL2_Config>
 800310c:	4603      	mov	r3, r0
 800310e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003112:	e004      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800311a:	e000      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800311c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800311e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10a      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003126:	4b7f      	ldr	r3, [pc, #508]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800312a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800312e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003134:	4a7b      	ldr	r2, [pc, #492]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003136:	430b      	orrs	r3, r1
 8003138:	6513      	str	r3, [r2, #80]	@ 0x50
 800313a:	e003      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003140:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003150:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003154:	2300      	movs	r3, #0
 8003156:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800315a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800315e:	460b      	mov	r3, r1
 8003160:	4313      	orrs	r3, r2
 8003162:	d039      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800316a:	2b03      	cmp	r3, #3
 800316c:	d81c      	bhi.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800316e:	a201      	add	r2, pc, #4	@ (adr r2, 8003174 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003174:	080031b1 	.word	0x080031b1
 8003178:	08003185 	.word	0x08003185
 800317c:	08003193 	.word	0x08003193
 8003180:	080031b1 	.word	0x080031b1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003184:	4b67      	ldr	r3, [pc, #412]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003188:	4a66      	ldr	r2, [pc, #408]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800318a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800318e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003190:	e00f      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003196:	3308      	adds	r3, #8
 8003198:	2102      	movs	r1, #2
 800319a:	4618      	mov	r0, r3
 800319c:	f001 f902 	bl	80043a4 <RCCEx_PLL2_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80031a6:	e004      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031ae:	e000      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80031b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10a      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80031ba:	4b5a      	ldr	r3, [pc, #360]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031be:	f023 0103 	bic.w	r1, r3, #3
 80031c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031c8:	4a56      	ldr	r2, [pc, #344]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031ca:	430b      	orrs	r3, r1
 80031cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031ce:	e003      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80031e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031e8:	2300      	movs	r3, #0
 80031ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80031f2:	460b      	mov	r3, r1
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f000 809f 	beq.w	8003338 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031fa:	4b4b      	ldr	r3, [pc, #300]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a4a      	ldr	r2, [pc, #296]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003204:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003206:	f7fe f801 	bl	800120c <HAL_GetTick>
 800320a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800320e:	e00b      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003210:	f7fd fffc 	bl	800120c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b64      	cmp	r3, #100	@ 0x64
 800321e:	d903      	bls.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003226:	e005      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003228:	4b3f      	ldr	r3, [pc, #252]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0ed      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003234:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003238:	2b00      	cmp	r3, #0
 800323a:	d179      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800323c:	4b39      	ldr	r3, [pc, #228]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800323e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003244:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003248:	4053      	eors	r3, r2
 800324a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800324e:	2b00      	cmp	r3, #0
 8003250:	d015      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003252:	4b34      	ldr	r3, [pc, #208]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003256:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800325a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800325e:	4b31      	ldr	r3, [pc, #196]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003262:	4a30      	ldr	r2, [pc, #192]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003268:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800326a:	4b2e      	ldr	r3, [pc, #184]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800326c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326e:	4a2d      	ldr	r2, [pc, #180]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003270:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003274:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003276:	4a2b      	ldr	r2, [pc, #172]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003278:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800327c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800327e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003282:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800328a:	d118      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fd ffbe 	bl	800120c <HAL_GetTick>
 8003290:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003294:	e00d      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003296:	f7fd ffb9 	bl	800120c <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80032a0:	1ad2      	subs	r2, r2, r3
 80032a2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d903      	bls.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80032b0:	e005      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0eb      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80032be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d129      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80032ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032d6:	d10e      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80032d8:	4b12      	ldr	r3, [pc, #72]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80032e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80032e8:	091a      	lsrs	r2, r3, #4
 80032ea:	4b10      	ldr	r3, [pc, #64]	@ (800332c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032f0:	430b      	orrs	r3, r1
 80032f2:	6113      	str	r3, [r2, #16]
 80032f4:	e005      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80032f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003300:	6113      	str	r3, [r2, #16]
 8003302:	4b08      	ldr	r3, [pc, #32]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003304:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800330e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003312:	4a04      	ldr	r2, [pc, #16]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003314:	430b      	orrs	r3, r1
 8003316:	6713      	str	r3, [r2, #112]	@ 0x70
 8003318:	e00e      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800331a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800331e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003322:	e009      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003324:	58024400 	.word	0x58024400
 8003328:	58024800 	.word	0x58024800
 800332c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003334:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003340:	f002 0301 	and.w	r3, r2, #1
 8003344:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003348:	2300      	movs	r3, #0
 800334a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800334e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003352:	460b      	mov	r3, r1
 8003354:	4313      	orrs	r3, r2
 8003356:	f000 8089 	beq.w	800346c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800335a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800335e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003360:	2b28      	cmp	r3, #40	@ 0x28
 8003362:	d86b      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003364:	a201      	add	r2, pc, #4	@ (adr r2, 800336c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336a:	bf00      	nop
 800336c:	08003445 	.word	0x08003445
 8003370:	0800343d 	.word	0x0800343d
 8003374:	0800343d 	.word	0x0800343d
 8003378:	0800343d 	.word	0x0800343d
 800337c:	0800343d 	.word	0x0800343d
 8003380:	0800343d 	.word	0x0800343d
 8003384:	0800343d 	.word	0x0800343d
 8003388:	0800343d 	.word	0x0800343d
 800338c:	08003411 	.word	0x08003411
 8003390:	0800343d 	.word	0x0800343d
 8003394:	0800343d 	.word	0x0800343d
 8003398:	0800343d 	.word	0x0800343d
 800339c:	0800343d 	.word	0x0800343d
 80033a0:	0800343d 	.word	0x0800343d
 80033a4:	0800343d 	.word	0x0800343d
 80033a8:	0800343d 	.word	0x0800343d
 80033ac:	08003427 	.word	0x08003427
 80033b0:	0800343d 	.word	0x0800343d
 80033b4:	0800343d 	.word	0x0800343d
 80033b8:	0800343d 	.word	0x0800343d
 80033bc:	0800343d 	.word	0x0800343d
 80033c0:	0800343d 	.word	0x0800343d
 80033c4:	0800343d 	.word	0x0800343d
 80033c8:	0800343d 	.word	0x0800343d
 80033cc:	08003445 	.word	0x08003445
 80033d0:	0800343d 	.word	0x0800343d
 80033d4:	0800343d 	.word	0x0800343d
 80033d8:	0800343d 	.word	0x0800343d
 80033dc:	0800343d 	.word	0x0800343d
 80033e0:	0800343d 	.word	0x0800343d
 80033e4:	0800343d 	.word	0x0800343d
 80033e8:	0800343d 	.word	0x0800343d
 80033ec:	08003445 	.word	0x08003445
 80033f0:	0800343d 	.word	0x0800343d
 80033f4:	0800343d 	.word	0x0800343d
 80033f8:	0800343d 	.word	0x0800343d
 80033fc:	0800343d 	.word	0x0800343d
 8003400:	0800343d 	.word	0x0800343d
 8003404:	0800343d 	.word	0x0800343d
 8003408:	0800343d 	.word	0x0800343d
 800340c:	08003445 	.word	0x08003445
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003414:	3308      	adds	r3, #8
 8003416:	2101      	movs	r1, #1
 8003418:	4618      	mov	r0, r3
 800341a:	f000 ffc3 	bl	80043a4 <RCCEx_PLL2_Config>
 800341e:	4603      	mov	r3, r0
 8003420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003424:	e00f      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800342a:	3328      	adds	r3, #40	@ 0x28
 800342c:	2101      	movs	r1, #1
 800342e:	4618      	mov	r0, r3
 8003430:	f001 f86a 	bl	8004508 <RCCEx_PLL3_Config>
 8003434:	4603      	mov	r3, r0
 8003436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800343a:	e004      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003442:	e000      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10a      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800344e:	4bbf      	ldr	r3, [pc, #764]	@ (800374c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003452:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800345a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800345c:	4abb      	ldr	r2, [pc, #748]	@ (800374c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800345e:	430b      	orrs	r3, r1
 8003460:	6553      	str	r3, [r2, #84]	@ 0x54
 8003462:	e003      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003464:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003468:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800346c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f002 0302 	and.w	r3, r2, #2
 8003478:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800347c:	2300      	movs	r3, #0
 800347e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003482:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003486:	460b      	mov	r3, r1
 8003488:	4313      	orrs	r3, r2
 800348a:	d041      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800348c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003490:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003492:	2b05      	cmp	r3, #5
 8003494:	d824      	bhi.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003496:	a201      	add	r2, pc, #4	@ (adr r2, 800349c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349c:	080034e9 	.word	0x080034e9
 80034a0:	080034b5 	.word	0x080034b5
 80034a4:	080034cb 	.word	0x080034cb
 80034a8:	080034e9 	.word	0x080034e9
 80034ac:	080034e9 	.word	0x080034e9
 80034b0:	080034e9 	.word	0x080034e9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b8:	3308      	adds	r3, #8
 80034ba:	2101      	movs	r1, #1
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 ff71 	bl	80043a4 <RCCEx_PLL2_Config>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80034c8:	e00f      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ce:	3328      	adds	r3, #40	@ 0x28
 80034d0:	2101      	movs	r1, #1
 80034d2:	4618      	mov	r0, r3
 80034d4:	f001 f818 	bl	8004508 <RCCEx_PLL3_Config>
 80034d8:	4603      	mov	r3, r0
 80034da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80034de:	e004      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034e6:	e000      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80034e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10a      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80034f2:	4b96      	ldr	r3, [pc, #600]	@ (800374c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f6:	f023 0107 	bic.w	r1, r3, #7
 80034fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003500:	4a92      	ldr	r2, [pc, #584]	@ (800374c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003502:	430b      	orrs	r3, r1
 8003504:	6553      	str	r3, [r2, #84]	@ 0x54
 8003506:	e003      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003508:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800350c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003518:	f002 0304 	and.w	r3, r2, #4
 800351c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003520:	2300      	movs	r3, #0
 8003522:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003526:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800352a:	460b      	mov	r3, r1
 800352c:	4313      	orrs	r3, r2
 800352e:	d044      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003534:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003538:	2b05      	cmp	r3, #5
 800353a:	d825      	bhi.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800353c:	a201      	add	r2, pc, #4	@ (adr r2, 8003544 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800353e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003542:	bf00      	nop
 8003544:	08003591 	.word	0x08003591
 8003548:	0800355d 	.word	0x0800355d
 800354c:	08003573 	.word	0x08003573
 8003550:	08003591 	.word	0x08003591
 8003554:	08003591 	.word	0x08003591
 8003558:	08003591 	.word	0x08003591
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800355c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003560:	3308      	adds	r3, #8
 8003562:	2101      	movs	r1, #1
 8003564:	4618      	mov	r0, r3
 8003566:	f000 ff1d 	bl	80043a4 <RCCEx_PLL2_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003570:	e00f      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003576:	3328      	adds	r3, #40	@ 0x28
 8003578:	2101      	movs	r1, #1
 800357a:	4618      	mov	r0, r3
 800357c:	f000 ffc4 	bl	8004508 <RCCEx_PLL3_Config>
 8003580:	4603      	mov	r3, r0
 8003582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003586:	e004      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800358e:	e000      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003592:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10b      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800359a:	4b6c      	ldr	r3, [pc, #432]	@ (800374c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800359c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359e:	f023 0107 	bic.w	r1, r3, #7
 80035a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035aa:	4a68      	ldr	r2, [pc, #416]	@ (800374c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035ac:	430b      	orrs	r3, r1
 80035ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80035b0:	e003      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c2:	f002 0320 	and.w	r3, r2, #32
 80035c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80035ca:	2300      	movs	r3, #0
 80035cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80035d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80035d4:	460b      	mov	r3, r1
 80035d6:	4313      	orrs	r3, r2
 80035d8:	d055      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80035da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035e6:	d033      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80035e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035ec:	d82c      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80035ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f2:	d02f      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80035f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f8:	d826      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80035fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80035fe:	d02b      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003600:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003604:	d820      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800360a:	d012      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800360c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003610:	d81a      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d022      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003616:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800361a:	d115      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800361c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003620:	3308      	adds	r3, #8
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f000 febd 	bl	80043a4 <RCCEx_PLL2_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003630:	e015      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003636:	3328      	adds	r3, #40	@ 0x28
 8003638:	2102      	movs	r1, #2
 800363a:	4618      	mov	r0, r3
 800363c:	f000 ff64 	bl	8004508 <RCCEx_PLL3_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003646:	e00a      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800364e:	e006      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003650:	bf00      	nop
 8003652:	e004      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003654:	bf00      	nop
 8003656:	e002      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003658:	bf00      	nop
 800365a:	e000      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800365c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800365e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10b      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003666:	4b39      	ldr	r3, [pc, #228]	@ (800374c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800366a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800366e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003676:	4a35      	ldr	r2, [pc, #212]	@ (800374c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003678:	430b      	orrs	r3, r1
 800367a:	6553      	str	r3, [r2, #84]	@ 0x54
 800367c:	e003      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003682:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003692:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003696:	2300      	movs	r3, #0
 8003698:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800369c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4313      	orrs	r3, r2
 80036a4:	d058      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80036a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036ae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80036b2:	d033      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80036b4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80036b8:	d82c      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80036ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036be:	d02f      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80036c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036c4:	d826      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80036c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036ca:	d02b      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80036cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036d0:	d820      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80036d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036d6:	d012      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80036d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036dc:	d81a      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d022      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80036e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036e6:	d115      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ec:	3308      	adds	r3, #8
 80036ee:	2100      	movs	r1, #0
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 fe57 	bl	80043a4 <RCCEx_PLL2_Config>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80036fc:	e015      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003702:	3328      	adds	r3, #40	@ 0x28
 8003704:	2102      	movs	r1, #2
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fefe 	bl	8004508 <RCCEx_PLL3_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003712:	e00a      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800371a:	e006      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800371c:	bf00      	nop
 800371e:	e004      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003720:	bf00      	nop
 8003722:	e002      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003724:	bf00      	nop
 8003726:	e000      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800372a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10e      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003732:	4b06      	ldr	r3, [pc, #24]	@ (800374c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003736:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003742:	4a02      	ldr	r2, [pc, #8]	@ (800374c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003744:	430b      	orrs	r3, r1
 8003746:	6593      	str	r3, [r2, #88]	@ 0x58
 8003748:	e006      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800374a:	bf00      	nop
 800374c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003750:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003754:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003760:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003764:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003768:	2300      	movs	r3, #0
 800376a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800376e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003772:	460b      	mov	r3, r1
 8003774:	4313      	orrs	r3, r2
 8003776:	d055      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003780:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003784:	d033      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003786:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800378a:	d82c      	bhi.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800378c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003790:	d02f      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003792:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003796:	d826      	bhi.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003798:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800379c:	d02b      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800379e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80037a2:	d820      	bhi.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80037a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037a8:	d012      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80037aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037ae:	d81a      	bhi.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d022      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80037b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037b8:	d115      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037be:	3308      	adds	r3, #8
 80037c0:	2100      	movs	r1, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fdee 	bl	80043a4 <RCCEx_PLL2_Config>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80037ce:	e015      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d4:	3328      	adds	r3, #40	@ 0x28
 80037d6:	2102      	movs	r1, #2
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fe95 	bl	8004508 <RCCEx_PLL3_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80037e4:	e00a      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037ec:	e006      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80037ee:	bf00      	nop
 80037f0:	e004      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80037f2:	bf00      	nop
 80037f4:	e002      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80037f6:	bf00      	nop
 80037f8:	e000      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80037fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10b      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003804:	4ba1      	ldr	r3, [pc, #644]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003808:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800380c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003810:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003814:	4a9d      	ldr	r2, [pc, #628]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003816:	430b      	orrs	r3, r1
 8003818:	6593      	str	r3, [r2, #88]	@ 0x58
 800381a:	e003      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003820:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f002 0308 	and.w	r3, r2, #8
 8003830:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003834:	2300      	movs	r3, #0
 8003836:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800383a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800383e:	460b      	mov	r3, r1
 8003840:	4313      	orrs	r3, r2
 8003842:	d01e      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003848:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800384c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003850:	d10c      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003856:	3328      	adds	r3, #40	@ 0x28
 8003858:	2102      	movs	r1, #2
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fe54 	bl	8004508 <RCCEx_PLL3_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800386c:	4b87      	ldr	r3, [pc, #540]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800386e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003870:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003878:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800387c:	4a83      	ldr	r2, [pc, #524]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800387e:	430b      	orrs	r3, r1
 8003880:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	f002 0310 	and.w	r3, r2, #16
 800388e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003892:	2300      	movs	r3, #0
 8003894:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003898:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800389c:	460b      	mov	r3, r1
 800389e:	4313      	orrs	r3, r2
 80038a0:	d01e      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80038a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038ae:	d10c      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80038b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b4:	3328      	adds	r3, #40	@ 0x28
 80038b6:	2102      	movs	r1, #2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fe25 	bl	8004508 <RCCEx_PLL3_Config>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038ca:	4b70      	ldr	r3, [pc, #448]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80038d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038da:	4a6c      	ldr	r2, [pc, #432]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038dc:	430b      	orrs	r3, r1
 80038de:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80038ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80038fa:	460b      	mov	r3, r1
 80038fc:	4313      	orrs	r3, r2
 80038fe:	d03e      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003904:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800390c:	d022      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800390e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003912:	d81b      	bhi.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800391c:	d00b      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800391e:	e015      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003924:	3308      	adds	r3, #8
 8003926:	2100      	movs	r1, #0
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fd3b 	bl	80043a4 <RCCEx_PLL2_Config>
 800392e:	4603      	mov	r3, r0
 8003930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003934:	e00f      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393a:	3328      	adds	r3, #40	@ 0x28
 800393c:	2102      	movs	r1, #2
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fde2 	bl	8004508 <RCCEx_PLL3_Config>
 8003944:	4603      	mov	r3, r0
 8003946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800394a:	e004      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003952:	e000      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10b      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800395e:	4b4b      	ldr	r3, [pc, #300]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003962:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800396e:	4a47      	ldr	r2, [pc, #284]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003970:	430b      	orrs	r3, r1
 8003972:	6593      	str	r3, [r2, #88]	@ 0x58
 8003974:	e003      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800397a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003986:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800398a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800398c:	2300      	movs	r3, #0
 800398e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003990:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003994:	460b      	mov	r3, r1
 8003996:	4313      	orrs	r3, r2
 8003998:	d03b      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800399a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80039a6:	d01f      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80039a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80039ac:	d818      	bhi.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80039ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039b2:	d003      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80039b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039b8:	d007      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80039ba:	e011      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039bc:	4b33      	ldr	r3, [pc, #204]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c0:	4a32      	ldr	r2, [pc, #200]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80039c8:	e00f      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ce:	3328      	adds	r3, #40	@ 0x28
 80039d0:	2101      	movs	r1, #1
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fd98 	bl	8004508 <RCCEx_PLL3_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80039de:	e004      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039e6:	e000      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80039e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10b      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039f2:	4b26      	ldr	r3, [pc, #152]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80039fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a02:	4a22      	ldr	r2, [pc, #136]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a04:	430b      	orrs	r3, r1
 8003a06:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a08:	e003      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003a1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a20:	2300      	movs	r3, #0
 8003a22:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a24:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	d034      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a3c:	d007      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003a3e:	e011      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a40:	4b12      	ldr	r3, [pc, #72]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a44:	4a11      	ldr	r2, [pc, #68]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003a4c:	e00e      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a52:	3308      	adds	r3, #8
 8003a54:	2102      	movs	r1, #2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fca4 	bl	80043a4 <RCCEx_PLL2_Config>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003a62:	e003      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10d      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003a74:	4b05      	ldr	r3, [pc, #20]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a78:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a82:	4a02      	ldr	r2, [pc, #8]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a84:	430b      	orrs	r3, r1
 8003a86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a88:	e006      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003a8a:	bf00      	nop
 8003a8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003aa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003aaa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	d00c      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab8:	3328      	adds	r3, #40	@ 0x28
 8003aba:	2102      	movs	r1, #2
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 fd23 	bl	8004508 <RCCEx_PLL3_Config>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003ada:	663b      	str	r3, [r7, #96]	@ 0x60
 8003adc:	2300      	movs	r3, #0
 8003ade:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ae0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	d038      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003af2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003af6:	d018      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003af8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003afc:	d811      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003afe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b02:	d014      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b08:	d80b      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d011      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b12:	d106      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b14:	4bc3      	ldr	r3, [pc, #780]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b18:	4ac2      	ldr	r2, [pc, #776]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003b20:	e008      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b28:	e004      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003b2a:	bf00      	nop
 8003b2c:	e002      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003b2e:	bf00      	nop
 8003b30:	e000      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10b      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b3c:	4bb9      	ldr	r3, [pc, #740]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b40:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b4c:	4ab5      	ldr	r2, [pc, #724]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b4e:	430b      	orrs	r3, r1
 8003b50:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b52:	e003      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b64:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003b68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b6e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003b72:	460b      	mov	r3, r1
 8003b74:	4313      	orrs	r3, r2
 8003b76:	d009      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b78:	4baa      	ldr	r3, [pc, #680]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b7c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b86:	4aa7      	ldr	r2, [pc, #668]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b94:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003b98:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b9e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	d00a      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003ba8:	4b9e      	ldr	r3, [pc, #632]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003bb8:	4a9a      	ldr	r2, [pc, #616]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003bca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bcc:	2300      	movs	r3, #0
 8003bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	d009      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bda:	4b92      	ldr	r3, [pc, #584]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bde:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003be8:	4a8e      	ldr	r2, [pc, #568]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bea:	430b      	orrs	r3, r1
 8003bec:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003bfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c00:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003c04:	460b      	mov	r3, r1
 8003c06:	4313      	orrs	r3, r2
 8003c08:	d00e      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c0a:	4b86      	ldr	r3, [pc, #536]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	4a85      	ldr	r2, [pc, #532]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c10:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003c14:	6113      	str	r3, [r2, #16]
 8003c16:	4b83      	ldr	r3, [pc, #524]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c18:	6919      	ldr	r1, [r3, #16]
 8003c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003c22:	4a80      	ldr	r2, [pc, #512]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c30:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003c34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c36:	2300      	movs	r3, #0
 8003c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c3a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4313      	orrs	r3, r2
 8003c42:	d009      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003c44:	4b77      	ldr	r3, [pc, #476]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c48:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c52:	4a74      	ldr	r2, [pc, #464]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c54:	430b      	orrs	r3, r1
 8003c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c60:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003c64:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c66:	2300      	movs	r3, #0
 8003c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c6a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4313      	orrs	r3, r2
 8003c72:	d00a      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c74:	4b6b      	ldr	r3, [pc, #428]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c78:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c84:	4a67      	ldr	r2, [pc, #412]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c86:	430b      	orrs	r3, r1
 8003c88:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	2100      	movs	r1, #0
 8003c94:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c9c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	d011      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003caa:	3308      	adds	r3, #8
 8003cac:	2100      	movs	r1, #0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fb78 	bl	80043a4 <RCCEx_PLL2_Config>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	6239      	str	r1, [r7, #32]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cdc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	d011      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cea:	3308      	adds	r3, #8
 8003cec:	2101      	movs	r1, #1
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fb58 	bl	80043a4 <RCCEx_PLL2_Config>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d12:	2100      	movs	r1, #0
 8003d14:	61b9      	str	r1, [r7, #24]
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	61fb      	str	r3, [r7, #28]
 8003d1c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003d20:	460b      	mov	r3, r1
 8003d22:	4313      	orrs	r3, r2
 8003d24:	d011      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2a:	3308      	adds	r3, #8
 8003d2c:	2102      	movs	r1, #2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fb38 	bl	80043a4 <RCCEx_PLL2_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	2100      	movs	r1, #0
 8003d54:	6139      	str	r1, [r7, #16]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003d60:	460b      	mov	r3, r1
 8003d62:	4313      	orrs	r3, r2
 8003d64:	d011      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6a:	3328      	adds	r3, #40	@ 0x28
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fbca 	bl	8004508 <RCCEx_PLL3_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d92:	2100      	movs	r1, #0
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	f003 0310 	and.w	r3, r3, #16
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003da0:	460b      	mov	r3, r1
 8003da2:	4313      	orrs	r3, r2
 8003da4:	d011      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003daa:	3328      	adds	r3, #40	@ 0x28
 8003dac:	2101      	movs	r1, #1
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fbaa 	bl	8004508 <RCCEx_PLL3_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	6039      	str	r1, [r7, #0]
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	607b      	str	r3, [r7, #4]
 8003ddc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003de0:	460b      	mov	r3, r1
 8003de2:	4313      	orrs	r3, r2
 8003de4:	d011      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dea:	3328      	adds	r3, #40	@ 0x28
 8003dec:	2102      	movs	r1, #2
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fb8a 	bl	8004508 <RCCEx_PLL3_Config>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003e0a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	e000      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e24:	58024400 	.word	0x58024400

08003e28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003e2c:	f7fe fd54 	bl	80028d8 <HAL_RCC_GetHCLKFreq>
 8003e30:	4602      	mov	r2, r0
 8003e32:	4b06      	ldr	r3, [pc, #24]	@ (8003e4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	091b      	lsrs	r3, r3, #4
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	4904      	ldr	r1, [pc, #16]	@ (8003e50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003e3e:	5ccb      	ldrb	r3, [r1, r3]
 8003e40:	f003 031f 	and.w	r3, r3, #31
 8003e44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	58024400 	.word	0x58024400
 8003e50:	08008488 	.word	0x08008488

08003e54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b089      	sub	sp, #36	@ 0x24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e5c:	4ba1      	ldr	r3, [pc, #644]	@ (80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003e66:	4b9f      	ldr	r3, [pc, #636]	@ (80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e6a:	0b1b      	lsrs	r3, r3, #12
 8003e6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003e72:	4b9c      	ldr	r3, [pc, #624]	@ (80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e76:	091b      	lsrs	r3, r3, #4
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003e7e:	4b99      	ldr	r3, [pc, #612]	@ (80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e82:	08db      	lsrs	r3, r3, #3
 8003e84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 8111 	beq.w	80040c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	f000 8083 	beq.w	8003fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	f200 80a1 	bhi.w	8003ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d056      	beq.n	8003f6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003ebe:	e099      	b.n	8003ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ec0:	4b88      	ldr	r3, [pc, #544]	@ (80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d02d      	beq.n	8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ecc:	4b85      	ldr	r3, [pc, #532]	@ (80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	08db      	lsrs	r3, r3, #3
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	4a84      	ldr	r2, [pc, #528]	@ (80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8003edc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	ee07 3a90 	vmov	s15, r3
 8003ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ef6:	4b7b      	ldr	r3, [pc, #492]	@ (80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80040ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003f26:	e087      	b.n	8004038 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f3a:	4b6a      	ldr	r3, [pc, #424]	@ (80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f42:	ee07 3a90 	vmov	s15, r3
 8003f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80040ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f6a:	e065      	b.n	8004038 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80040f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f7e:	4b59      	ldr	r3, [pc, #356]	@ (80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f86:	ee07 3a90 	vmov	s15, r3
 8003f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80040ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003faa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fae:	e043      	b.n	8004038 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80040f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fc2:	4b48      	ldr	r3, [pc, #288]	@ (80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fca:	ee07 3a90 	vmov	s15, r3
 8003fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fd6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80040ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ff2:	e021      	b.n	8004038 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ffe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80040f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004006:	4b37      	ldr	r3, [pc, #220]	@ (80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800400a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800400e:	ee07 3a90 	vmov	s15, r3
 8004012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004016:	ed97 6a03 	vldr	s12, [r7, #12]
 800401a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80040ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800401e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800402a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800402e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004032:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004036:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004038:	4b2a      	ldr	r3, [pc, #168]	@ (80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800403a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403c:	0a5b      	lsrs	r3, r3, #9
 800403e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004042:	ee07 3a90 	vmov	s15, r3
 8004046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800404a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800404e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004052:	edd7 6a07 	vldr	s13, [r7, #28]
 8004056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800405a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800405e:	ee17 2a90 	vmov	r2, s15
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004066:	4b1f      	ldr	r3, [pc, #124]	@ (80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406a:	0c1b      	lsrs	r3, r3, #16
 800406c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004070:	ee07 3a90 	vmov	s15, r3
 8004074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004078:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800407c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004080:	edd7 6a07 	vldr	s13, [r7, #28]
 8004084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800408c:	ee17 2a90 	vmov	r2, s15
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004094:	4b13      	ldr	r3, [pc, #76]	@ (80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004098:	0e1b      	lsrs	r3, r3, #24
 800409a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800409e:	ee07 3a90 	vmov	s15, r3
 80040a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80040b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040ba:	ee17 2a90 	vmov	r2, s15
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80040c2:	e008      	b.n	80040d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	609a      	str	r2, [r3, #8]
}
 80040d6:	bf00      	nop
 80040d8:	3724      	adds	r7, #36	@ 0x24
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	58024400 	.word	0x58024400
 80040e8:	03d09000 	.word	0x03d09000
 80040ec:	46000000 	.word	0x46000000
 80040f0:	4c742400 	.word	0x4c742400
 80040f4:	4a742400 	.word	0x4a742400
 80040f8:	4bbebc20 	.word	0x4bbebc20

080040fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b089      	sub	sp, #36	@ 0x24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004104:	4ba1      	ldr	r3, [pc, #644]	@ (800438c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004108:	f003 0303 	and.w	r3, r3, #3
 800410c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800410e:	4b9f      	ldr	r3, [pc, #636]	@ (800438c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004112:	0d1b      	lsrs	r3, r3, #20
 8004114:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004118:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800411a:	4b9c      	ldr	r3, [pc, #624]	@ (800438c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800411c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411e:	0a1b      	lsrs	r3, r3, #8
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004126:	4b99      	ldr	r3, [pc, #612]	@ (800438c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412a:	08db      	lsrs	r3, r3, #3
 800412c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	fb02 f303 	mul.w	r3, r2, r3
 8004136:	ee07 3a90 	vmov	s15, r3
 800413a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800413e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8111 	beq.w	800436c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	2b02      	cmp	r3, #2
 800414e:	f000 8083 	beq.w	8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	2b02      	cmp	r3, #2
 8004156:	f200 80a1 	bhi.w	800429c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d056      	beq.n	8004214 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004166:	e099      	b.n	800429c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004168:	4b88      	ldr	r3, [pc, #544]	@ (800438c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0320 	and.w	r3, r3, #32
 8004170:	2b00      	cmp	r3, #0
 8004172:	d02d      	beq.n	80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004174:	4b85      	ldr	r3, [pc, #532]	@ (800438c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	08db      	lsrs	r3, r3, #3
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	4a84      	ldr	r2, [pc, #528]	@ (8004390 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
 8004184:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	ee07 3a90 	vmov	s15, r3
 800418c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	ee07 3a90 	vmov	s15, r3
 8004196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800419e:	4b7b      	ldr	r3, [pc, #492]	@ (800438c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a6:	ee07 3a90 	vmov	s15, r3
 80041aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80041b2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80041ce:	e087      	b.n	80042e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	ee07 3a90 	vmov	s15, r3
 80041d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041da:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004398 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80041de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041e2:	4b6a      	ldr	r3, [pc, #424]	@ (800438c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ea:	ee07 3a90 	vmov	s15, r3
 80041ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80041f6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800420a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800420e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004212:	e065      	b.n	80042e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	ee07 3a90 	vmov	s15, r3
 800421a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800421e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800439c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004226:	4b59      	ldr	r3, [pc, #356]	@ (800438c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800422e:	ee07 3a90 	vmov	s15, r3
 8004232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004236:	ed97 6a03 	vldr	s12, [r7, #12]
 800423a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800423e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800424a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800424e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004252:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004256:	e043      	b.n	80042e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	ee07 3a90 	vmov	s15, r3
 800425e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004262:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80043a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800426a:	4b48      	ldr	r3, [pc, #288]	@ (800438c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800426c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004272:	ee07 3a90 	vmov	s15, r3
 8004276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800427a:	ed97 6a03 	vldr	s12, [r7, #12]
 800427e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800428a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800428e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800429a:	e021      	b.n	80042e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	ee07 3a90 	vmov	s15, r3
 80042a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800439c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80042aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ae:	4b37      	ldr	r3, [pc, #220]	@ (800438c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b6:	ee07 3a90 	vmov	s15, r3
 80042ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042be:	ed97 6a03 	vldr	s12, [r7, #12]
 80042c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80042e0:	4b2a      	ldr	r3, [pc, #168]	@ (800438c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e4:	0a5b      	lsrs	r3, r3, #9
 80042e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80042fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004306:	ee17 2a90 	vmov	r2, s15
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800430e:	4b1f      	ldr	r3, [pc, #124]	@ (800438c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	0c1b      	lsrs	r3, r3, #16
 8004314:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004318:	ee07 3a90 	vmov	s15, r3
 800431c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004320:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004324:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004328:	edd7 6a07 	vldr	s13, [r7, #28]
 800432c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004334:	ee17 2a90 	vmov	r2, s15
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800433c:	4b13      	ldr	r3, [pc, #76]	@ (800438c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800433e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004340:	0e1b      	lsrs	r3, r3, #24
 8004342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004346:	ee07 3a90 	vmov	s15, r3
 800434a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800434e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004352:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004356:	edd7 6a07 	vldr	s13, [r7, #28]
 800435a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800435e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004362:	ee17 2a90 	vmov	r2, s15
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800436a:	e008      	b.n	800437e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	609a      	str	r2, [r3, #8]
}
 800437e:	bf00      	nop
 8004380:	3724      	adds	r7, #36	@ 0x24
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	58024400 	.word	0x58024400
 8004390:	03d09000 	.word	0x03d09000
 8004394:	46000000 	.word	0x46000000
 8004398:	4c742400 	.word	0x4c742400
 800439c:	4a742400 	.word	0x4a742400
 80043a0:	4bbebc20 	.word	0x4bbebc20

080043a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043b2:	4b53      	ldr	r3, [pc, #332]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80043b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d101      	bne.n	80043c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e099      	b.n	80044f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80043c2:	4b4f      	ldr	r3, [pc, #316]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a4e      	ldr	r2, [pc, #312]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80043c8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ce:	f7fc ff1d 	bl	800120c <HAL_GetTick>
 80043d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80043d4:	e008      	b.n	80043e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80043d6:	f7fc ff19 	bl	800120c <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e086      	b.n	80044f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80043e8:	4b45      	ldr	r3, [pc, #276]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1f0      	bne.n	80043d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80043f4:	4b42      	ldr	r3, [pc, #264]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80043f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	031b      	lsls	r3, r3, #12
 8004402:	493f      	ldr	r1, [pc, #252]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004404:	4313      	orrs	r3, r2
 8004406:	628b      	str	r3, [r1, #40]	@ 0x28
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	3b01      	subs	r3, #1
 800440e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	3b01      	subs	r3, #1
 8004418:	025b      	lsls	r3, r3, #9
 800441a:	b29b      	uxth	r3, r3
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	3b01      	subs	r3, #1
 8004424:	041b      	lsls	r3, r3, #16
 8004426:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	3b01      	subs	r3, #1
 8004432:	061b      	lsls	r3, r3, #24
 8004434:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004438:	4931      	ldr	r1, [pc, #196]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 800443a:	4313      	orrs	r3, r2
 800443c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800443e:	4b30      	ldr	r3, [pc, #192]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004442:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	492d      	ldr	r1, [pc, #180]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 800444c:	4313      	orrs	r3, r2
 800444e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004450:	4b2b      	ldr	r3, [pc, #172]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004454:	f023 0220 	bic.w	r2, r3, #32
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	4928      	ldr	r1, [pc, #160]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 800445e:	4313      	orrs	r3, r2
 8004460:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004462:	4b27      	ldr	r3, [pc, #156]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004466:	4a26      	ldr	r2, [pc, #152]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004468:	f023 0310 	bic.w	r3, r3, #16
 800446c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800446e:	4b24      	ldr	r3, [pc, #144]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004470:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004472:	4b24      	ldr	r3, [pc, #144]	@ (8004504 <RCCEx_PLL2_Config+0x160>)
 8004474:	4013      	ands	r3, r2
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	69d2      	ldr	r2, [r2, #28]
 800447a:	00d2      	lsls	r2, r2, #3
 800447c:	4920      	ldr	r1, [pc, #128]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 800447e:	4313      	orrs	r3, r2
 8004480:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004482:	4b1f      	ldr	r3, [pc, #124]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004486:	4a1e      	ldr	r2, [pc, #120]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004488:	f043 0310 	orr.w	r3, r3, #16
 800448c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d106      	bne.n	80044a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004494:	4b1a      	ldr	r3, [pc, #104]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004498:	4a19      	ldr	r2, [pc, #100]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 800449a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800449e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80044a0:	e00f      	b.n	80044c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d106      	bne.n	80044b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80044a8:	4b15      	ldr	r3, [pc, #84]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80044aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ac:	4a14      	ldr	r2, [pc, #80]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80044ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80044b4:	e005      	b.n	80044c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80044b6:	4b12      	ldr	r3, [pc, #72]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80044b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ba:	4a11      	ldr	r2, [pc, #68]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80044bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80044c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80044c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a0e      	ldr	r2, [pc, #56]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80044c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ce:	f7fc fe9d 	bl	800120c <HAL_GetTick>
 80044d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044d4:	e008      	b.n	80044e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044d6:	f7fc fe99 	bl	800120c <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e006      	b.n	80044f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044e8:	4b05      	ldr	r3, [pc, #20]	@ (8004500 <RCCEx_PLL2_Config+0x15c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f0      	beq.n	80044d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	58024400 	.word	0x58024400
 8004504:	ffff0007 	.word	0xffff0007

08004508 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004516:	4b53      	ldr	r3, [pc, #332]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 8004518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b03      	cmp	r3, #3
 8004520:	d101      	bne.n	8004526 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e099      	b.n	800465a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004526:	4b4f      	ldr	r3, [pc, #316]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a4e      	ldr	r2, [pc, #312]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 800452c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004532:	f7fc fe6b 	bl	800120c <HAL_GetTick>
 8004536:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004538:	e008      	b.n	800454c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800453a:	f7fc fe67 	bl	800120c <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e086      	b.n	800465a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800454c:	4b45      	ldr	r3, [pc, #276]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1f0      	bne.n	800453a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004558:	4b42      	ldr	r3, [pc, #264]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 800455a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	051b      	lsls	r3, r3, #20
 8004566:	493f      	ldr	r1, [pc, #252]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 8004568:	4313      	orrs	r3, r2
 800456a:	628b      	str	r3, [r1, #40]	@ 0x28
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	3b01      	subs	r3, #1
 8004572:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	3b01      	subs	r3, #1
 800457c:	025b      	lsls	r3, r3, #9
 800457e:	b29b      	uxth	r3, r3
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	3b01      	subs	r3, #1
 8004588:	041b      	lsls	r3, r3, #16
 800458a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	3b01      	subs	r3, #1
 8004596:	061b      	lsls	r3, r3, #24
 8004598:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800459c:	4931      	ldr	r1, [pc, #196]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80045a2:	4b30      	ldr	r3, [pc, #192]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	492d      	ldr	r1, [pc, #180]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80045b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	4928      	ldr	r1, [pc, #160]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80045c6:	4b27      	ldr	r3, [pc, #156]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ca:	4a26      	ldr	r2, [pc, #152]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80045d2:	4b24      	ldr	r3, [pc, #144]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045d6:	4b24      	ldr	r3, [pc, #144]	@ (8004668 <RCCEx_PLL3_Config+0x160>)
 80045d8:	4013      	ands	r3, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	69d2      	ldr	r2, [r2, #28]
 80045de:	00d2      	lsls	r2, r2, #3
 80045e0:	4920      	ldr	r1, [pc, #128]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80045e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d106      	bne.n	8004606 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80045f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fc:	4a19      	ldr	r2, [pc, #100]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004602:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004604:	e00f      	b.n	8004626 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d106      	bne.n	800461a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800460c:	4b15      	ldr	r3, [pc, #84]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 800460e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004610:	4a14      	ldr	r2, [pc, #80]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 8004612:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004616:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004618:	e005      	b.n	8004626 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800461a:	4b12      	ldr	r3, [pc, #72]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 800461c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461e:	4a11      	ldr	r2, [pc, #68]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 8004620:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004624:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004626:	4b0f      	ldr	r3, [pc, #60]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a0e      	ldr	r2, [pc, #56]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 800462c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004632:	f7fc fdeb 	bl	800120c <HAL_GetTick>
 8004636:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004638:	e008      	b.n	800464c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800463a:	f7fc fde7 	bl	800120c <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e006      	b.n	800465a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800464c:	4b05      	ldr	r3, [pc, #20]	@ (8004664 <RCCEx_PLL3_Config+0x15c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0f0      	beq.n	800463a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004658:	7bfb      	ldrb	r3, [r7, #15]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	58024400 	.word	0x58024400
 8004668:	ffff0007 	.word	0xffff0007

0800466c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e049      	b.n	8004712 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f841 	bl	800471a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3304      	adds	r3, #4
 80046a8:	4619      	mov	r1, r3
 80046aa:	4610      	mov	r0, r2
 80046ac:	f000 f9e8 	bl	8004a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
	...

08004730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d001      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e054      	b.n	80047f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a26      	ldr	r2, [pc, #152]	@ (8004800 <HAL_TIM_Base_Start_IT+0xd0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d022      	beq.n	80047b0 <HAL_TIM_Base_Start_IT+0x80>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004772:	d01d      	beq.n	80047b0 <HAL_TIM_Base_Start_IT+0x80>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a22      	ldr	r2, [pc, #136]	@ (8004804 <HAL_TIM_Base_Start_IT+0xd4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d018      	beq.n	80047b0 <HAL_TIM_Base_Start_IT+0x80>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a21      	ldr	r2, [pc, #132]	@ (8004808 <HAL_TIM_Base_Start_IT+0xd8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d013      	beq.n	80047b0 <HAL_TIM_Base_Start_IT+0x80>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1f      	ldr	r2, [pc, #124]	@ (800480c <HAL_TIM_Base_Start_IT+0xdc>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00e      	beq.n	80047b0 <HAL_TIM_Base_Start_IT+0x80>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a1e      	ldr	r2, [pc, #120]	@ (8004810 <HAL_TIM_Base_Start_IT+0xe0>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d009      	beq.n	80047b0 <HAL_TIM_Base_Start_IT+0x80>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004814 <HAL_TIM_Base_Start_IT+0xe4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d004      	beq.n	80047b0 <HAL_TIM_Base_Start_IT+0x80>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004818 <HAL_TIM_Base_Start_IT+0xe8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d115      	bne.n	80047dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	4b19      	ldr	r3, [pc, #100]	@ (800481c <HAL_TIM_Base_Start_IT+0xec>)
 80047b8:	4013      	ands	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2b06      	cmp	r3, #6
 80047c0:	d015      	beq.n	80047ee <HAL_TIM_Base_Start_IT+0xbe>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047c8:	d011      	beq.n	80047ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f042 0201 	orr.w	r2, r2, #1
 80047d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047da:	e008      	b.n	80047ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0201 	orr.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e000      	b.n	80047f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40010000 	.word	0x40010000
 8004804:	40000400 	.word	0x40000400
 8004808:	40000800 	.word	0x40000800
 800480c:	40000c00 	.word	0x40000c00
 8004810:	40010400 	.word	0x40010400
 8004814:	40001800 	.word	0x40001800
 8004818:	40014000 	.word	0x40014000
 800481c:	00010007 	.word	0x00010007

08004820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d020      	beq.n	8004884 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01b      	beq.n	8004884 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0202 	mvn.w	r2, #2
 8004854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f8e9 	bl	8004a42 <HAL_TIM_IC_CaptureCallback>
 8004870:	e005      	b.n	800487e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f8db 	bl	8004a2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f8ec 	bl	8004a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	d020      	beq.n	80048d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01b      	beq.n	80048d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0204 	mvn.w	r2, #4
 80048a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2202      	movs	r2, #2
 80048a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f8c3 	bl	8004a42 <HAL_TIM_IC_CaptureCallback>
 80048bc:	e005      	b.n	80048ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f8b5 	bl	8004a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f8c6 	bl	8004a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d020      	beq.n	800491c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01b      	beq.n	800491c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0208 	mvn.w	r2, #8
 80048ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2204      	movs	r2, #4
 80048f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f89d 	bl	8004a42 <HAL_TIM_IC_CaptureCallback>
 8004908:	e005      	b.n	8004916 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f88f 	bl	8004a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f8a0 	bl	8004a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 0310 	and.w	r3, r3, #16
 8004922:	2b00      	cmp	r3, #0
 8004924:	d020      	beq.n	8004968 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 0310 	and.w	r3, r3, #16
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01b      	beq.n	8004968 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0210 	mvn.w	r2, #16
 8004938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2208      	movs	r2, #8
 800493e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f877 	bl	8004a42 <HAL_TIM_IC_CaptureCallback>
 8004954:	e005      	b.n	8004962 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f869 	bl	8004a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f87a 	bl	8004a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00c      	beq.n	800498c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d007      	beq.n	800498c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0201 	mvn.w	r2, #1
 8004984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fc f920 	bl	8000bcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004992:	2b00      	cmp	r3, #0
 8004994:	d104      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00c      	beq.n	80049ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d007      	beq.n	80049ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80049b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f913 	bl	8004be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00c      	beq.n	80049de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d007      	beq.n	80049de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80049d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f90b 	bl	8004bf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00c      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d007      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f834 	bl	8004a6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00c      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f003 0320 	and.w	r3, r3, #32
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f06f 0220 	mvn.w	r2, #32
 8004a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f8d3 	bl	8004bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a26:	bf00      	nop
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
	...

08004a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a46      	ldr	r2, [pc, #280]	@ (8004bac <TIM_Base_SetConfig+0x12c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d013      	beq.n	8004ac0 <TIM_Base_SetConfig+0x40>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a9e:	d00f      	beq.n	8004ac0 <TIM_Base_SetConfig+0x40>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a43      	ldr	r2, [pc, #268]	@ (8004bb0 <TIM_Base_SetConfig+0x130>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d00b      	beq.n	8004ac0 <TIM_Base_SetConfig+0x40>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a42      	ldr	r2, [pc, #264]	@ (8004bb4 <TIM_Base_SetConfig+0x134>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d007      	beq.n	8004ac0 <TIM_Base_SetConfig+0x40>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a41      	ldr	r2, [pc, #260]	@ (8004bb8 <TIM_Base_SetConfig+0x138>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d003      	beq.n	8004ac0 <TIM_Base_SetConfig+0x40>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a40      	ldr	r2, [pc, #256]	@ (8004bbc <TIM_Base_SetConfig+0x13c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d108      	bne.n	8004ad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a35      	ldr	r2, [pc, #212]	@ (8004bac <TIM_Base_SetConfig+0x12c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d01f      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae0:	d01b      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a32      	ldr	r2, [pc, #200]	@ (8004bb0 <TIM_Base_SetConfig+0x130>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d017      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a31      	ldr	r2, [pc, #196]	@ (8004bb4 <TIM_Base_SetConfig+0x134>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d013      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a30      	ldr	r2, [pc, #192]	@ (8004bb8 <TIM_Base_SetConfig+0x138>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00f      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a2f      	ldr	r2, [pc, #188]	@ (8004bbc <TIM_Base_SetConfig+0x13c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d00b      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a2e      	ldr	r2, [pc, #184]	@ (8004bc0 <TIM_Base_SetConfig+0x140>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d007      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8004bc4 <TIM_Base_SetConfig+0x144>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d003      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a2c      	ldr	r2, [pc, #176]	@ (8004bc8 <TIM_Base_SetConfig+0x148>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d108      	bne.n	8004b2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a16      	ldr	r2, [pc, #88]	@ (8004bac <TIM_Base_SetConfig+0x12c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00f      	beq.n	8004b78 <TIM_Base_SetConfig+0xf8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a18      	ldr	r2, [pc, #96]	@ (8004bbc <TIM_Base_SetConfig+0x13c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00b      	beq.n	8004b78 <TIM_Base_SetConfig+0xf8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a17      	ldr	r2, [pc, #92]	@ (8004bc0 <TIM_Base_SetConfig+0x140>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d007      	beq.n	8004b78 <TIM_Base_SetConfig+0xf8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a16      	ldr	r2, [pc, #88]	@ (8004bc4 <TIM_Base_SetConfig+0x144>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <TIM_Base_SetConfig+0xf8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a15      	ldr	r2, [pc, #84]	@ (8004bc8 <TIM_Base_SetConfig+0x148>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d103      	bne.n	8004b80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d105      	bne.n	8004b9e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f023 0201 	bic.w	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	611a      	str	r2, [r3, #16]
  }
}
 8004b9e:	bf00      	nop
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40010000 	.word	0x40010000
 8004bb0:	40000400 	.word	0x40000400
 8004bb4:	40000800 	.word	0x40000800
 8004bb8:	40000c00 	.word	0x40000c00
 8004bbc:	40010400 	.word	0x40010400
 8004bc0:	40014000 	.word	0x40014000
 8004bc4:	40014400 	.word	0x40014400
 8004bc8:	40014800 	.word	0x40014800

08004bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e042      	b.n	8004ca0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7fc f803 	bl	8000c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2224      	movs	r2, #36	@ 0x24
 8004c36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0201 	bic.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fe1e 	bl	8005894 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f8b3 	bl	8004dc4 <UART_SetConfig>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d101      	bne.n	8004c68 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e01b      	b.n	8004ca0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0201 	orr.w	r2, r2, #1
 8004c96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fe9d 	bl	80059d8 <UART_CheckIdleState>
 8004c9e:	4603      	mov	r3, r0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	@ 0x28
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cbe:	2b20      	cmp	r3, #32
 8004cc0:	d17b      	bne.n	8004dba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d002      	beq.n	8004cce <HAL_UART_Transmit+0x26>
 8004cc8:	88fb      	ldrh	r3, [r7, #6]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e074      	b.n	8004dbc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2221      	movs	r2, #33	@ 0x21
 8004cde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ce2:	f7fc fa93 	bl	800120c <HAL_GetTick>
 8004ce6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	88fa      	ldrh	r2, [r7, #6]
 8004cec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	88fa      	ldrh	r2, [r7, #6]
 8004cf4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d00:	d108      	bne.n	8004d14 <HAL_UART_Transmit+0x6c>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d104      	bne.n	8004d14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	61bb      	str	r3, [r7, #24]
 8004d12:	e003      	b.n	8004d1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d1c:	e030      	b.n	8004d80 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2200      	movs	r2, #0
 8004d26:	2180      	movs	r1, #128	@ 0x80
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 feff 	bl	8005b2c <UART_WaitOnFlagUntilTimeout>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d005      	beq.n	8004d40 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2220      	movs	r2, #32
 8004d38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e03d      	b.n	8004dbc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10b      	bne.n	8004d5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d54:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	3302      	adds	r3, #2
 8004d5a:	61bb      	str	r3, [r7, #24]
 8004d5c:	e007      	b.n	8004d6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	781a      	ldrb	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1c8      	bne.n	8004d1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2200      	movs	r2, #0
 8004d94:	2140      	movs	r1, #64	@ 0x40
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 fec8 	bl	8005b2c <UART_WaitOnFlagUntilTimeout>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e006      	b.n	8004dbc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	e000      	b.n	8004dbc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004dba:	2302      	movs	r3, #2
  }
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3720      	adds	r7, #32
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc8:	b092      	sub	sp, #72	@ 0x48
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	4bbe      	ldr	r3, [pc, #760]	@ (80050ec <UART_SetConfig+0x328>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4ab3      	ldr	r2, [pc, #716]	@ (80050f0 <UART_SetConfig+0x32c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d004      	beq.n	8004e30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	4baf      	ldr	r3, [pc, #700]	@ (80050f4 <UART_SetConfig+0x330>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e40:	430b      	orrs	r3, r1
 8004e42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4a:	f023 010f 	bic.w	r1, r3, #15
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4aa6      	ldr	r2, [pc, #664]	@ (80050f8 <UART_SetConfig+0x334>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d177      	bne.n	8004f54 <UART_SetConfig+0x190>
 8004e64:	4ba5      	ldr	r3, [pc, #660]	@ (80050fc <UART_SetConfig+0x338>)
 8004e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e6c:	2b28      	cmp	r3, #40	@ 0x28
 8004e6e:	d86d      	bhi.n	8004f4c <UART_SetConfig+0x188>
 8004e70:	a201      	add	r2, pc, #4	@ (adr r2, 8004e78 <UART_SetConfig+0xb4>)
 8004e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e76:	bf00      	nop
 8004e78:	08004f1d 	.word	0x08004f1d
 8004e7c:	08004f4d 	.word	0x08004f4d
 8004e80:	08004f4d 	.word	0x08004f4d
 8004e84:	08004f4d 	.word	0x08004f4d
 8004e88:	08004f4d 	.word	0x08004f4d
 8004e8c:	08004f4d 	.word	0x08004f4d
 8004e90:	08004f4d 	.word	0x08004f4d
 8004e94:	08004f4d 	.word	0x08004f4d
 8004e98:	08004f25 	.word	0x08004f25
 8004e9c:	08004f4d 	.word	0x08004f4d
 8004ea0:	08004f4d 	.word	0x08004f4d
 8004ea4:	08004f4d 	.word	0x08004f4d
 8004ea8:	08004f4d 	.word	0x08004f4d
 8004eac:	08004f4d 	.word	0x08004f4d
 8004eb0:	08004f4d 	.word	0x08004f4d
 8004eb4:	08004f4d 	.word	0x08004f4d
 8004eb8:	08004f2d 	.word	0x08004f2d
 8004ebc:	08004f4d 	.word	0x08004f4d
 8004ec0:	08004f4d 	.word	0x08004f4d
 8004ec4:	08004f4d 	.word	0x08004f4d
 8004ec8:	08004f4d 	.word	0x08004f4d
 8004ecc:	08004f4d 	.word	0x08004f4d
 8004ed0:	08004f4d 	.word	0x08004f4d
 8004ed4:	08004f4d 	.word	0x08004f4d
 8004ed8:	08004f35 	.word	0x08004f35
 8004edc:	08004f4d 	.word	0x08004f4d
 8004ee0:	08004f4d 	.word	0x08004f4d
 8004ee4:	08004f4d 	.word	0x08004f4d
 8004ee8:	08004f4d 	.word	0x08004f4d
 8004eec:	08004f4d 	.word	0x08004f4d
 8004ef0:	08004f4d 	.word	0x08004f4d
 8004ef4:	08004f4d 	.word	0x08004f4d
 8004ef8:	08004f3d 	.word	0x08004f3d
 8004efc:	08004f4d 	.word	0x08004f4d
 8004f00:	08004f4d 	.word	0x08004f4d
 8004f04:	08004f4d 	.word	0x08004f4d
 8004f08:	08004f4d 	.word	0x08004f4d
 8004f0c:	08004f4d 	.word	0x08004f4d
 8004f10:	08004f4d 	.word	0x08004f4d
 8004f14:	08004f4d 	.word	0x08004f4d
 8004f18:	08004f45 	.word	0x08004f45
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f22:	e222      	b.n	800536a <UART_SetConfig+0x5a6>
 8004f24:	2304      	movs	r3, #4
 8004f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f2a:	e21e      	b.n	800536a <UART_SetConfig+0x5a6>
 8004f2c:	2308      	movs	r3, #8
 8004f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f32:	e21a      	b.n	800536a <UART_SetConfig+0x5a6>
 8004f34:	2310      	movs	r3, #16
 8004f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f3a:	e216      	b.n	800536a <UART_SetConfig+0x5a6>
 8004f3c:	2320      	movs	r3, #32
 8004f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f42:	e212      	b.n	800536a <UART_SetConfig+0x5a6>
 8004f44:	2340      	movs	r3, #64	@ 0x40
 8004f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f4a:	e20e      	b.n	800536a <UART_SetConfig+0x5a6>
 8004f4c:	2380      	movs	r3, #128	@ 0x80
 8004f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f52:	e20a      	b.n	800536a <UART_SetConfig+0x5a6>
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a69      	ldr	r2, [pc, #420]	@ (8005100 <UART_SetConfig+0x33c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d130      	bne.n	8004fc0 <UART_SetConfig+0x1fc>
 8004f5e:	4b67      	ldr	r3, [pc, #412]	@ (80050fc <UART_SetConfig+0x338>)
 8004f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	2b05      	cmp	r3, #5
 8004f68:	d826      	bhi.n	8004fb8 <UART_SetConfig+0x1f4>
 8004f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f70 <UART_SetConfig+0x1ac>)
 8004f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f70:	08004f89 	.word	0x08004f89
 8004f74:	08004f91 	.word	0x08004f91
 8004f78:	08004f99 	.word	0x08004f99
 8004f7c:	08004fa1 	.word	0x08004fa1
 8004f80:	08004fa9 	.word	0x08004fa9
 8004f84:	08004fb1 	.word	0x08004fb1
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f8e:	e1ec      	b.n	800536a <UART_SetConfig+0x5a6>
 8004f90:	2304      	movs	r3, #4
 8004f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f96:	e1e8      	b.n	800536a <UART_SetConfig+0x5a6>
 8004f98:	2308      	movs	r3, #8
 8004f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f9e:	e1e4      	b.n	800536a <UART_SetConfig+0x5a6>
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fa6:	e1e0      	b.n	800536a <UART_SetConfig+0x5a6>
 8004fa8:	2320      	movs	r3, #32
 8004faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fae:	e1dc      	b.n	800536a <UART_SetConfig+0x5a6>
 8004fb0:	2340      	movs	r3, #64	@ 0x40
 8004fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fb6:	e1d8      	b.n	800536a <UART_SetConfig+0x5a6>
 8004fb8:	2380      	movs	r3, #128	@ 0x80
 8004fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fbe:	e1d4      	b.n	800536a <UART_SetConfig+0x5a6>
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a4f      	ldr	r2, [pc, #316]	@ (8005104 <UART_SetConfig+0x340>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d130      	bne.n	800502c <UART_SetConfig+0x268>
 8004fca:	4b4c      	ldr	r3, [pc, #304]	@ (80050fc <UART_SetConfig+0x338>)
 8004fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	2b05      	cmp	r3, #5
 8004fd4:	d826      	bhi.n	8005024 <UART_SetConfig+0x260>
 8004fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8004fdc <UART_SetConfig+0x218>)
 8004fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fdc:	08004ff5 	.word	0x08004ff5
 8004fe0:	08004ffd 	.word	0x08004ffd
 8004fe4:	08005005 	.word	0x08005005
 8004fe8:	0800500d 	.word	0x0800500d
 8004fec:	08005015 	.word	0x08005015
 8004ff0:	0800501d 	.word	0x0800501d
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ffa:	e1b6      	b.n	800536a <UART_SetConfig+0x5a6>
 8004ffc:	2304      	movs	r3, #4
 8004ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005002:	e1b2      	b.n	800536a <UART_SetConfig+0x5a6>
 8005004:	2308      	movs	r3, #8
 8005006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800500a:	e1ae      	b.n	800536a <UART_SetConfig+0x5a6>
 800500c:	2310      	movs	r3, #16
 800500e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005012:	e1aa      	b.n	800536a <UART_SetConfig+0x5a6>
 8005014:	2320      	movs	r3, #32
 8005016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800501a:	e1a6      	b.n	800536a <UART_SetConfig+0x5a6>
 800501c:	2340      	movs	r3, #64	@ 0x40
 800501e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005022:	e1a2      	b.n	800536a <UART_SetConfig+0x5a6>
 8005024:	2380      	movs	r3, #128	@ 0x80
 8005026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800502a:	e19e      	b.n	800536a <UART_SetConfig+0x5a6>
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a35      	ldr	r2, [pc, #212]	@ (8005108 <UART_SetConfig+0x344>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d130      	bne.n	8005098 <UART_SetConfig+0x2d4>
 8005036:	4b31      	ldr	r3, [pc, #196]	@ (80050fc <UART_SetConfig+0x338>)
 8005038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	2b05      	cmp	r3, #5
 8005040:	d826      	bhi.n	8005090 <UART_SetConfig+0x2cc>
 8005042:	a201      	add	r2, pc, #4	@ (adr r2, 8005048 <UART_SetConfig+0x284>)
 8005044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005048:	08005061 	.word	0x08005061
 800504c:	08005069 	.word	0x08005069
 8005050:	08005071 	.word	0x08005071
 8005054:	08005079 	.word	0x08005079
 8005058:	08005081 	.word	0x08005081
 800505c:	08005089 	.word	0x08005089
 8005060:	2300      	movs	r3, #0
 8005062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005066:	e180      	b.n	800536a <UART_SetConfig+0x5a6>
 8005068:	2304      	movs	r3, #4
 800506a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800506e:	e17c      	b.n	800536a <UART_SetConfig+0x5a6>
 8005070:	2308      	movs	r3, #8
 8005072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005076:	e178      	b.n	800536a <UART_SetConfig+0x5a6>
 8005078:	2310      	movs	r3, #16
 800507a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800507e:	e174      	b.n	800536a <UART_SetConfig+0x5a6>
 8005080:	2320      	movs	r3, #32
 8005082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005086:	e170      	b.n	800536a <UART_SetConfig+0x5a6>
 8005088:	2340      	movs	r3, #64	@ 0x40
 800508a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800508e:	e16c      	b.n	800536a <UART_SetConfig+0x5a6>
 8005090:	2380      	movs	r3, #128	@ 0x80
 8005092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005096:	e168      	b.n	800536a <UART_SetConfig+0x5a6>
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1b      	ldr	r2, [pc, #108]	@ (800510c <UART_SetConfig+0x348>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d142      	bne.n	8005128 <UART_SetConfig+0x364>
 80050a2:	4b16      	ldr	r3, [pc, #88]	@ (80050fc <UART_SetConfig+0x338>)
 80050a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	2b05      	cmp	r3, #5
 80050ac:	d838      	bhi.n	8005120 <UART_SetConfig+0x35c>
 80050ae:	a201      	add	r2, pc, #4	@ (adr r2, 80050b4 <UART_SetConfig+0x2f0>)
 80050b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b4:	080050cd 	.word	0x080050cd
 80050b8:	080050d5 	.word	0x080050d5
 80050bc:	080050dd 	.word	0x080050dd
 80050c0:	080050e5 	.word	0x080050e5
 80050c4:	08005111 	.word	0x08005111
 80050c8:	08005119 	.word	0x08005119
 80050cc:	2300      	movs	r3, #0
 80050ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050d2:	e14a      	b.n	800536a <UART_SetConfig+0x5a6>
 80050d4:	2304      	movs	r3, #4
 80050d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050da:	e146      	b.n	800536a <UART_SetConfig+0x5a6>
 80050dc:	2308      	movs	r3, #8
 80050de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050e2:	e142      	b.n	800536a <UART_SetConfig+0x5a6>
 80050e4:	2310      	movs	r3, #16
 80050e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ea:	e13e      	b.n	800536a <UART_SetConfig+0x5a6>
 80050ec:	cfff69f3 	.word	0xcfff69f3
 80050f0:	58000c00 	.word	0x58000c00
 80050f4:	11fff4ff 	.word	0x11fff4ff
 80050f8:	40011000 	.word	0x40011000
 80050fc:	58024400 	.word	0x58024400
 8005100:	40004400 	.word	0x40004400
 8005104:	40004800 	.word	0x40004800
 8005108:	40004c00 	.word	0x40004c00
 800510c:	40005000 	.word	0x40005000
 8005110:	2320      	movs	r3, #32
 8005112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005116:	e128      	b.n	800536a <UART_SetConfig+0x5a6>
 8005118:	2340      	movs	r3, #64	@ 0x40
 800511a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800511e:	e124      	b.n	800536a <UART_SetConfig+0x5a6>
 8005120:	2380      	movs	r3, #128	@ 0x80
 8005122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005126:	e120      	b.n	800536a <UART_SetConfig+0x5a6>
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4acb      	ldr	r2, [pc, #812]	@ (800545c <UART_SetConfig+0x698>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d176      	bne.n	8005220 <UART_SetConfig+0x45c>
 8005132:	4bcb      	ldr	r3, [pc, #812]	@ (8005460 <UART_SetConfig+0x69c>)
 8005134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005136:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800513a:	2b28      	cmp	r3, #40	@ 0x28
 800513c:	d86c      	bhi.n	8005218 <UART_SetConfig+0x454>
 800513e:	a201      	add	r2, pc, #4	@ (adr r2, 8005144 <UART_SetConfig+0x380>)
 8005140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005144:	080051e9 	.word	0x080051e9
 8005148:	08005219 	.word	0x08005219
 800514c:	08005219 	.word	0x08005219
 8005150:	08005219 	.word	0x08005219
 8005154:	08005219 	.word	0x08005219
 8005158:	08005219 	.word	0x08005219
 800515c:	08005219 	.word	0x08005219
 8005160:	08005219 	.word	0x08005219
 8005164:	080051f1 	.word	0x080051f1
 8005168:	08005219 	.word	0x08005219
 800516c:	08005219 	.word	0x08005219
 8005170:	08005219 	.word	0x08005219
 8005174:	08005219 	.word	0x08005219
 8005178:	08005219 	.word	0x08005219
 800517c:	08005219 	.word	0x08005219
 8005180:	08005219 	.word	0x08005219
 8005184:	080051f9 	.word	0x080051f9
 8005188:	08005219 	.word	0x08005219
 800518c:	08005219 	.word	0x08005219
 8005190:	08005219 	.word	0x08005219
 8005194:	08005219 	.word	0x08005219
 8005198:	08005219 	.word	0x08005219
 800519c:	08005219 	.word	0x08005219
 80051a0:	08005219 	.word	0x08005219
 80051a4:	08005201 	.word	0x08005201
 80051a8:	08005219 	.word	0x08005219
 80051ac:	08005219 	.word	0x08005219
 80051b0:	08005219 	.word	0x08005219
 80051b4:	08005219 	.word	0x08005219
 80051b8:	08005219 	.word	0x08005219
 80051bc:	08005219 	.word	0x08005219
 80051c0:	08005219 	.word	0x08005219
 80051c4:	08005209 	.word	0x08005209
 80051c8:	08005219 	.word	0x08005219
 80051cc:	08005219 	.word	0x08005219
 80051d0:	08005219 	.word	0x08005219
 80051d4:	08005219 	.word	0x08005219
 80051d8:	08005219 	.word	0x08005219
 80051dc:	08005219 	.word	0x08005219
 80051e0:	08005219 	.word	0x08005219
 80051e4:	08005211 	.word	0x08005211
 80051e8:	2301      	movs	r3, #1
 80051ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ee:	e0bc      	b.n	800536a <UART_SetConfig+0x5a6>
 80051f0:	2304      	movs	r3, #4
 80051f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051f6:	e0b8      	b.n	800536a <UART_SetConfig+0x5a6>
 80051f8:	2308      	movs	r3, #8
 80051fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051fe:	e0b4      	b.n	800536a <UART_SetConfig+0x5a6>
 8005200:	2310      	movs	r3, #16
 8005202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005206:	e0b0      	b.n	800536a <UART_SetConfig+0x5a6>
 8005208:	2320      	movs	r3, #32
 800520a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800520e:	e0ac      	b.n	800536a <UART_SetConfig+0x5a6>
 8005210:	2340      	movs	r3, #64	@ 0x40
 8005212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005216:	e0a8      	b.n	800536a <UART_SetConfig+0x5a6>
 8005218:	2380      	movs	r3, #128	@ 0x80
 800521a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800521e:	e0a4      	b.n	800536a <UART_SetConfig+0x5a6>
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a8f      	ldr	r2, [pc, #572]	@ (8005464 <UART_SetConfig+0x6a0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d130      	bne.n	800528c <UART_SetConfig+0x4c8>
 800522a:	4b8d      	ldr	r3, [pc, #564]	@ (8005460 <UART_SetConfig+0x69c>)
 800522c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	2b05      	cmp	r3, #5
 8005234:	d826      	bhi.n	8005284 <UART_SetConfig+0x4c0>
 8005236:	a201      	add	r2, pc, #4	@ (adr r2, 800523c <UART_SetConfig+0x478>)
 8005238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523c:	08005255 	.word	0x08005255
 8005240:	0800525d 	.word	0x0800525d
 8005244:	08005265 	.word	0x08005265
 8005248:	0800526d 	.word	0x0800526d
 800524c:	08005275 	.word	0x08005275
 8005250:	0800527d 	.word	0x0800527d
 8005254:	2300      	movs	r3, #0
 8005256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800525a:	e086      	b.n	800536a <UART_SetConfig+0x5a6>
 800525c:	2304      	movs	r3, #4
 800525e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005262:	e082      	b.n	800536a <UART_SetConfig+0x5a6>
 8005264:	2308      	movs	r3, #8
 8005266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800526a:	e07e      	b.n	800536a <UART_SetConfig+0x5a6>
 800526c:	2310      	movs	r3, #16
 800526e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005272:	e07a      	b.n	800536a <UART_SetConfig+0x5a6>
 8005274:	2320      	movs	r3, #32
 8005276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800527a:	e076      	b.n	800536a <UART_SetConfig+0x5a6>
 800527c:	2340      	movs	r3, #64	@ 0x40
 800527e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005282:	e072      	b.n	800536a <UART_SetConfig+0x5a6>
 8005284:	2380      	movs	r3, #128	@ 0x80
 8005286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800528a:	e06e      	b.n	800536a <UART_SetConfig+0x5a6>
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a75      	ldr	r2, [pc, #468]	@ (8005468 <UART_SetConfig+0x6a4>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d130      	bne.n	80052f8 <UART_SetConfig+0x534>
 8005296:	4b72      	ldr	r3, [pc, #456]	@ (8005460 <UART_SetConfig+0x69c>)
 8005298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	2b05      	cmp	r3, #5
 80052a0:	d826      	bhi.n	80052f0 <UART_SetConfig+0x52c>
 80052a2:	a201      	add	r2, pc, #4	@ (adr r2, 80052a8 <UART_SetConfig+0x4e4>)
 80052a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a8:	080052c1 	.word	0x080052c1
 80052ac:	080052c9 	.word	0x080052c9
 80052b0:	080052d1 	.word	0x080052d1
 80052b4:	080052d9 	.word	0x080052d9
 80052b8:	080052e1 	.word	0x080052e1
 80052bc:	080052e9 	.word	0x080052e9
 80052c0:	2300      	movs	r3, #0
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c6:	e050      	b.n	800536a <UART_SetConfig+0x5a6>
 80052c8:	2304      	movs	r3, #4
 80052ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ce:	e04c      	b.n	800536a <UART_SetConfig+0x5a6>
 80052d0:	2308      	movs	r3, #8
 80052d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052d6:	e048      	b.n	800536a <UART_SetConfig+0x5a6>
 80052d8:	2310      	movs	r3, #16
 80052da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052de:	e044      	b.n	800536a <UART_SetConfig+0x5a6>
 80052e0:	2320      	movs	r3, #32
 80052e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052e6:	e040      	b.n	800536a <UART_SetConfig+0x5a6>
 80052e8:	2340      	movs	r3, #64	@ 0x40
 80052ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ee:	e03c      	b.n	800536a <UART_SetConfig+0x5a6>
 80052f0:	2380      	movs	r3, #128	@ 0x80
 80052f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052f6:	e038      	b.n	800536a <UART_SetConfig+0x5a6>
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a5b      	ldr	r2, [pc, #364]	@ (800546c <UART_SetConfig+0x6a8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d130      	bne.n	8005364 <UART_SetConfig+0x5a0>
 8005302:	4b57      	ldr	r3, [pc, #348]	@ (8005460 <UART_SetConfig+0x69c>)
 8005304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	2b05      	cmp	r3, #5
 800530c:	d826      	bhi.n	800535c <UART_SetConfig+0x598>
 800530e:	a201      	add	r2, pc, #4	@ (adr r2, 8005314 <UART_SetConfig+0x550>)
 8005310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005314:	0800532d 	.word	0x0800532d
 8005318:	08005335 	.word	0x08005335
 800531c:	0800533d 	.word	0x0800533d
 8005320:	08005345 	.word	0x08005345
 8005324:	0800534d 	.word	0x0800534d
 8005328:	08005355 	.word	0x08005355
 800532c:	2302      	movs	r3, #2
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005332:	e01a      	b.n	800536a <UART_SetConfig+0x5a6>
 8005334:	2304      	movs	r3, #4
 8005336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533a:	e016      	b.n	800536a <UART_SetConfig+0x5a6>
 800533c:	2308      	movs	r3, #8
 800533e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005342:	e012      	b.n	800536a <UART_SetConfig+0x5a6>
 8005344:	2310      	movs	r3, #16
 8005346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800534a:	e00e      	b.n	800536a <UART_SetConfig+0x5a6>
 800534c:	2320      	movs	r3, #32
 800534e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005352:	e00a      	b.n	800536a <UART_SetConfig+0x5a6>
 8005354:	2340      	movs	r3, #64	@ 0x40
 8005356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800535a:	e006      	b.n	800536a <UART_SetConfig+0x5a6>
 800535c:	2380      	movs	r3, #128	@ 0x80
 800535e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005362:	e002      	b.n	800536a <UART_SetConfig+0x5a6>
 8005364:	2380      	movs	r3, #128	@ 0x80
 8005366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a3f      	ldr	r2, [pc, #252]	@ (800546c <UART_SetConfig+0x6a8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	f040 80f8 	bne.w	8005566 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005376:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800537a:	2b20      	cmp	r3, #32
 800537c:	dc46      	bgt.n	800540c <UART_SetConfig+0x648>
 800537e:	2b02      	cmp	r3, #2
 8005380:	f2c0 8082 	blt.w	8005488 <UART_SetConfig+0x6c4>
 8005384:	3b02      	subs	r3, #2
 8005386:	2b1e      	cmp	r3, #30
 8005388:	d87e      	bhi.n	8005488 <UART_SetConfig+0x6c4>
 800538a:	a201      	add	r2, pc, #4	@ (adr r2, 8005390 <UART_SetConfig+0x5cc>)
 800538c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005390:	08005413 	.word	0x08005413
 8005394:	08005489 	.word	0x08005489
 8005398:	0800541b 	.word	0x0800541b
 800539c:	08005489 	.word	0x08005489
 80053a0:	08005489 	.word	0x08005489
 80053a4:	08005489 	.word	0x08005489
 80053a8:	0800542b 	.word	0x0800542b
 80053ac:	08005489 	.word	0x08005489
 80053b0:	08005489 	.word	0x08005489
 80053b4:	08005489 	.word	0x08005489
 80053b8:	08005489 	.word	0x08005489
 80053bc:	08005489 	.word	0x08005489
 80053c0:	08005489 	.word	0x08005489
 80053c4:	08005489 	.word	0x08005489
 80053c8:	0800543b 	.word	0x0800543b
 80053cc:	08005489 	.word	0x08005489
 80053d0:	08005489 	.word	0x08005489
 80053d4:	08005489 	.word	0x08005489
 80053d8:	08005489 	.word	0x08005489
 80053dc:	08005489 	.word	0x08005489
 80053e0:	08005489 	.word	0x08005489
 80053e4:	08005489 	.word	0x08005489
 80053e8:	08005489 	.word	0x08005489
 80053ec:	08005489 	.word	0x08005489
 80053f0:	08005489 	.word	0x08005489
 80053f4:	08005489 	.word	0x08005489
 80053f8:	08005489 	.word	0x08005489
 80053fc:	08005489 	.word	0x08005489
 8005400:	08005489 	.word	0x08005489
 8005404:	08005489 	.word	0x08005489
 8005408:	0800547b 	.word	0x0800547b
 800540c:	2b40      	cmp	r3, #64	@ 0x40
 800540e:	d037      	beq.n	8005480 <UART_SetConfig+0x6bc>
 8005410:	e03a      	b.n	8005488 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005412:	f7fe fd09 	bl	8003e28 <HAL_RCCEx_GetD3PCLK1Freq>
 8005416:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005418:	e03c      	b.n	8005494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800541a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800541e:	4618      	mov	r0, r3
 8005420:	f7fe fd18 	bl	8003e54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005428:	e034      	b.n	8005494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800542a:	f107 0318 	add.w	r3, r7, #24
 800542e:	4618      	mov	r0, r3
 8005430:	f7fe fe64 	bl	80040fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005438:	e02c      	b.n	8005494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800543a:	4b09      	ldr	r3, [pc, #36]	@ (8005460 <UART_SetConfig+0x69c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	2b00      	cmp	r3, #0
 8005444:	d016      	beq.n	8005474 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005446:	4b06      	ldr	r3, [pc, #24]	@ (8005460 <UART_SetConfig+0x69c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	08db      	lsrs	r3, r3, #3
 800544c:	f003 0303 	and.w	r3, r3, #3
 8005450:	4a07      	ldr	r2, [pc, #28]	@ (8005470 <UART_SetConfig+0x6ac>)
 8005452:	fa22 f303 	lsr.w	r3, r2, r3
 8005456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005458:	e01c      	b.n	8005494 <UART_SetConfig+0x6d0>
 800545a:	bf00      	nop
 800545c:	40011400 	.word	0x40011400
 8005460:	58024400 	.word	0x58024400
 8005464:	40007800 	.word	0x40007800
 8005468:	40007c00 	.word	0x40007c00
 800546c:	58000c00 	.word	0x58000c00
 8005470:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005474:	4b9d      	ldr	r3, [pc, #628]	@ (80056ec <UART_SetConfig+0x928>)
 8005476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005478:	e00c      	b.n	8005494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800547a:	4b9d      	ldr	r3, [pc, #628]	@ (80056f0 <UART_SetConfig+0x92c>)
 800547c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800547e:	e009      	b.n	8005494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005480:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005486:	e005      	b.n	8005494 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005492:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 81de 	beq.w	8005858 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a0:	4a94      	ldr	r2, [pc, #592]	@ (80056f4 <UART_SetConfig+0x930>)
 80054a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054a6:	461a      	mov	r2, r3
 80054a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80054ae:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	4613      	mov	r3, r2
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	4413      	add	r3, r2
 80054ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054bc:	429a      	cmp	r2, r3
 80054be:	d305      	bcc.n	80054cc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d903      	bls.n	80054d4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80054d2:	e1c1      	b.n	8005858 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054d6:	2200      	movs	r2, #0
 80054d8:	60bb      	str	r3, [r7, #8]
 80054da:	60fa      	str	r2, [r7, #12]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e0:	4a84      	ldr	r2, [pc, #528]	@ (80056f4 <UART_SetConfig+0x930>)
 80054e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	2200      	movs	r2, #0
 80054ea:	603b      	str	r3, [r7, #0]
 80054ec:	607a      	str	r2, [r7, #4]
 80054ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054f6:	f7fa ff43 	bl	8000380 <__aeabi_uldivmod>
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	4610      	mov	r0, r2
 8005500:	4619      	mov	r1, r3
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	f04f 0300 	mov.w	r3, #0
 800550a:	020b      	lsls	r3, r1, #8
 800550c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005510:	0202      	lsls	r2, r0, #8
 8005512:	6979      	ldr	r1, [r7, #20]
 8005514:	6849      	ldr	r1, [r1, #4]
 8005516:	0849      	lsrs	r1, r1, #1
 8005518:	2000      	movs	r0, #0
 800551a:	460c      	mov	r4, r1
 800551c:	4605      	mov	r5, r0
 800551e:	eb12 0804 	adds.w	r8, r2, r4
 8005522:	eb43 0905 	adc.w	r9, r3, r5
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	469a      	mov	sl, r3
 800552e:	4693      	mov	fp, r2
 8005530:	4652      	mov	r2, sl
 8005532:	465b      	mov	r3, fp
 8005534:	4640      	mov	r0, r8
 8005536:	4649      	mov	r1, r9
 8005538:	f7fa ff22 	bl	8000380 <__aeabi_uldivmod>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4613      	mov	r3, r2
 8005542:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005546:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800554a:	d308      	bcc.n	800555e <UART_SetConfig+0x79a>
 800554c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005552:	d204      	bcs.n	800555e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800555a:	60da      	str	r2, [r3, #12]
 800555c:	e17c      	b.n	8005858 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005564:	e178      	b.n	8005858 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800556e:	f040 80c5 	bne.w	80056fc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005572:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005576:	2b20      	cmp	r3, #32
 8005578:	dc48      	bgt.n	800560c <UART_SetConfig+0x848>
 800557a:	2b00      	cmp	r3, #0
 800557c:	db7b      	blt.n	8005676 <UART_SetConfig+0x8b2>
 800557e:	2b20      	cmp	r3, #32
 8005580:	d879      	bhi.n	8005676 <UART_SetConfig+0x8b2>
 8005582:	a201      	add	r2, pc, #4	@ (adr r2, 8005588 <UART_SetConfig+0x7c4>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	08005613 	.word	0x08005613
 800558c:	0800561b 	.word	0x0800561b
 8005590:	08005677 	.word	0x08005677
 8005594:	08005677 	.word	0x08005677
 8005598:	08005623 	.word	0x08005623
 800559c:	08005677 	.word	0x08005677
 80055a0:	08005677 	.word	0x08005677
 80055a4:	08005677 	.word	0x08005677
 80055a8:	08005633 	.word	0x08005633
 80055ac:	08005677 	.word	0x08005677
 80055b0:	08005677 	.word	0x08005677
 80055b4:	08005677 	.word	0x08005677
 80055b8:	08005677 	.word	0x08005677
 80055bc:	08005677 	.word	0x08005677
 80055c0:	08005677 	.word	0x08005677
 80055c4:	08005677 	.word	0x08005677
 80055c8:	08005643 	.word	0x08005643
 80055cc:	08005677 	.word	0x08005677
 80055d0:	08005677 	.word	0x08005677
 80055d4:	08005677 	.word	0x08005677
 80055d8:	08005677 	.word	0x08005677
 80055dc:	08005677 	.word	0x08005677
 80055e0:	08005677 	.word	0x08005677
 80055e4:	08005677 	.word	0x08005677
 80055e8:	08005677 	.word	0x08005677
 80055ec:	08005677 	.word	0x08005677
 80055f0:	08005677 	.word	0x08005677
 80055f4:	08005677 	.word	0x08005677
 80055f8:	08005677 	.word	0x08005677
 80055fc:	08005677 	.word	0x08005677
 8005600:	08005677 	.word	0x08005677
 8005604:	08005677 	.word	0x08005677
 8005608:	08005669 	.word	0x08005669
 800560c:	2b40      	cmp	r3, #64	@ 0x40
 800560e:	d02e      	beq.n	800566e <UART_SetConfig+0x8aa>
 8005610:	e031      	b.n	8005676 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005612:	f7fd f991 	bl	8002938 <HAL_RCC_GetPCLK1Freq>
 8005616:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005618:	e033      	b.n	8005682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800561a:	f7fd f9a3 	bl	8002964 <HAL_RCC_GetPCLK2Freq>
 800561e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005620:	e02f      	b.n	8005682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005626:	4618      	mov	r0, r3
 8005628:	f7fe fc14 	bl	8003e54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800562c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005630:	e027      	b.n	8005682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005632:	f107 0318 	add.w	r3, r7, #24
 8005636:	4618      	mov	r0, r3
 8005638:	f7fe fd60 	bl	80040fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005640:	e01f      	b.n	8005682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005642:	4b2d      	ldr	r3, [pc, #180]	@ (80056f8 <UART_SetConfig+0x934>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0320 	and.w	r3, r3, #32
 800564a:	2b00      	cmp	r3, #0
 800564c:	d009      	beq.n	8005662 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800564e:	4b2a      	ldr	r3, [pc, #168]	@ (80056f8 <UART_SetConfig+0x934>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	08db      	lsrs	r3, r3, #3
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	4a24      	ldr	r2, [pc, #144]	@ (80056ec <UART_SetConfig+0x928>)
 800565a:	fa22 f303 	lsr.w	r3, r2, r3
 800565e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005660:	e00f      	b.n	8005682 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005662:	4b22      	ldr	r3, [pc, #136]	@ (80056ec <UART_SetConfig+0x928>)
 8005664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005666:	e00c      	b.n	8005682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005668:	4b21      	ldr	r3, [pc, #132]	@ (80056f0 <UART_SetConfig+0x92c>)
 800566a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800566c:	e009      	b.n	8005682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800566e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005674:	e005      	b.n	8005682 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005680:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 80e7 	beq.w	8005858 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568e:	4a19      	ldr	r2, [pc, #100]	@ (80056f4 <UART_SetConfig+0x930>)
 8005690:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005694:	461a      	mov	r2, r3
 8005696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005698:	fbb3 f3f2 	udiv	r3, r3, r2
 800569c:	005a      	lsls	r2, r3, #1
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	085b      	lsrs	r3, r3, #1
 80056a4:	441a      	add	r2, r3
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b2:	2b0f      	cmp	r3, #15
 80056b4:	d916      	bls.n	80056e4 <UART_SetConfig+0x920>
 80056b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056bc:	d212      	bcs.n	80056e4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	f023 030f 	bic.w	r3, r3, #15
 80056c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ca:	085b      	lsrs	r3, r3, #1
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	f003 0307 	and.w	r3, r3, #7
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80056d6:	4313      	orrs	r3, r2
 80056d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80056e0:	60da      	str	r2, [r3, #12]
 80056e2:	e0b9      	b.n	8005858 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80056ea:	e0b5      	b.n	8005858 <UART_SetConfig+0xa94>
 80056ec:	03d09000 	.word	0x03d09000
 80056f0:	003d0900 	.word	0x003d0900
 80056f4:	08008498 	.word	0x08008498
 80056f8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80056fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005700:	2b20      	cmp	r3, #32
 8005702:	dc49      	bgt.n	8005798 <UART_SetConfig+0x9d4>
 8005704:	2b00      	cmp	r3, #0
 8005706:	db7c      	blt.n	8005802 <UART_SetConfig+0xa3e>
 8005708:	2b20      	cmp	r3, #32
 800570a:	d87a      	bhi.n	8005802 <UART_SetConfig+0xa3e>
 800570c:	a201      	add	r2, pc, #4	@ (adr r2, 8005714 <UART_SetConfig+0x950>)
 800570e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005712:	bf00      	nop
 8005714:	0800579f 	.word	0x0800579f
 8005718:	080057a7 	.word	0x080057a7
 800571c:	08005803 	.word	0x08005803
 8005720:	08005803 	.word	0x08005803
 8005724:	080057af 	.word	0x080057af
 8005728:	08005803 	.word	0x08005803
 800572c:	08005803 	.word	0x08005803
 8005730:	08005803 	.word	0x08005803
 8005734:	080057bf 	.word	0x080057bf
 8005738:	08005803 	.word	0x08005803
 800573c:	08005803 	.word	0x08005803
 8005740:	08005803 	.word	0x08005803
 8005744:	08005803 	.word	0x08005803
 8005748:	08005803 	.word	0x08005803
 800574c:	08005803 	.word	0x08005803
 8005750:	08005803 	.word	0x08005803
 8005754:	080057cf 	.word	0x080057cf
 8005758:	08005803 	.word	0x08005803
 800575c:	08005803 	.word	0x08005803
 8005760:	08005803 	.word	0x08005803
 8005764:	08005803 	.word	0x08005803
 8005768:	08005803 	.word	0x08005803
 800576c:	08005803 	.word	0x08005803
 8005770:	08005803 	.word	0x08005803
 8005774:	08005803 	.word	0x08005803
 8005778:	08005803 	.word	0x08005803
 800577c:	08005803 	.word	0x08005803
 8005780:	08005803 	.word	0x08005803
 8005784:	08005803 	.word	0x08005803
 8005788:	08005803 	.word	0x08005803
 800578c:	08005803 	.word	0x08005803
 8005790:	08005803 	.word	0x08005803
 8005794:	080057f5 	.word	0x080057f5
 8005798:	2b40      	cmp	r3, #64	@ 0x40
 800579a:	d02e      	beq.n	80057fa <UART_SetConfig+0xa36>
 800579c:	e031      	b.n	8005802 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800579e:	f7fd f8cb 	bl	8002938 <HAL_RCC_GetPCLK1Freq>
 80057a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057a4:	e033      	b.n	800580e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057a6:	f7fd f8dd 	bl	8002964 <HAL_RCC_GetPCLK2Freq>
 80057aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057ac:	e02f      	b.n	800580e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fe fb4e 	bl	8003e54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057bc:	e027      	b.n	800580e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057be:	f107 0318 	add.w	r3, r7, #24
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe fc9a 	bl	80040fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057cc:	e01f      	b.n	800580e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057ce:	4b2d      	ldr	r3, [pc, #180]	@ (8005884 <UART_SetConfig+0xac0>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d009      	beq.n	80057ee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057da:	4b2a      	ldr	r3, [pc, #168]	@ (8005884 <UART_SetConfig+0xac0>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	08db      	lsrs	r3, r3, #3
 80057e0:	f003 0303 	and.w	r3, r3, #3
 80057e4:	4a28      	ldr	r2, [pc, #160]	@ (8005888 <UART_SetConfig+0xac4>)
 80057e6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057ec:	e00f      	b.n	800580e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80057ee:	4b26      	ldr	r3, [pc, #152]	@ (8005888 <UART_SetConfig+0xac4>)
 80057f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057f2:	e00c      	b.n	800580e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057f4:	4b25      	ldr	r3, [pc, #148]	@ (800588c <UART_SetConfig+0xac8>)
 80057f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057f8:	e009      	b.n	800580e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005800:	e005      	b.n	800580e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800580c:	bf00      	nop
    }

    if (pclk != 0U)
 800580e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005810:	2b00      	cmp	r3, #0
 8005812:	d021      	beq.n	8005858 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005818:	4a1d      	ldr	r2, [pc, #116]	@ (8005890 <UART_SetConfig+0xacc>)
 800581a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800581e:	461a      	mov	r2, r3
 8005820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005822:	fbb3 f2f2 	udiv	r2, r3, r2
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	085b      	lsrs	r3, r3, #1
 800582c:	441a      	add	r2, r3
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	fbb2 f3f3 	udiv	r3, r2, r3
 8005836:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583a:	2b0f      	cmp	r3, #15
 800583c:	d909      	bls.n	8005852 <UART_SetConfig+0xa8e>
 800583e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005844:	d205      	bcs.n	8005852 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005848:	b29a      	uxth	r2, r3
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	60da      	str	r2, [r3, #12]
 8005850:	e002      	b.n	8005858 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2201      	movs	r2, #1
 800585c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2201      	movs	r2, #1
 8005864:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	2200      	movs	r2, #0
 800586c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2200      	movs	r2, #0
 8005872:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005874:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005878:	4618      	mov	r0, r3
 800587a:	3748      	adds	r7, #72	@ 0x48
 800587c:	46bd      	mov	sp, r7
 800587e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005882:	bf00      	nop
 8005884:	58024400 	.word	0x58024400
 8005888:	03d09000 	.word	0x03d09000
 800588c:	003d0900 	.word	0x003d0900
 8005890:	08008498 	.word	0x08008498

08005894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00a      	beq.n	8005902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005906:	f003 0304 	and.w	r3, r3, #4
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594a:	f003 0320 	and.w	r3, r3, #32
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01a      	beq.n	80059aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005992:	d10a      	bne.n	80059aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	605a      	str	r2, [r3, #4]
  }
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b098      	sub	sp, #96	@ 0x60
 80059dc:	af02      	add	r7, sp, #8
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059e8:	f7fb fc10 	bl	800120c <HAL_GetTick>
 80059ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0308 	and.w	r3, r3, #8
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d12f      	bne.n	8005a5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a04:	2200      	movs	r2, #0
 8005a06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f88e 	bl	8005b2c <UART_WaitOnFlagUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d022      	beq.n	8005a5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	461a      	mov	r2, r3
 8005a32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a34:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a3c:	e841 2300 	strex	r3, r2, [r1]
 8005a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e6      	bne.n	8005a16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e063      	b.n	8005b24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d149      	bne.n	8005afe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a72:	2200      	movs	r2, #0
 8005a74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f857 	bl	8005b2c <UART_WaitOnFlagUntilTimeout>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d03c      	beq.n	8005afe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8c:	e853 3f00 	ldrex	r3, [r3]
 8005a90:	623b      	str	r3, [r7, #32]
   return(result);
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aa2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005aa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aaa:	e841 2300 	strex	r3, r2, [r1]
 8005aae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1e6      	bne.n	8005a84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3308      	adds	r3, #8
 8005abc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	e853 3f00 	ldrex	r3, [r3]
 8005ac4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f023 0301 	bic.w	r3, r3, #1
 8005acc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ad6:	61fa      	str	r2, [r7, #28]
 8005ad8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ada:	69b9      	ldr	r1, [r7, #24]
 8005adc:	69fa      	ldr	r2, [r7, #28]
 8005ade:	e841 2300 	strex	r3, r2, [r1]
 8005ae2:	617b      	str	r3, [r7, #20]
   return(result);
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1e5      	bne.n	8005ab6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e012      	b.n	8005b24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3758      	adds	r7, #88	@ 0x58
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b3c:	e04f      	b.n	8005bde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b44:	d04b      	beq.n	8005bde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b46:	f7fb fb61 	bl	800120c <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d302      	bcc.n	8005b5c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e04e      	b.n	8005bfe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d037      	beq.n	8005bde <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2b80      	cmp	r3, #128	@ 0x80
 8005b72:	d034      	beq.n	8005bde <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b40      	cmp	r3, #64	@ 0x40
 8005b78:	d031      	beq.n	8005bde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d110      	bne.n	8005baa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2208      	movs	r2, #8
 8005b8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 f839 	bl	8005c08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2208      	movs	r2, #8
 8005b9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e029      	b.n	8005bfe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bb8:	d111      	bne.n	8005bde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005bc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 f81f 	bl	8005c08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e00f      	b.n	8005bfe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69da      	ldr	r2, [r3, #28]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	4013      	ands	r3, r2
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	bf0c      	ite	eq
 8005bee:	2301      	moveq	r3, #1
 8005bf0:	2300      	movne	r3, #0
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	79fb      	ldrb	r3, [r7, #7]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d0a0      	beq.n	8005b3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b095      	sub	sp, #84	@ 0x54
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c18:	e853 3f00 	ldrex	r3, [r3]
 8005c1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c30:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c36:	e841 2300 	strex	r3, r2, [r1]
 8005c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1e6      	bne.n	8005c10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3308      	adds	r3, #8
 8005c48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c52:	69fa      	ldr	r2, [r7, #28]
 8005c54:	4b1e      	ldr	r3, [pc, #120]	@ (8005cd0 <UART_EndRxTransfer+0xc8>)
 8005c56:	4013      	ands	r3, r2
 8005c58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3308      	adds	r3, #8
 8005c60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e5      	bne.n	8005c42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d118      	bne.n	8005cb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f023 0310 	bic.w	r3, r3, #16
 8005c92:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca0:	6979      	ldr	r1, [r7, #20]
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e6      	bne.n	8005c7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005cc4:	bf00      	nop
 8005cc6:	3754      	adds	r7, #84	@ 0x54
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	effffffe 	.word	0xeffffffe

08005cd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d101      	bne.n	8005cea <HAL_UARTEx_DisableFifoMode+0x16>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	e027      	b.n	8005d3a <HAL_UARTEx_DisableFifoMode+0x66>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2224      	movs	r2, #36	@ 0x24
 8005cf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0201 	bic.w	r2, r2, #1
 8005d10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005d18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d101      	bne.n	8005d5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	e02d      	b.n	8005dba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2224      	movs	r2, #36	@ 0x24
 8005d6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0201 	bic.w	r2, r2, #1
 8005d84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f850 	bl	8005e40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d101      	bne.n	8005dda <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	e02d      	b.n	8005e36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2224      	movs	r2, #36	@ 0x24
 8005de6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 0201 	bic.w	r2, r2, #1
 8005e00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f812 	bl	8005e40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d108      	bne.n	8005e62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e60:	e031      	b.n	8005ec6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e62:	2310      	movs	r3, #16
 8005e64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e66:	2310      	movs	r3, #16
 8005e68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	0e5b      	lsrs	r3, r3, #25
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	0f5b      	lsrs	r3, r3, #29
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	f003 0307 	and.w	r3, r3, #7
 8005e88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e8a:	7bbb      	ldrb	r3, [r7, #14]
 8005e8c:	7b3a      	ldrb	r2, [r7, #12]
 8005e8e:	4911      	ldr	r1, [pc, #68]	@ (8005ed4 <UARTEx_SetNbDataToProcess+0x94>)
 8005e90:	5c8a      	ldrb	r2, [r1, r2]
 8005e92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e96:	7b3a      	ldrb	r2, [r7, #12]
 8005e98:	490f      	ldr	r1, [pc, #60]	@ (8005ed8 <UARTEx_SetNbDataToProcess+0x98>)
 8005e9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
 8005eaa:	7b7a      	ldrb	r2, [r7, #13]
 8005eac:	4909      	ldr	r1, [pc, #36]	@ (8005ed4 <UARTEx_SetNbDataToProcess+0x94>)
 8005eae:	5c8a      	ldrb	r2, [r1, r2]
 8005eb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005eb4:	7b7a      	ldrb	r2, [r7, #13]
 8005eb6:	4908      	ldr	r1, [pc, #32]	@ (8005ed8 <UARTEx_SetNbDataToProcess+0x98>)
 8005eb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005eba:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005ec6:	bf00      	nop
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	080084b0 	.word	0x080084b0
 8005ed8:	080084b8 	.word	0x080084b8

08005edc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005eea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005eee:	2b84      	cmp	r3, #132	@ 0x84
 8005ef0:	d005      	beq.n	8005efe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005ef2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4413      	add	r3, r2
 8005efa:	3303      	adds	r3, #3
 8005efc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005efe:	68fb      	ldr	r3, [r7, #12]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005f10:	f000 ff00 	bl	8006d14 <vTaskStartScheduler>
  
  return osOK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005f1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f1c:	b089      	sub	sp, #36	@ 0x24
 8005f1e:	af04      	add	r7, sp, #16
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d020      	beq.n	8005f6e <osThreadCreate+0x54>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d01c      	beq.n	8005f6e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685c      	ldr	r4, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691e      	ldr	r6, [r3, #16]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7ff ffc8 	bl	8005edc <makeFreeRtosPriority>
 8005f4c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f56:	9202      	str	r2, [sp, #8]
 8005f58:	9301      	str	r3, [sp, #4]
 8005f5a:	9100      	str	r1, [sp, #0]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	4632      	mov	r2, r6
 8005f60:	4629      	mov	r1, r5
 8005f62:	4620      	mov	r0, r4
 8005f64:	f000 fcf0 	bl	8006948 <xTaskCreateStatic>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	e01c      	b.n	8005fa8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685c      	ldr	r4, [r3, #4]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f7a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7ff ffaa 	bl	8005edc <makeFreeRtosPriority>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	f107 030c 	add.w	r3, r7, #12
 8005f8e:	9301      	str	r3, [sp, #4]
 8005f90:	9200      	str	r2, [sp, #0]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	4632      	mov	r2, r6
 8005f96:	4629      	mov	r1, r5
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f000 fd35 	bl	8006a08 <xTaskCreate>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d001      	beq.n	8005fa8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	e000      	b.n	8005faa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fb2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <osDelay+0x16>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	e000      	b.n	8005fca <osDelay+0x18>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 fe6c 	bl	8006ca8 <vTaskDelay>
  
  return osOK;
 8005fd0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b08a      	sub	sp, #40	@ 0x28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fe8:	f000 fefe 	bl	8006de8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fec:	4b5c      	ldr	r3, [pc, #368]	@ (8006160 <pvPortMalloc+0x184>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ff4:	f000 f924 	bl	8006240 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ff8:	4b5a      	ldr	r3, [pc, #360]	@ (8006164 <pvPortMalloc+0x188>)
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4013      	ands	r3, r2
 8006000:	2b00      	cmp	r3, #0
 8006002:	f040 8095 	bne.w	8006130 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d01e      	beq.n	800604a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800600c:	2208      	movs	r2, #8
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4413      	add	r3, r2
 8006012:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	2b00      	cmp	r3, #0
 800601c:	d015      	beq.n	800604a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f023 0307 	bic.w	r3, r3, #7
 8006024:	3308      	adds	r3, #8
 8006026:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f003 0307 	and.w	r3, r3, #7
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00b      	beq.n	800604a <pvPortMalloc+0x6e>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	617b      	str	r3, [r7, #20]
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	e7fd      	b.n	8006046 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d06f      	beq.n	8006130 <pvPortMalloc+0x154>
 8006050:	4b45      	ldr	r3, [pc, #276]	@ (8006168 <pvPortMalloc+0x18c>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	429a      	cmp	r2, r3
 8006058:	d86a      	bhi.n	8006130 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800605a:	4b44      	ldr	r3, [pc, #272]	@ (800616c <pvPortMalloc+0x190>)
 800605c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800605e:	4b43      	ldr	r3, [pc, #268]	@ (800616c <pvPortMalloc+0x190>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006064:	e004      	b.n	8006070 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006068:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800606a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	429a      	cmp	r2, r3
 8006078:	d903      	bls.n	8006082 <pvPortMalloc+0xa6>
 800607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1f1      	bne.n	8006066 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006082:	4b37      	ldr	r3, [pc, #220]	@ (8006160 <pvPortMalloc+0x184>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006088:	429a      	cmp	r2, r3
 800608a:	d051      	beq.n	8006130 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2208      	movs	r2, #8
 8006092:	4413      	add	r3, r2
 8006094:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800609e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	1ad2      	subs	r2, r2, r3
 80060a6:	2308      	movs	r3, #8
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d920      	bls.n	80060f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4413      	add	r3, r2
 80060b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00b      	beq.n	80060d8 <pvPortMalloc+0xfc>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	613b      	str	r3, [r7, #16]
}
 80060d2:	bf00      	nop
 80060d4:	bf00      	nop
 80060d6:	e7fd      	b.n	80060d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	1ad2      	subs	r2, r2, r3
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060ea:	69b8      	ldr	r0, [r7, #24]
 80060ec:	f000 f90a 	bl	8006304 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006168 <pvPortMalloc+0x18c>)
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006168 <pvPortMalloc+0x18c>)
 80060fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060fe:	4b1a      	ldr	r3, [pc, #104]	@ (8006168 <pvPortMalloc+0x18c>)
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	4b1b      	ldr	r3, [pc, #108]	@ (8006170 <pvPortMalloc+0x194>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	429a      	cmp	r2, r3
 8006108:	d203      	bcs.n	8006112 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800610a:	4b17      	ldr	r3, [pc, #92]	@ (8006168 <pvPortMalloc+0x18c>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a18      	ldr	r2, [pc, #96]	@ (8006170 <pvPortMalloc+0x194>)
 8006110:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	4b13      	ldr	r3, [pc, #76]	@ (8006164 <pvPortMalloc+0x188>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	431a      	orrs	r2, r3
 800611c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006126:	4b13      	ldr	r3, [pc, #76]	@ (8006174 <pvPortMalloc+0x198>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3301      	adds	r3, #1
 800612c:	4a11      	ldr	r2, [pc, #68]	@ (8006174 <pvPortMalloc+0x198>)
 800612e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006130:	f000 fe68 	bl	8006e04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00b      	beq.n	8006156 <pvPortMalloc+0x17a>
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	60fb      	str	r3, [r7, #12]
}
 8006150:	bf00      	nop
 8006152:	bf00      	nop
 8006154:	e7fd      	b.n	8006152 <pvPortMalloc+0x176>
	return pvReturn;
 8006156:	69fb      	ldr	r3, [r7, #28]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3728      	adds	r7, #40	@ 0x28
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	24004044 	.word	0x24004044
 8006164:	24004058 	.word	0x24004058
 8006168:	24004048 	.word	0x24004048
 800616c:	2400403c 	.word	0x2400403c
 8006170:	2400404c 	.word	0x2400404c
 8006174:	24004050 	.word	0x24004050

08006178 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d04f      	beq.n	800622a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800618a:	2308      	movs	r3, #8
 800618c:	425b      	negs	r3, r3
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	4413      	add	r3, r2
 8006192:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	4b25      	ldr	r3, [pc, #148]	@ (8006234 <vPortFree+0xbc>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4013      	ands	r3, r2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10b      	bne.n	80061be <vPortFree+0x46>
	__asm volatile
 80061a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	60fb      	str	r3, [r7, #12]
}
 80061b8:	bf00      	nop
 80061ba:	bf00      	nop
 80061bc:	e7fd      	b.n	80061ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00b      	beq.n	80061de <vPortFree+0x66>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	60bb      	str	r3, [r7, #8]
}
 80061d8:	bf00      	nop
 80061da:	bf00      	nop
 80061dc:	e7fd      	b.n	80061da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	4b14      	ldr	r3, [pc, #80]	@ (8006234 <vPortFree+0xbc>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4013      	ands	r3, r2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d01e      	beq.n	800622a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d11a      	bne.n	800622a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006234 <vPortFree+0xbc>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	43db      	mvns	r3, r3
 80061fe:	401a      	ands	r2, r3
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006204:	f000 fdf0 	bl	8006de8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	4b0a      	ldr	r3, [pc, #40]	@ (8006238 <vPortFree+0xc0>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4413      	add	r3, r2
 8006212:	4a09      	ldr	r2, [pc, #36]	@ (8006238 <vPortFree+0xc0>)
 8006214:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006216:	6938      	ldr	r0, [r7, #16]
 8006218:	f000 f874 	bl	8006304 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800621c:	4b07      	ldr	r3, [pc, #28]	@ (800623c <vPortFree+0xc4>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3301      	adds	r3, #1
 8006222:	4a06      	ldr	r2, [pc, #24]	@ (800623c <vPortFree+0xc4>)
 8006224:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006226:	f000 fded 	bl	8006e04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800622a:	bf00      	nop
 800622c:	3718      	adds	r7, #24
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	24004058 	.word	0x24004058
 8006238:	24004048 	.word	0x24004048
 800623c:	24004054 	.word	0x24004054

08006240 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006246:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800624a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800624c:	4b27      	ldr	r3, [pc, #156]	@ (80062ec <prvHeapInit+0xac>)
 800624e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00c      	beq.n	8006274 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3307      	adds	r3, #7
 800625e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 0307 	bic.w	r3, r3, #7
 8006266:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	4a1f      	ldr	r2, [pc, #124]	@ (80062ec <prvHeapInit+0xac>)
 8006270:	4413      	add	r3, r2
 8006272:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006278:	4a1d      	ldr	r2, [pc, #116]	@ (80062f0 <prvHeapInit+0xb0>)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800627e:	4b1c      	ldr	r3, [pc, #112]	@ (80062f0 <prvHeapInit+0xb0>)
 8006280:	2200      	movs	r2, #0
 8006282:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	4413      	add	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800628c:	2208      	movs	r2, #8
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	1a9b      	subs	r3, r3, r2
 8006292:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0307 	bic.w	r3, r3, #7
 800629a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4a15      	ldr	r2, [pc, #84]	@ (80062f4 <prvHeapInit+0xb4>)
 80062a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80062a2:	4b14      	ldr	r3, [pc, #80]	@ (80062f4 <prvHeapInit+0xb4>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2200      	movs	r2, #0
 80062a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062aa:	4b12      	ldr	r3, [pc, #72]	@ (80062f4 <prvHeapInit+0xb4>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	1ad2      	subs	r2, r2, r3
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062c0:	4b0c      	ldr	r3, [pc, #48]	@ (80062f4 <prvHeapInit+0xb4>)
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	4a0a      	ldr	r2, [pc, #40]	@ (80062f8 <prvHeapInit+0xb8>)
 80062ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	4a09      	ldr	r2, [pc, #36]	@ (80062fc <prvHeapInit+0xbc>)
 80062d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062d8:	4b09      	ldr	r3, [pc, #36]	@ (8006300 <prvHeapInit+0xc0>)
 80062da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80062de:	601a      	str	r2, [r3, #0]
}
 80062e0:	bf00      	nop
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	2400043c 	.word	0x2400043c
 80062f0:	2400403c 	.word	0x2400403c
 80062f4:	24004044 	.word	0x24004044
 80062f8:	2400404c 	.word	0x2400404c
 80062fc:	24004048 	.word	0x24004048
 8006300:	24004058 	.word	0x24004058

08006304 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800630c:	4b28      	ldr	r3, [pc, #160]	@ (80063b0 <prvInsertBlockIntoFreeList+0xac>)
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	e002      	b.n	8006318 <prvInsertBlockIntoFreeList+0x14>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	429a      	cmp	r2, r3
 8006320:	d8f7      	bhi.n	8006312 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	4413      	add	r3, r2
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	429a      	cmp	r2, r3
 8006332:	d108      	bne.n	8006346 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	441a      	add	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	441a      	add	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	429a      	cmp	r2, r3
 8006358:	d118      	bne.n	800638c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	4b15      	ldr	r3, [pc, #84]	@ (80063b4 <prvInsertBlockIntoFreeList+0xb0>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	429a      	cmp	r2, r3
 8006364:	d00d      	beq.n	8006382 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	441a      	add	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	e008      	b.n	8006394 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006382:	4b0c      	ldr	r3, [pc, #48]	@ (80063b4 <prvInsertBlockIntoFreeList+0xb0>)
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	601a      	str	r2, [r3, #0]
 800638a:	e003      	b.n	8006394 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	429a      	cmp	r2, r3
 800639a:	d002      	beq.n	80063a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063a2:	bf00      	nop
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	2400403c 	.word	0x2400403c
 80063b4:	24004044 	.word	0x24004044

080063b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f103 0208 	add.w	r2, r3, #8
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f04f 32ff 	mov.w	r2, #4294967295
 80063d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f103 0208 	add.w	r2, r3, #8
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f103 0208 	add.w	r2, r3, #8
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006412:	b480      	push	{r7}
 8006414:	b085      	sub	sp, #20
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	601a      	str	r2, [r3, #0]
}
 800644e:	bf00      	nop
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800645a:	b480      	push	{r7}
 800645c:	b085      	sub	sp, #20
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
 8006462:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006470:	d103      	bne.n	800647a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	60fb      	str	r3, [r7, #12]
 8006478:	e00c      	b.n	8006494 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	3308      	adds	r3, #8
 800647e:	60fb      	str	r3, [r7, #12]
 8006480:	e002      	b.n	8006488 <vListInsert+0x2e>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	429a      	cmp	r2, r3
 8006492:	d2f6      	bcs.n	8006482 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	601a      	str	r2, [r3, #0]
}
 80064c0:	bf00      	nop
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6892      	ldr	r2, [r2, #8]
 80064e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	6852      	ldr	r2, [r2, #4]
 80064ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d103      	bne.n	8006500 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	1e5a      	subs	r2, r3, #1
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3b04      	subs	r3, #4
 8006530:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006538:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	3b04      	subs	r3, #4
 800653e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	f023 0201 	bic.w	r2, r3, #1
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	3b04      	subs	r3, #4
 800654e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006550:	4a0c      	ldr	r2, [pc, #48]	@ (8006584 <pxPortInitialiseStack+0x64>)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	3b14      	subs	r3, #20
 800655a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3b04      	subs	r3, #4
 8006566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f06f 0202 	mvn.w	r2, #2
 800656e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3b20      	subs	r3, #32
 8006574:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006576:	68fb      	ldr	r3, [r7, #12]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3714      	adds	r7, #20
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr
 8006584:	08006589 	.word	0x08006589

08006588 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800658e:	2300      	movs	r3, #0
 8006590:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006592:	4b13      	ldr	r3, [pc, #76]	@ (80065e0 <prvTaskExitError+0x58>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659a:	d00b      	beq.n	80065b4 <prvTaskExitError+0x2c>
	__asm volatile
 800659c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	60fb      	str	r3, [r7, #12]
}
 80065ae:	bf00      	nop
 80065b0:	bf00      	nop
 80065b2:	e7fd      	b.n	80065b0 <prvTaskExitError+0x28>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	60bb      	str	r3, [r7, #8]
}
 80065c6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065c8:	bf00      	nop
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0fc      	beq.n	80065ca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065d0:	bf00      	nop
 80065d2:	bf00      	nop
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	24000014 	.word	0x24000014
	...

080065f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065f0:	4b07      	ldr	r3, [pc, #28]	@ (8006610 <pxCurrentTCBConst2>)
 80065f2:	6819      	ldr	r1, [r3, #0]
 80065f4:	6808      	ldr	r0, [r1, #0]
 80065f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fa:	f380 8809 	msr	PSP, r0
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f04f 0000 	mov.w	r0, #0
 8006606:	f380 8811 	msr	BASEPRI, r0
 800660a:	4770      	bx	lr
 800660c:	f3af 8000 	nop.w

08006610 <pxCurrentTCBConst2>:
 8006610:	24004064 	.word	0x24004064
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop

08006618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006618:	4808      	ldr	r0, [pc, #32]	@ (800663c <prvPortStartFirstTask+0x24>)
 800661a:	6800      	ldr	r0, [r0, #0]
 800661c:	6800      	ldr	r0, [r0, #0]
 800661e:	f380 8808 	msr	MSP, r0
 8006622:	f04f 0000 	mov.w	r0, #0
 8006626:	f380 8814 	msr	CONTROL, r0
 800662a:	b662      	cpsie	i
 800662c:	b661      	cpsie	f
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	df00      	svc	0
 8006638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800663a:	bf00      	nop
 800663c:	e000ed08 	.word	0xe000ed08

08006640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006646:	4b47      	ldr	r3, [pc, #284]	@ (8006764 <xPortStartScheduler+0x124>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a47      	ldr	r2, [pc, #284]	@ (8006768 <xPortStartScheduler+0x128>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d10b      	bne.n	8006668 <xPortStartScheduler+0x28>
	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	613b      	str	r3, [r7, #16]
}
 8006662:	bf00      	nop
 8006664:	bf00      	nop
 8006666:	e7fd      	b.n	8006664 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006668:	4b3e      	ldr	r3, [pc, #248]	@ (8006764 <xPortStartScheduler+0x124>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a3f      	ldr	r2, [pc, #252]	@ (800676c <xPortStartScheduler+0x12c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d10b      	bne.n	800668a <xPortStartScheduler+0x4a>
	__asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	60fb      	str	r3, [r7, #12]
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop
 8006688:	e7fd      	b.n	8006686 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800668a:	4b39      	ldr	r3, [pc, #228]	@ (8006770 <xPortStartScheduler+0x130>)
 800668c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	b2db      	uxtb	r3, r3
 8006694:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	22ff      	movs	r2, #255	@ 0xff
 800669a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	4b31      	ldr	r3, [pc, #196]	@ (8006774 <xPortStartScheduler+0x134>)
 80066b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066b2:	4b31      	ldr	r3, [pc, #196]	@ (8006778 <xPortStartScheduler+0x138>)
 80066b4:	2207      	movs	r2, #7
 80066b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066b8:	e009      	b.n	80066ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80066ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006778 <xPortStartScheduler+0x138>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3b01      	subs	r3, #1
 80066c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006778 <xPortStartScheduler+0x138>)
 80066c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066ce:	78fb      	ldrb	r3, [r7, #3]
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066d6:	2b80      	cmp	r3, #128	@ 0x80
 80066d8:	d0ef      	beq.n	80066ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066da:	4b27      	ldr	r3, [pc, #156]	@ (8006778 <xPortStartScheduler+0x138>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f1c3 0307 	rsb	r3, r3, #7
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	d00b      	beq.n	80066fe <xPortStartScheduler+0xbe>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	60bb      	str	r3, [r7, #8]
}
 80066f8:	bf00      	nop
 80066fa:	bf00      	nop
 80066fc:	e7fd      	b.n	80066fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006778 <xPortStartScheduler+0x138>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	021b      	lsls	r3, r3, #8
 8006704:	4a1c      	ldr	r2, [pc, #112]	@ (8006778 <xPortStartScheduler+0x138>)
 8006706:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006708:	4b1b      	ldr	r3, [pc, #108]	@ (8006778 <xPortStartScheduler+0x138>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006710:	4a19      	ldr	r2, [pc, #100]	@ (8006778 <xPortStartScheduler+0x138>)
 8006712:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	b2da      	uxtb	r2, r3
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800671c:	4b17      	ldr	r3, [pc, #92]	@ (800677c <xPortStartScheduler+0x13c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a16      	ldr	r2, [pc, #88]	@ (800677c <xPortStartScheduler+0x13c>)
 8006722:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006726:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006728:	4b14      	ldr	r3, [pc, #80]	@ (800677c <xPortStartScheduler+0x13c>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a13      	ldr	r2, [pc, #76]	@ (800677c <xPortStartScheduler+0x13c>)
 800672e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006732:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006734:	f000 f8da 	bl	80068ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006738:	4b11      	ldr	r3, [pc, #68]	@ (8006780 <xPortStartScheduler+0x140>)
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800673e:	f000 f8f9 	bl	8006934 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006742:	4b10      	ldr	r3, [pc, #64]	@ (8006784 <xPortStartScheduler+0x144>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a0f      	ldr	r2, [pc, #60]	@ (8006784 <xPortStartScheduler+0x144>)
 8006748:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800674c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800674e:	f7ff ff63 	bl	8006618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006752:	f000 fcaf 	bl	80070b4 <vTaskSwitchContext>
	prvTaskExitError();
 8006756:	f7ff ff17 	bl	8006588 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3718      	adds	r7, #24
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	e000ed00 	.word	0xe000ed00
 8006768:	410fc271 	.word	0x410fc271
 800676c:	410fc270 	.word	0x410fc270
 8006770:	e000e400 	.word	0xe000e400
 8006774:	2400405c 	.word	0x2400405c
 8006778:	24004060 	.word	0x24004060
 800677c:	e000ed20 	.word	0xe000ed20
 8006780:	24000014 	.word	0x24000014
 8006784:	e000ef34 	.word	0xe000ef34

08006788 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	607b      	str	r3, [r7, #4]
}
 80067a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067a2:	4b10      	ldr	r3, [pc, #64]	@ (80067e4 <vPortEnterCritical+0x5c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3301      	adds	r3, #1
 80067a8:	4a0e      	ldr	r2, [pc, #56]	@ (80067e4 <vPortEnterCritical+0x5c>)
 80067aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067ac:	4b0d      	ldr	r3, [pc, #52]	@ (80067e4 <vPortEnterCritical+0x5c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d110      	bne.n	80067d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067b4:	4b0c      	ldr	r3, [pc, #48]	@ (80067e8 <vPortEnterCritical+0x60>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00b      	beq.n	80067d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	603b      	str	r3, [r7, #0]
}
 80067d0:	bf00      	nop
 80067d2:	bf00      	nop
 80067d4:	e7fd      	b.n	80067d2 <vPortEnterCritical+0x4a>
	}
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	24000014 	.word	0x24000014
 80067e8:	e000ed04 	.word	0xe000ed04

080067ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067f2:	4b12      	ldr	r3, [pc, #72]	@ (800683c <vPortExitCritical+0x50>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10b      	bne.n	8006812 <vPortExitCritical+0x26>
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	607b      	str	r3, [r7, #4]
}
 800680c:	bf00      	nop
 800680e:	bf00      	nop
 8006810:	e7fd      	b.n	800680e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006812:	4b0a      	ldr	r3, [pc, #40]	@ (800683c <vPortExitCritical+0x50>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3b01      	subs	r3, #1
 8006818:	4a08      	ldr	r2, [pc, #32]	@ (800683c <vPortExitCritical+0x50>)
 800681a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800681c:	4b07      	ldr	r3, [pc, #28]	@ (800683c <vPortExitCritical+0x50>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d105      	bne.n	8006830 <vPortExitCritical+0x44>
 8006824:	2300      	movs	r3, #0
 8006826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	f383 8811 	msr	BASEPRI, r3
}
 800682e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	24000014 	.word	0x24000014

08006840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006840:	f3ef 8009 	mrs	r0, PSP
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	4b15      	ldr	r3, [pc, #84]	@ (80068a0 <pxCurrentTCBConst>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	f01e 0f10 	tst.w	lr, #16
 8006850:	bf08      	it	eq
 8006852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685a:	6010      	str	r0, [r2, #0]
 800685c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006860:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006864:	f380 8811 	msr	BASEPRI, r0
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f000 fc20 	bl	80070b4 <vTaskSwitchContext>
 8006874:	f04f 0000 	mov.w	r0, #0
 8006878:	f380 8811 	msr	BASEPRI, r0
 800687c:	bc09      	pop	{r0, r3}
 800687e:	6819      	ldr	r1, [r3, #0]
 8006880:	6808      	ldr	r0, [r1, #0]
 8006882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006886:	f01e 0f10 	tst.w	lr, #16
 800688a:	bf08      	it	eq
 800688c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006890:	f380 8809 	msr	PSP, r0
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	f3af 8000 	nop.w

080068a0 <pxCurrentTCBConst>:
 80068a0:	24004064 	.word	0x24004064
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop

080068a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	607b      	str	r3, [r7, #4]
}
 80068c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068c2:	f000 fb3d 	bl	8006f40 <xTaskIncrementTick>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d003      	beq.n	80068d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068cc:	4b06      	ldr	r3, [pc, #24]	@ (80068e8 <SysTick_Handler+0x40>)
 80068ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	2300      	movs	r3, #0
 80068d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	f383 8811 	msr	BASEPRI, r3
}
 80068de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068e0:	bf00      	nop
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	e000ed04 	.word	0xe000ed04

080068ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006920 <vPortSetupTimerInterrupt+0x34>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006924 <vPortSetupTimerInterrupt+0x38>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006928 <vPortSetupTimerInterrupt+0x3c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a0a      	ldr	r2, [pc, #40]	@ (800692c <vPortSetupTimerInterrupt+0x40>)
 8006902:	fba2 2303 	umull	r2, r3, r2, r3
 8006906:	099b      	lsrs	r3, r3, #6
 8006908:	4a09      	ldr	r2, [pc, #36]	@ (8006930 <vPortSetupTimerInterrupt+0x44>)
 800690a:	3b01      	subs	r3, #1
 800690c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800690e:	4b04      	ldr	r3, [pc, #16]	@ (8006920 <vPortSetupTimerInterrupt+0x34>)
 8006910:	2207      	movs	r2, #7
 8006912:	601a      	str	r2, [r3, #0]
}
 8006914:	bf00      	nop
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	e000e010 	.word	0xe000e010
 8006924:	e000e018 	.word	0xe000e018
 8006928:	24000000 	.word	0x24000000
 800692c:	10624dd3 	.word	0x10624dd3
 8006930:	e000e014 	.word	0xe000e014

08006934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006934:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006944 <vPortEnableVFP+0x10>
 8006938:	6801      	ldr	r1, [r0, #0]
 800693a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800693e:	6001      	str	r1, [r0, #0]
 8006940:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006942:	bf00      	nop
 8006944:	e000ed88 	.word	0xe000ed88

08006948 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006948:	b580      	push	{r7, lr}
 800694a:	b08e      	sub	sp, #56	@ 0x38
 800694c:	af04      	add	r7, sp, #16
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10b      	bne.n	8006974 <xTaskCreateStatic+0x2c>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	623b      	str	r3, [r7, #32]
}
 800696e:	bf00      	nop
 8006970:	bf00      	nop
 8006972:	e7fd      	b.n	8006970 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10b      	bne.n	8006992 <xTaskCreateStatic+0x4a>
	__asm volatile
 800697a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	61fb      	str	r3, [r7, #28]
}
 800698c:	bf00      	nop
 800698e:	bf00      	nop
 8006990:	e7fd      	b.n	800698e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006992:	23a0      	movs	r3, #160	@ 0xa0
 8006994:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	2ba0      	cmp	r3, #160	@ 0xa0
 800699a:	d00b      	beq.n	80069b4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	61bb      	str	r3, [r7, #24]
}
 80069ae:	bf00      	nop
 80069b0:	bf00      	nop
 80069b2:	e7fd      	b.n	80069b0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d01e      	beq.n	80069fa <xTaskCreateStatic+0xb2>
 80069bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d01b      	beq.n	80069fa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069ca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069d4:	2300      	movs	r3, #0
 80069d6:	9303      	str	r3, [sp, #12]
 80069d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069da:	9302      	str	r3, [sp, #8]
 80069dc:	f107 0314 	add.w	r3, r7, #20
 80069e0:	9301      	str	r3, [sp, #4]
 80069e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 f851 	bl	8006a94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80069f4:	f000 f8ee 	bl	8006bd4 <prvAddNewTaskToReadyList>
 80069f8:	e001      	b.n	80069fe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80069fa:	2300      	movs	r3, #0
 80069fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069fe:	697b      	ldr	r3, [r7, #20]
	}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3728      	adds	r7, #40	@ 0x28
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b08c      	sub	sp, #48	@ 0x30
 8006a0c:	af04      	add	r7, sp, #16
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	603b      	str	r3, [r7, #0]
 8006a14:	4613      	mov	r3, r2
 8006a16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a18:	88fb      	ldrh	r3, [r7, #6]
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7ff fadd 	bl	8005fdc <pvPortMalloc>
 8006a22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00e      	beq.n	8006a48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a2a:	20a0      	movs	r0, #160	@ 0xa0
 8006a2c:	f7ff fad6 	bl	8005fdc <pvPortMalloc>
 8006a30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a3e:	e005      	b.n	8006a4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a40:	6978      	ldr	r0, [r7, #20]
 8006a42:	f7ff fb99 	bl	8006178 <vPortFree>
 8006a46:	e001      	b.n	8006a4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d017      	beq.n	8006a82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a5a:	88fa      	ldrh	r2, [r7, #6]
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	9303      	str	r3, [sp, #12]
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	9302      	str	r3, [sp, #8]
 8006a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a66:	9301      	str	r3, [sp, #4]
 8006a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	68b9      	ldr	r1, [r7, #8]
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 f80f 	bl	8006a94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a76:	69f8      	ldr	r0, [r7, #28]
 8006a78:	f000 f8ac 	bl	8006bd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	61bb      	str	r3, [r7, #24]
 8006a80:	e002      	b.n	8006a88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a82:	f04f 33ff 	mov.w	r3, #4294967295
 8006a86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a88:	69bb      	ldr	r3, [r7, #24]
	}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3720      	adds	r7, #32
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b088      	sub	sp, #32
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006aa6:	6879      	ldr	r1, [r7, #4]
 8006aa8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006aac:	440b      	add	r3, r1
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	f023 0307 	bic.w	r3, r3, #7
 8006aba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00b      	beq.n	8006ade <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	617b      	str	r3, [r7, #20]
}
 8006ad8:	bf00      	nop
 8006ada:	bf00      	nop
 8006adc:	e7fd      	b.n	8006ada <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d01f      	beq.n	8006b24 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	61fb      	str	r3, [r7, #28]
 8006ae8:	e012      	b.n	8006b10 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	4413      	add	r3, r2
 8006af0:	7819      	ldrb	r1, [r3, #0]
 8006af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	4413      	add	r3, r2
 8006af8:	3334      	adds	r3, #52	@ 0x34
 8006afa:	460a      	mov	r2, r1
 8006afc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	4413      	add	r3, r2
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d006      	beq.n	8006b18 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	61fb      	str	r3, [r7, #28]
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	2b0f      	cmp	r3, #15
 8006b14:	d9e9      	bls.n	8006aea <prvInitialiseNewTask+0x56>
 8006b16:	e000      	b.n	8006b1a <prvInitialiseNewTask+0x86>
			{
				break;
 8006b18:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b22:	e003      	b.n	8006b2c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2e:	2b06      	cmp	r3, #6
 8006b30:	d901      	bls.n	8006b36 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b32:	2306      	movs	r3, #6
 8006b34:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b40:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b44:	2200      	movs	r2, #0
 8006b46:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4a:	3304      	adds	r3, #4
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7ff fc53 	bl	80063f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b54:	3318      	adds	r3, #24
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7ff fc4e 	bl	80063f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b60:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b64:	f1c3 0207 	rsb	r2, r3, #7
 8006b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b70:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b74:	2200      	movs	r2, #0
 8006b76:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b84:	334c      	adds	r3, #76	@ 0x4c
 8006b86:	224c      	movs	r2, #76	@ 0x4c
 8006b88:	2100      	movs	r1, #0
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 fef8 	bl	8007980 <memset>
 8006b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b92:	4a0d      	ldr	r2, [pc, #52]	@ (8006bc8 <prvInitialiseNewTask+0x134>)
 8006b94:	651a      	str	r2, [r3, #80]	@ 0x50
 8006b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b98:	4a0c      	ldr	r2, [pc, #48]	@ (8006bcc <prvInitialiseNewTask+0x138>)
 8006b9a:	655a      	str	r2, [r3, #84]	@ 0x54
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9e:	4a0c      	ldr	r2, [pc, #48]	@ (8006bd0 <prvInitialiseNewTask+0x13c>)
 8006ba0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	68f9      	ldr	r1, [r7, #12]
 8006ba6:	69b8      	ldr	r0, [r7, #24]
 8006ba8:	f7ff fcba 	bl	8006520 <pxPortInitialiseStack>
 8006bac:	4602      	mov	r2, r0
 8006bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bbe:	bf00      	nop
 8006bc0:	3720      	adds	r7, #32
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	24004198 	.word	0x24004198
 8006bcc:	24004200 	.word	0x24004200
 8006bd0:	24004268 	.word	0x24004268

08006bd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bdc:	f7ff fdd4 	bl	8006788 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006be0:	4b2a      	ldr	r3, [pc, #168]	@ (8006c8c <prvAddNewTaskToReadyList+0xb8>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3301      	adds	r3, #1
 8006be6:	4a29      	ldr	r2, [pc, #164]	@ (8006c8c <prvAddNewTaskToReadyList+0xb8>)
 8006be8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006bea:	4b29      	ldr	r3, [pc, #164]	@ (8006c90 <prvAddNewTaskToReadyList+0xbc>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d109      	bne.n	8006c06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006bf2:	4a27      	ldr	r2, [pc, #156]	@ (8006c90 <prvAddNewTaskToReadyList+0xbc>)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006bf8:	4b24      	ldr	r3, [pc, #144]	@ (8006c8c <prvAddNewTaskToReadyList+0xb8>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d110      	bne.n	8006c22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c00:	f000 fad4 	bl	80071ac <prvInitialiseTaskLists>
 8006c04:	e00d      	b.n	8006c22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c06:	4b23      	ldr	r3, [pc, #140]	@ (8006c94 <prvAddNewTaskToReadyList+0xc0>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d109      	bne.n	8006c22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c0e:	4b20      	ldr	r3, [pc, #128]	@ (8006c90 <prvAddNewTaskToReadyList+0xbc>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d802      	bhi.n	8006c22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c1c:	4a1c      	ldr	r2, [pc, #112]	@ (8006c90 <prvAddNewTaskToReadyList+0xbc>)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c22:	4b1d      	ldr	r3, [pc, #116]	@ (8006c98 <prvAddNewTaskToReadyList+0xc4>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3301      	adds	r3, #1
 8006c28:	4a1b      	ldr	r2, [pc, #108]	@ (8006c98 <prvAddNewTaskToReadyList+0xc4>)
 8006c2a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c30:	2201      	movs	r2, #1
 8006c32:	409a      	lsls	r2, r3
 8006c34:	4b19      	ldr	r3, [pc, #100]	@ (8006c9c <prvAddNewTaskToReadyList+0xc8>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	4a18      	ldr	r2, [pc, #96]	@ (8006c9c <prvAddNewTaskToReadyList+0xc8>)
 8006c3c:	6013      	str	r3, [r2, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c42:	4613      	mov	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4a15      	ldr	r2, [pc, #84]	@ (8006ca0 <prvAddNewTaskToReadyList+0xcc>)
 8006c4c:	441a      	add	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	3304      	adds	r3, #4
 8006c52:	4619      	mov	r1, r3
 8006c54:	4610      	mov	r0, r2
 8006c56:	f7ff fbdc 	bl	8006412 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c5a:	f7ff fdc7 	bl	80067ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c94 <prvAddNewTaskToReadyList+0xc0>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00e      	beq.n	8006c84 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c66:	4b0a      	ldr	r3, [pc, #40]	@ (8006c90 <prvAddNewTaskToReadyList+0xbc>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d207      	bcs.n	8006c84 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c74:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca4 <prvAddNewTaskToReadyList+0xd0>)
 8006c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c84:	bf00      	nop
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	24004164 	.word	0x24004164
 8006c90:	24004064 	.word	0x24004064
 8006c94:	24004170 	.word	0x24004170
 8006c98:	24004180 	.word	0x24004180
 8006c9c:	2400416c 	.word	0x2400416c
 8006ca0:	24004068 	.word	0x24004068
 8006ca4:	e000ed04 	.word	0xe000ed04

08006ca8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d018      	beq.n	8006cec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cba:	4b14      	ldr	r3, [pc, #80]	@ (8006d0c <vTaskDelay+0x64>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00b      	beq.n	8006cda <vTaskDelay+0x32>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	60bb      	str	r3, [r7, #8]
}
 8006cd4:	bf00      	nop
 8006cd6:	bf00      	nop
 8006cd8:	e7fd      	b.n	8006cd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006cda:	f000 f885 	bl	8006de8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006cde:	2100      	movs	r1, #0
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fb27 	bl	8007334 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ce6:	f000 f88d 	bl	8006e04 <xTaskResumeAll>
 8006cea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d107      	bne.n	8006d02 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006cf2:	4b07      	ldr	r3, [pc, #28]	@ (8006d10 <vTaskDelay+0x68>)
 8006cf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cf8:	601a      	str	r2, [r3, #0]
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d02:	bf00      	nop
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	2400418c 	.word	0x2400418c
 8006d10:	e000ed04 	.word	0xe000ed04

08006d14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08a      	sub	sp, #40	@ 0x28
 8006d18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d22:	463a      	mov	r2, r7
 8006d24:	1d39      	adds	r1, r7, #4
 8006d26:	f107 0308 	add.w	r3, r7, #8
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7f9 fd36 	bl	800079c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	9202      	str	r2, [sp, #8]
 8006d38:	9301      	str	r3, [sp, #4]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	460a      	mov	r2, r1
 8006d42:	4921      	ldr	r1, [pc, #132]	@ (8006dc8 <vTaskStartScheduler+0xb4>)
 8006d44:	4821      	ldr	r0, [pc, #132]	@ (8006dcc <vTaskStartScheduler+0xb8>)
 8006d46:	f7ff fdff 	bl	8006948 <xTaskCreateStatic>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	4a20      	ldr	r2, [pc, #128]	@ (8006dd0 <vTaskStartScheduler+0xbc>)
 8006d4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d50:	4b1f      	ldr	r3, [pc, #124]	@ (8006dd0 <vTaskStartScheduler+0xbc>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	e001      	b.n	8006d62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d11b      	bne.n	8006da0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	613b      	str	r3, [r7, #16]
}
 8006d7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d7c:	4b15      	ldr	r3, [pc, #84]	@ (8006dd4 <vTaskStartScheduler+0xc0>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	334c      	adds	r3, #76	@ 0x4c
 8006d82:	4a15      	ldr	r2, [pc, #84]	@ (8006dd8 <vTaskStartScheduler+0xc4>)
 8006d84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d86:	4b15      	ldr	r3, [pc, #84]	@ (8006ddc <vTaskStartScheduler+0xc8>)
 8006d88:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d8e:	4b14      	ldr	r3, [pc, #80]	@ (8006de0 <vTaskStartScheduler+0xcc>)
 8006d90:	2201      	movs	r2, #1
 8006d92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d94:	4b13      	ldr	r3, [pc, #76]	@ (8006de4 <vTaskStartScheduler+0xd0>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d9a:	f7ff fc51 	bl	8006640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d9e:	e00f      	b.n	8006dc0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da6:	d10b      	bne.n	8006dc0 <vTaskStartScheduler+0xac>
	__asm volatile
 8006da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dac:	f383 8811 	msr	BASEPRI, r3
 8006db0:	f3bf 8f6f 	isb	sy
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	60fb      	str	r3, [r7, #12]
}
 8006dba:	bf00      	nop
 8006dbc:	bf00      	nop
 8006dbe:	e7fd      	b.n	8006dbc <vTaskStartScheduler+0xa8>
}
 8006dc0:	bf00      	nop
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	08008480 	.word	0x08008480
 8006dcc:	0800717d 	.word	0x0800717d
 8006dd0:	24004188 	.word	0x24004188
 8006dd4:	24004064 	.word	0x24004064
 8006dd8:	24000024 	.word	0x24000024
 8006ddc:	24004184 	.word	0x24004184
 8006de0:	24004170 	.word	0x24004170
 8006de4:	24004168 	.word	0x24004168

08006de8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006de8:	b480      	push	{r7}
 8006dea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006dec:	4b04      	ldr	r3, [pc, #16]	@ (8006e00 <vTaskSuspendAll+0x18>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3301      	adds	r3, #1
 8006df2:	4a03      	ldr	r2, [pc, #12]	@ (8006e00 <vTaskSuspendAll+0x18>)
 8006df4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006df6:	bf00      	nop
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	2400418c 	.word	0x2400418c

08006e04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e12:	4b42      	ldr	r3, [pc, #264]	@ (8006f1c <xTaskResumeAll+0x118>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10b      	bne.n	8006e32 <xTaskResumeAll+0x2e>
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	603b      	str	r3, [r7, #0]
}
 8006e2c:	bf00      	nop
 8006e2e:	bf00      	nop
 8006e30:	e7fd      	b.n	8006e2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e32:	f7ff fca9 	bl	8006788 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e36:	4b39      	ldr	r3, [pc, #228]	@ (8006f1c <xTaskResumeAll+0x118>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	4a37      	ldr	r2, [pc, #220]	@ (8006f1c <xTaskResumeAll+0x118>)
 8006e3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e40:	4b36      	ldr	r3, [pc, #216]	@ (8006f1c <xTaskResumeAll+0x118>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d161      	bne.n	8006f0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e48:	4b35      	ldr	r3, [pc, #212]	@ (8006f20 <xTaskResumeAll+0x11c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d05d      	beq.n	8006f0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e50:	e02e      	b.n	8006eb0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e52:	4b34      	ldr	r3, [pc, #208]	@ (8006f24 <xTaskResumeAll+0x120>)
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	3318      	adds	r3, #24
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7ff fb34 	bl	80064cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3304      	adds	r3, #4
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7ff fb2f 	bl	80064cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e72:	2201      	movs	r2, #1
 8006e74:	409a      	lsls	r2, r3
 8006e76:	4b2c      	ldr	r3, [pc, #176]	@ (8006f28 <xTaskResumeAll+0x124>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8006f28 <xTaskResumeAll+0x124>)
 8006e7e:	6013      	str	r3, [r2, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e84:	4613      	mov	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4a27      	ldr	r2, [pc, #156]	@ (8006f2c <xTaskResumeAll+0x128>)
 8006e8e:	441a      	add	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3304      	adds	r3, #4
 8006e94:	4619      	mov	r1, r3
 8006e96:	4610      	mov	r0, r2
 8006e98:	f7ff fabb 	bl	8006412 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ea0:	4b23      	ldr	r3, [pc, #140]	@ (8006f30 <xTaskResumeAll+0x12c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d302      	bcc.n	8006eb0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006eaa:	4b22      	ldr	r3, [pc, #136]	@ (8006f34 <xTaskResumeAll+0x130>)
 8006eac:	2201      	movs	r2, #1
 8006eae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8006f24 <xTaskResumeAll+0x120>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1cc      	bne.n	8006e52 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ebe:	f000 fa19 	bl	80072f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8006f38 <xTaskResumeAll+0x134>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d010      	beq.n	8006ef0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ece:	f000 f837 	bl	8006f40 <xTaskIncrementTick>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006ed8:	4b16      	ldr	r3, [pc, #88]	@ (8006f34 <xTaskResumeAll+0x130>)
 8006eda:	2201      	movs	r2, #1
 8006edc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1f1      	bne.n	8006ece <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006eea:	4b13      	ldr	r3, [pc, #76]	@ (8006f38 <xTaskResumeAll+0x134>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ef0:	4b10      	ldr	r3, [pc, #64]	@ (8006f34 <xTaskResumeAll+0x130>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d009      	beq.n	8006f0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006efc:	4b0f      	ldr	r3, [pc, #60]	@ (8006f3c <xTaskResumeAll+0x138>)
 8006efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f0c:	f7ff fc6e 	bl	80067ec <vPortExitCritical>

	return xAlreadyYielded;
 8006f10:	68bb      	ldr	r3, [r7, #8]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	2400418c 	.word	0x2400418c
 8006f20:	24004164 	.word	0x24004164
 8006f24:	24004124 	.word	0x24004124
 8006f28:	2400416c 	.word	0x2400416c
 8006f2c:	24004068 	.word	0x24004068
 8006f30:	24004064 	.word	0x24004064
 8006f34:	24004178 	.word	0x24004178
 8006f38:	24004174 	.word	0x24004174
 8006f3c:	e000ed04 	.word	0xe000ed04

08006f40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f46:	2300      	movs	r3, #0
 8006f48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f4a:	4b4f      	ldr	r3, [pc, #316]	@ (8007088 <xTaskIncrementTick+0x148>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f040 808f 	bne.w	8007072 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f54:	4b4d      	ldr	r3, [pc, #308]	@ (800708c <xTaskIncrementTick+0x14c>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f5c:	4a4b      	ldr	r2, [pc, #300]	@ (800708c <xTaskIncrementTick+0x14c>)
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d121      	bne.n	8006fac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f68:	4b49      	ldr	r3, [pc, #292]	@ (8007090 <xTaskIncrementTick+0x150>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00b      	beq.n	8006f8a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	603b      	str	r3, [r7, #0]
}
 8006f84:	bf00      	nop
 8006f86:	bf00      	nop
 8006f88:	e7fd      	b.n	8006f86 <xTaskIncrementTick+0x46>
 8006f8a:	4b41      	ldr	r3, [pc, #260]	@ (8007090 <xTaskIncrementTick+0x150>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	4b40      	ldr	r3, [pc, #256]	@ (8007094 <xTaskIncrementTick+0x154>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a3e      	ldr	r2, [pc, #248]	@ (8007090 <xTaskIncrementTick+0x150>)
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	4a3e      	ldr	r2, [pc, #248]	@ (8007094 <xTaskIncrementTick+0x154>)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8007098 <xTaskIncrementTick+0x158>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	4a3c      	ldr	r2, [pc, #240]	@ (8007098 <xTaskIncrementTick+0x158>)
 8006fa6:	6013      	str	r3, [r2, #0]
 8006fa8:	f000 f9a4 	bl	80072f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006fac:	4b3b      	ldr	r3, [pc, #236]	@ (800709c <xTaskIncrementTick+0x15c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d348      	bcc.n	8007048 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fb6:	4b36      	ldr	r3, [pc, #216]	@ (8007090 <xTaskIncrementTick+0x150>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d104      	bne.n	8006fca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fc0:	4b36      	ldr	r3, [pc, #216]	@ (800709c <xTaskIncrementTick+0x15c>)
 8006fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc6:	601a      	str	r2, [r3, #0]
					break;
 8006fc8:	e03e      	b.n	8007048 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fca:	4b31      	ldr	r3, [pc, #196]	@ (8007090 <xTaskIncrementTick+0x150>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d203      	bcs.n	8006fea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006fe2:	4a2e      	ldr	r2, [pc, #184]	@ (800709c <xTaskIncrementTick+0x15c>)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006fe8:	e02e      	b.n	8007048 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	3304      	adds	r3, #4
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7ff fa6c 	bl	80064cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d004      	beq.n	8007006 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	3318      	adds	r3, #24
 8007000:	4618      	mov	r0, r3
 8007002:	f7ff fa63 	bl	80064cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700a:	2201      	movs	r2, #1
 800700c:	409a      	lsls	r2, r3
 800700e:	4b24      	ldr	r3, [pc, #144]	@ (80070a0 <xTaskIncrementTick+0x160>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4313      	orrs	r3, r2
 8007014:	4a22      	ldr	r2, [pc, #136]	@ (80070a0 <xTaskIncrementTick+0x160>)
 8007016:	6013      	str	r3, [r2, #0]
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800701c:	4613      	mov	r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4413      	add	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4a1f      	ldr	r2, [pc, #124]	@ (80070a4 <xTaskIncrementTick+0x164>)
 8007026:	441a      	add	r2, r3
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	3304      	adds	r3, #4
 800702c:	4619      	mov	r1, r3
 800702e:	4610      	mov	r0, r2
 8007030:	f7ff f9ef 	bl	8006412 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007038:	4b1b      	ldr	r3, [pc, #108]	@ (80070a8 <xTaskIncrementTick+0x168>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703e:	429a      	cmp	r2, r3
 8007040:	d3b9      	bcc.n	8006fb6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007042:	2301      	movs	r3, #1
 8007044:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007046:	e7b6      	b.n	8006fb6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007048:	4b17      	ldr	r3, [pc, #92]	@ (80070a8 <xTaskIncrementTick+0x168>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800704e:	4915      	ldr	r1, [pc, #84]	@ (80070a4 <xTaskIncrementTick+0x164>)
 8007050:	4613      	mov	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	440b      	add	r3, r1
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d901      	bls.n	8007064 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007060:	2301      	movs	r3, #1
 8007062:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007064:	4b11      	ldr	r3, [pc, #68]	@ (80070ac <xTaskIncrementTick+0x16c>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d007      	beq.n	800707c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800706c:	2301      	movs	r3, #1
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	e004      	b.n	800707c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007072:	4b0f      	ldr	r3, [pc, #60]	@ (80070b0 <xTaskIncrementTick+0x170>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	3301      	adds	r3, #1
 8007078:	4a0d      	ldr	r2, [pc, #52]	@ (80070b0 <xTaskIncrementTick+0x170>)
 800707a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800707c:	697b      	ldr	r3, [r7, #20]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3718      	adds	r7, #24
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	2400418c 	.word	0x2400418c
 800708c:	24004168 	.word	0x24004168
 8007090:	2400411c 	.word	0x2400411c
 8007094:	24004120 	.word	0x24004120
 8007098:	2400417c 	.word	0x2400417c
 800709c:	24004184 	.word	0x24004184
 80070a0:	2400416c 	.word	0x2400416c
 80070a4:	24004068 	.word	0x24004068
 80070a8:	24004064 	.word	0x24004064
 80070ac:	24004178 	.word	0x24004178
 80070b0:	24004174 	.word	0x24004174

080070b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070ba:	4b2a      	ldr	r3, [pc, #168]	@ (8007164 <vTaskSwitchContext+0xb0>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d003      	beq.n	80070ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070c2:	4b29      	ldr	r3, [pc, #164]	@ (8007168 <vTaskSwitchContext+0xb4>)
 80070c4:	2201      	movs	r2, #1
 80070c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070c8:	e045      	b.n	8007156 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80070ca:	4b27      	ldr	r3, [pc, #156]	@ (8007168 <vTaskSwitchContext+0xb4>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070d0:	4b26      	ldr	r3, [pc, #152]	@ (800716c <vTaskSwitchContext+0xb8>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	fab3 f383 	clz	r3, r3
 80070dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80070de:	7afb      	ldrb	r3, [r7, #11]
 80070e0:	f1c3 031f 	rsb	r3, r3, #31
 80070e4:	617b      	str	r3, [r7, #20]
 80070e6:	4922      	ldr	r1, [pc, #136]	@ (8007170 <vTaskSwitchContext+0xbc>)
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	4613      	mov	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	440b      	add	r3, r1
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10b      	bne.n	8007112 <vTaskSwitchContext+0x5e>
	__asm volatile
 80070fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fe:	f383 8811 	msr	BASEPRI, r3
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	607b      	str	r3, [r7, #4]
}
 800710c:	bf00      	nop
 800710e:	bf00      	nop
 8007110:	e7fd      	b.n	800710e <vTaskSwitchContext+0x5a>
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	4613      	mov	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4a14      	ldr	r2, [pc, #80]	@ (8007170 <vTaskSwitchContext+0xbc>)
 800711e:	4413      	add	r3, r2
 8007120:	613b      	str	r3, [r7, #16]
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	605a      	str	r2, [r3, #4]
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	3308      	adds	r3, #8
 8007134:	429a      	cmp	r2, r3
 8007136:	d104      	bne.n	8007142 <vTaskSwitchContext+0x8e>
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	605a      	str	r2, [r3, #4]
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	4a0a      	ldr	r2, [pc, #40]	@ (8007174 <vTaskSwitchContext+0xc0>)
 800714a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800714c:	4b09      	ldr	r3, [pc, #36]	@ (8007174 <vTaskSwitchContext+0xc0>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	334c      	adds	r3, #76	@ 0x4c
 8007152:	4a09      	ldr	r2, [pc, #36]	@ (8007178 <vTaskSwitchContext+0xc4>)
 8007154:	6013      	str	r3, [r2, #0]
}
 8007156:	bf00      	nop
 8007158:	371c      	adds	r7, #28
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	2400418c 	.word	0x2400418c
 8007168:	24004178 	.word	0x24004178
 800716c:	2400416c 	.word	0x2400416c
 8007170:	24004068 	.word	0x24004068
 8007174:	24004064 	.word	0x24004064
 8007178:	24000024 	.word	0x24000024

0800717c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007184:	f000 f852 	bl	800722c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007188:	4b06      	ldr	r3, [pc, #24]	@ (80071a4 <prvIdleTask+0x28>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d9f9      	bls.n	8007184 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007190:	4b05      	ldr	r3, [pc, #20]	@ (80071a8 <prvIdleTask+0x2c>)
 8007192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071a0:	e7f0      	b.n	8007184 <prvIdleTask+0x8>
 80071a2:	bf00      	nop
 80071a4:	24004068 	.word	0x24004068
 80071a8:	e000ed04 	.word	0xe000ed04

080071ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071b2:	2300      	movs	r3, #0
 80071b4:	607b      	str	r3, [r7, #4]
 80071b6:	e00c      	b.n	80071d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	4613      	mov	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4413      	add	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4a12      	ldr	r2, [pc, #72]	@ (800720c <prvInitialiseTaskLists+0x60>)
 80071c4:	4413      	add	r3, r2
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7ff f8f6 	bl	80063b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3301      	adds	r3, #1
 80071d0:	607b      	str	r3, [r7, #4]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b06      	cmp	r3, #6
 80071d6:	d9ef      	bls.n	80071b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071d8:	480d      	ldr	r0, [pc, #52]	@ (8007210 <prvInitialiseTaskLists+0x64>)
 80071da:	f7ff f8ed 	bl	80063b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071de:	480d      	ldr	r0, [pc, #52]	@ (8007214 <prvInitialiseTaskLists+0x68>)
 80071e0:	f7ff f8ea 	bl	80063b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071e4:	480c      	ldr	r0, [pc, #48]	@ (8007218 <prvInitialiseTaskLists+0x6c>)
 80071e6:	f7ff f8e7 	bl	80063b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071ea:	480c      	ldr	r0, [pc, #48]	@ (800721c <prvInitialiseTaskLists+0x70>)
 80071ec:	f7ff f8e4 	bl	80063b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071f0:	480b      	ldr	r0, [pc, #44]	@ (8007220 <prvInitialiseTaskLists+0x74>)
 80071f2:	f7ff f8e1 	bl	80063b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007224 <prvInitialiseTaskLists+0x78>)
 80071f8:	4a05      	ldr	r2, [pc, #20]	@ (8007210 <prvInitialiseTaskLists+0x64>)
 80071fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007228 <prvInitialiseTaskLists+0x7c>)
 80071fe:	4a05      	ldr	r2, [pc, #20]	@ (8007214 <prvInitialiseTaskLists+0x68>)
 8007200:	601a      	str	r2, [r3, #0]
}
 8007202:	bf00      	nop
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	24004068 	.word	0x24004068
 8007210:	240040f4 	.word	0x240040f4
 8007214:	24004108 	.word	0x24004108
 8007218:	24004124 	.word	0x24004124
 800721c:	24004138 	.word	0x24004138
 8007220:	24004150 	.word	0x24004150
 8007224:	2400411c 	.word	0x2400411c
 8007228:	24004120 	.word	0x24004120

0800722c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007232:	e019      	b.n	8007268 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007234:	f7ff faa8 	bl	8006788 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007238:	4b10      	ldr	r3, [pc, #64]	@ (800727c <prvCheckTasksWaitingTermination+0x50>)
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3304      	adds	r3, #4
 8007244:	4618      	mov	r0, r3
 8007246:	f7ff f941 	bl	80064cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800724a:	4b0d      	ldr	r3, [pc, #52]	@ (8007280 <prvCheckTasksWaitingTermination+0x54>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3b01      	subs	r3, #1
 8007250:	4a0b      	ldr	r2, [pc, #44]	@ (8007280 <prvCheckTasksWaitingTermination+0x54>)
 8007252:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007254:	4b0b      	ldr	r3, [pc, #44]	@ (8007284 <prvCheckTasksWaitingTermination+0x58>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	3b01      	subs	r3, #1
 800725a:	4a0a      	ldr	r2, [pc, #40]	@ (8007284 <prvCheckTasksWaitingTermination+0x58>)
 800725c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800725e:	f7ff fac5 	bl	80067ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f810 	bl	8007288 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007268:	4b06      	ldr	r3, [pc, #24]	@ (8007284 <prvCheckTasksWaitingTermination+0x58>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1e1      	bne.n	8007234 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007270:	bf00      	nop
 8007272:	bf00      	nop
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	24004138 	.word	0x24004138
 8007280:	24004164 	.word	0x24004164
 8007284:	2400414c 	.word	0x2400414c

08007288 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	334c      	adds	r3, #76	@ 0x4c
 8007294:	4618      	mov	r0, r3
 8007296:	f000 fb8b 	bl	80079b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d108      	bne.n	80072b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fe ff65 	bl	8006178 <vPortFree>
				vPortFree( pxTCB );
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7fe ff62 	bl	8006178 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072b4:	e019      	b.n	80072ea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d103      	bne.n	80072c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7fe ff59 	bl	8006178 <vPortFree>
	}
 80072c6:	e010      	b.n	80072ea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d00b      	beq.n	80072ea <prvDeleteTCB+0x62>
	__asm volatile
 80072d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	60fb      	str	r3, [r7, #12]
}
 80072e4:	bf00      	nop
 80072e6:	bf00      	nop
 80072e8:	e7fd      	b.n	80072e6 <prvDeleteTCB+0x5e>
	}
 80072ea:	bf00      	nop
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
	...

080072f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072fa:	4b0c      	ldr	r3, [pc, #48]	@ (800732c <prvResetNextTaskUnblockTime+0x38>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d104      	bne.n	800730e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007304:	4b0a      	ldr	r3, [pc, #40]	@ (8007330 <prvResetNextTaskUnblockTime+0x3c>)
 8007306:	f04f 32ff 	mov.w	r2, #4294967295
 800730a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800730c:	e008      	b.n	8007320 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800730e:	4b07      	ldr	r3, [pc, #28]	@ (800732c <prvResetNextTaskUnblockTime+0x38>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	4a04      	ldr	r2, [pc, #16]	@ (8007330 <prvResetNextTaskUnblockTime+0x3c>)
 800731e:	6013      	str	r3, [r2, #0]
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	2400411c 	.word	0x2400411c
 8007330:	24004184 	.word	0x24004184

08007334 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800733e:	4b29      	ldr	r3, [pc, #164]	@ (80073e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007344:	4b28      	ldr	r3, [pc, #160]	@ (80073e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3304      	adds	r3, #4
 800734a:	4618      	mov	r0, r3
 800734c:	f7ff f8be 	bl	80064cc <uxListRemove>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10b      	bne.n	800736e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007356:	4b24      	ldr	r3, [pc, #144]	@ (80073e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735c:	2201      	movs	r2, #1
 800735e:	fa02 f303 	lsl.w	r3, r2, r3
 8007362:	43da      	mvns	r2, r3
 8007364:	4b21      	ldr	r3, [pc, #132]	@ (80073ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4013      	ands	r3, r2
 800736a:	4a20      	ldr	r2, [pc, #128]	@ (80073ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800736c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007374:	d10a      	bne.n	800738c <prvAddCurrentTaskToDelayedList+0x58>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d007      	beq.n	800738c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800737c:	4b1a      	ldr	r3, [pc, #104]	@ (80073e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	3304      	adds	r3, #4
 8007382:	4619      	mov	r1, r3
 8007384:	481a      	ldr	r0, [pc, #104]	@ (80073f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007386:	f7ff f844 	bl	8006412 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800738a:	e026      	b.n	80073da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4413      	add	r3, r2
 8007392:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007394:	4b14      	ldr	r3, [pc, #80]	@ (80073e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d209      	bcs.n	80073b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073a4:	4b13      	ldr	r3, [pc, #76]	@ (80073f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	4b0f      	ldr	r3, [pc, #60]	@ (80073e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3304      	adds	r3, #4
 80073ae:	4619      	mov	r1, r3
 80073b0:	4610      	mov	r0, r2
 80073b2:	f7ff f852 	bl	800645a <vListInsert>
}
 80073b6:	e010      	b.n	80073da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073b8:	4b0f      	ldr	r3, [pc, #60]	@ (80073f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	4b0a      	ldr	r3, [pc, #40]	@ (80073e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3304      	adds	r3, #4
 80073c2:	4619      	mov	r1, r3
 80073c4:	4610      	mov	r0, r2
 80073c6:	f7ff f848 	bl	800645a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80073ca:	4b0c      	ldr	r3, [pc, #48]	@ (80073fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d202      	bcs.n	80073da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80073d4:	4a09      	ldr	r2, [pc, #36]	@ (80073fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	6013      	str	r3, [r2, #0]
}
 80073da:	bf00      	nop
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	24004168 	.word	0x24004168
 80073e8:	24004064 	.word	0x24004064
 80073ec:	2400416c 	.word	0x2400416c
 80073f0:	24004150 	.word	0x24004150
 80073f4:	24004120 	.word	0x24004120
 80073f8:	2400411c 	.word	0x2400411c
 80073fc:	24004184 	.word	0x24004184

08007400 <malloc>:
 8007400:	4b02      	ldr	r3, [pc, #8]	@ (800740c <malloc+0xc>)
 8007402:	4601      	mov	r1, r0
 8007404:	6818      	ldr	r0, [r3, #0]
 8007406:	f000 b825 	b.w	8007454 <_malloc_r>
 800740a:	bf00      	nop
 800740c:	24000024 	.word	0x24000024

08007410 <sbrk_aligned>:
 8007410:	b570      	push	{r4, r5, r6, lr}
 8007412:	4e0f      	ldr	r6, [pc, #60]	@ (8007450 <sbrk_aligned+0x40>)
 8007414:	460c      	mov	r4, r1
 8007416:	6831      	ldr	r1, [r6, #0]
 8007418:	4605      	mov	r5, r0
 800741a:	b911      	cbnz	r1, 8007422 <sbrk_aligned+0x12>
 800741c:	f000 fb42 	bl	8007aa4 <_sbrk_r>
 8007420:	6030      	str	r0, [r6, #0]
 8007422:	4621      	mov	r1, r4
 8007424:	4628      	mov	r0, r5
 8007426:	f000 fb3d 	bl	8007aa4 <_sbrk_r>
 800742a:	1c43      	adds	r3, r0, #1
 800742c:	d103      	bne.n	8007436 <sbrk_aligned+0x26>
 800742e:	f04f 34ff 	mov.w	r4, #4294967295
 8007432:	4620      	mov	r0, r4
 8007434:	bd70      	pop	{r4, r5, r6, pc}
 8007436:	1cc4      	adds	r4, r0, #3
 8007438:	f024 0403 	bic.w	r4, r4, #3
 800743c:	42a0      	cmp	r0, r4
 800743e:	d0f8      	beq.n	8007432 <sbrk_aligned+0x22>
 8007440:	1a21      	subs	r1, r4, r0
 8007442:	4628      	mov	r0, r5
 8007444:	f000 fb2e 	bl	8007aa4 <_sbrk_r>
 8007448:	3001      	adds	r0, #1
 800744a:	d1f2      	bne.n	8007432 <sbrk_aligned+0x22>
 800744c:	e7ef      	b.n	800742e <sbrk_aligned+0x1e>
 800744e:	bf00      	nop
 8007450:	24004190 	.word	0x24004190

08007454 <_malloc_r>:
 8007454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007458:	1ccd      	adds	r5, r1, #3
 800745a:	f025 0503 	bic.w	r5, r5, #3
 800745e:	3508      	adds	r5, #8
 8007460:	2d0c      	cmp	r5, #12
 8007462:	bf38      	it	cc
 8007464:	250c      	movcc	r5, #12
 8007466:	2d00      	cmp	r5, #0
 8007468:	4606      	mov	r6, r0
 800746a:	db01      	blt.n	8007470 <_malloc_r+0x1c>
 800746c:	42a9      	cmp	r1, r5
 800746e:	d904      	bls.n	800747a <_malloc_r+0x26>
 8007470:	230c      	movs	r3, #12
 8007472:	6033      	str	r3, [r6, #0]
 8007474:	2000      	movs	r0, #0
 8007476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800747a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007550 <_malloc_r+0xfc>
 800747e:	f000 f869 	bl	8007554 <__malloc_lock>
 8007482:	f8d8 3000 	ldr.w	r3, [r8]
 8007486:	461c      	mov	r4, r3
 8007488:	bb44      	cbnz	r4, 80074dc <_malloc_r+0x88>
 800748a:	4629      	mov	r1, r5
 800748c:	4630      	mov	r0, r6
 800748e:	f7ff ffbf 	bl	8007410 <sbrk_aligned>
 8007492:	1c43      	adds	r3, r0, #1
 8007494:	4604      	mov	r4, r0
 8007496:	d158      	bne.n	800754a <_malloc_r+0xf6>
 8007498:	f8d8 4000 	ldr.w	r4, [r8]
 800749c:	4627      	mov	r7, r4
 800749e:	2f00      	cmp	r7, #0
 80074a0:	d143      	bne.n	800752a <_malloc_r+0xd6>
 80074a2:	2c00      	cmp	r4, #0
 80074a4:	d04b      	beq.n	800753e <_malloc_r+0xea>
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	4639      	mov	r1, r7
 80074aa:	4630      	mov	r0, r6
 80074ac:	eb04 0903 	add.w	r9, r4, r3
 80074b0:	f000 faf8 	bl	8007aa4 <_sbrk_r>
 80074b4:	4581      	cmp	r9, r0
 80074b6:	d142      	bne.n	800753e <_malloc_r+0xea>
 80074b8:	6821      	ldr	r1, [r4, #0]
 80074ba:	1a6d      	subs	r5, r5, r1
 80074bc:	4629      	mov	r1, r5
 80074be:	4630      	mov	r0, r6
 80074c0:	f7ff ffa6 	bl	8007410 <sbrk_aligned>
 80074c4:	3001      	adds	r0, #1
 80074c6:	d03a      	beq.n	800753e <_malloc_r+0xea>
 80074c8:	6823      	ldr	r3, [r4, #0]
 80074ca:	442b      	add	r3, r5
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	f8d8 3000 	ldr.w	r3, [r8]
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	bb62      	cbnz	r2, 8007530 <_malloc_r+0xdc>
 80074d6:	f8c8 7000 	str.w	r7, [r8]
 80074da:	e00f      	b.n	80074fc <_malloc_r+0xa8>
 80074dc:	6822      	ldr	r2, [r4, #0]
 80074de:	1b52      	subs	r2, r2, r5
 80074e0:	d420      	bmi.n	8007524 <_malloc_r+0xd0>
 80074e2:	2a0b      	cmp	r2, #11
 80074e4:	d917      	bls.n	8007516 <_malloc_r+0xc2>
 80074e6:	1961      	adds	r1, r4, r5
 80074e8:	42a3      	cmp	r3, r4
 80074ea:	6025      	str	r5, [r4, #0]
 80074ec:	bf18      	it	ne
 80074ee:	6059      	strne	r1, [r3, #4]
 80074f0:	6863      	ldr	r3, [r4, #4]
 80074f2:	bf08      	it	eq
 80074f4:	f8c8 1000 	streq.w	r1, [r8]
 80074f8:	5162      	str	r2, [r4, r5]
 80074fa:	604b      	str	r3, [r1, #4]
 80074fc:	4630      	mov	r0, r6
 80074fe:	f000 f82f 	bl	8007560 <__malloc_unlock>
 8007502:	f104 000b 	add.w	r0, r4, #11
 8007506:	1d23      	adds	r3, r4, #4
 8007508:	f020 0007 	bic.w	r0, r0, #7
 800750c:	1ac2      	subs	r2, r0, r3
 800750e:	bf1c      	itt	ne
 8007510:	1a1b      	subne	r3, r3, r0
 8007512:	50a3      	strne	r3, [r4, r2]
 8007514:	e7af      	b.n	8007476 <_malloc_r+0x22>
 8007516:	6862      	ldr	r2, [r4, #4]
 8007518:	42a3      	cmp	r3, r4
 800751a:	bf0c      	ite	eq
 800751c:	f8c8 2000 	streq.w	r2, [r8]
 8007520:	605a      	strne	r2, [r3, #4]
 8007522:	e7eb      	b.n	80074fc <_malloc_r+0xa8>
 8007524:	4623      	mov	r3, r4
 8007526:	6864      	ldr	r4, [r4, #4]
 8007528:	e7ae      	b.n	8007488 <_malloc_r+0x34>
 800752a:	463c      	mov	r4, r7
 800752c:	687f      	ldr	r7, [r7, #4]
 800752e:	e7b6      	b.n	800749e <_malloc_r+0x4a>
 8007530:	461a      	mov	r2, r3
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	42a3      	cmp	r3, r4
 8007536:	d1fb      	bne.n	8007530 <_malloc_r+0xdc>
 8007538:	2300      	movs	r3, #0
 800753a:	6053      	str	r3, [r2, #4]
 800753c:	e7de      	b.n	80074fc <_malloc_r+0xa8>
 800753e:	230c      	movs	r3, #12
 8007540:	6033      	str	r3, [r6, #0]
 8007542:	4630      	mov	r0, r6
 8007544:	f000 f80c 	bl	8007560 <__malloc_unlock>
 8007548:	e794      	b.n	8007474 <_malloc_r+0x20>
 800754a:	6005      	str	r5, [r0, #0]
 800754c:	e7d6      	b.n	80074fc <_malloc_r+0xa8>
 800754e:	bf00      	nop
 8007550:	24004194 	.word	0x24004194

08007554 <__malloc_lock>:
 8007554:	4801      	ldr	r0, [pc, #4]	@ (800755c <__malloc_lock+0x8>)
 8007556:	f7f9 bddf 	b.w	8001118 <__retarget_lock_acquire_recursive>
 800755a:	bf00      	nop
 800755c:	2400042c 	.word	0x2400042c

08007560 <__malloc_unlock>:
 8007560:	4801      	ldr	r0, [pc, #4]	@ (8007568 <__malloc_unlock+0x8>)
 8007562:	f7f9 bdee 	b.w	8001142 <__retarget_lock_release_recursive>
 8007566:	bf00      	nop
 8007568:	2400042c 	.word	0x2400042c

0800756c <std>:
 800756c:	2300      	movs	r3, #0
 800756e:	b510      	push	{r4, lr}
 8007570:	4604      	mov	r4, r0
 8007572:	e9c0 3300 	strd	r3, r3, [r0]
 8007576:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800757a:	6083      	str	r3, [r0, #8]
 800757c:	8181      	strh	r1, [r0, #12]
 800757e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007580:	81c2      	strh	r2, [r0, #14]
 8007582:	6183      	str	r3, [r0, #24]
 8007584:	4619      	mov	r1, r3
 8007586:	2208      	movs	r2, #8
 8007588:	305c      	adds	r0, #92	@ 0x5c
 800758a:	f000 f9f9 	bl	8007980 <memset>
 800758e:	4b0d      	ldr	r3, [pc, #52]	@ (80075c4 <std+0x58>)
 8007590:	6263      	str	r3, [r4, #36]	@ 0x24
 8007592:	4b0d      	ldr	r3, [pc, #52]	@ (80075c8 <std+0x5c>)
 8007594:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007596:	4b0d      	ldr	r3, [pc, #52]	@ (80075cc <std+0x60>)
 8007598:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800759a:	4b0d      	ldr	r3, [pc, #52]	@ (80075d0 <std+0x64>)
 800759c:	6323      	str	r3, [r4, #48]	@ 0x30
 800759e:	4b0d      	ldr	r3, [pc, #52]	@ (80075d4 <std+0x68>)
 80075a0:	6224      	str	r4, [r4, #32]
 80075a2:	429c      	cmp	r4, r3
 80075a4:	d006      	beq.n	80075b4 <std+0x48>
 80075a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80075aa:	4294      	cmp	r4, r2
 80075ac:	d002      	beq.n	80075b4 <std+0x48>
 80075ae:	33d0      	adds	r3, #208	@ 0xd0
 80075b0:	429c      	cmp	r4, r3
 80075b2:	d105      	bne.n	80075c0 <std+0x54>
 80075b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80075b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075bc:	f7f9 bd85 	b.w	80010ca <__retarget_lock_init_recursive>
 80075c0:	bd10      	pop	{r4, pc}
 80075c2:	bf00      	nop
 80075c4:	080077d1 	.word	0x080077d1
 80075c8:	080077f3 	.word	0x080077f3
 80075cc:	0800782b 	.word	0x0800782b
 80075d0:	0800784f 	.word	0x0800784f
 80075d4:	24004198 	.word	0x24004198

080075d8 <stdio_exit_handler>:
 80075d8:	4a02      	ldr	r2, [pc, #8]	@ (80075e4 <stdio_exit_handler+0xc>)
 80075da:	4903      	ldr	r1, [pc, #12]	@ (80075e8 <stdio_exit_handler+0x10>)
 80075dc:	4803      	ldr	r0, [pc, #12]	@ (80075ec <stdio_exit_handler+0x14>)
 80075de:	f000 b869 	b.w	80076b4 <_fwalk_sglue>
 80075e2:	bf00      	nop
 80075e4:	24000018 	.word	0x24000018
 80075e8:	08008279 	.word	0x08008279
 80075ec:	24000028 	.word	0x24000028

080075f0 <cleanup_stdio>:
 80075f0:	6841      	ldr	r1, [r0, #4]
 80075f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007624 <cleanup_stdio+0x34>)
 80075f4:	4299      	cmp	r1, r3
 80075f6:	b510      	push	{r4, lr}
 80075f8:	4604      	mov	r4, r0
 80075fa:	d001      	beq.n	8007600 <cleanup_stdio+0x10>
 80075fc:	f000 fe3c 	bl	8008278 <_fflush_r>
 8007600:	68a1      	ldr	r1, [r4, #8]
 8007602:	4b09      	ldr	r3, [pc, #36]	@ (8007628 <cleanup_stdio+0x38>)
 8007604:	4299      	cmp	r1, r3
 8007606:	d002      	beq.n	800760e <cleanup_stdio+0x1e>
 8007608:	4620      	mov	r0, r4
 800760a:	f000 fe35 	bl	8008278 <_fflush_r>
 800760e:	68e1      	ldr	r1, [r4, #12]
 8007610:	4b06      	ldr	r3, [pc, #24]	@ (800762c <cleanup_stdio+0x3c>)
 8007612:	4299      	cmp	r1, r3
 8007614:	d004      	beq.n	8007620 <cleanup_stdio+0x30>
 8007616:	4620      	mov	r0, r4
 8007618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800761c:	f000 be2c 	b.w	8008278 <_fflush_r>
 8007620:	bd10      	pop	{r4, pc}
 8007622:	bf00      	nop
 8007624:	24004198 	.word	0x24004198
 8007628:	24004200 	.word	0x24004200
 800762c:	24004268 	.word	0x24004268

08007630 <global_stdio_init.part.0>:
 8007630:	b510      	push	{r4, lr}
 8007632:	4b0b      	ldr	r3, [pc, #44]	@ (8007660 <global_stdio_init.part.0+0x30>)
 8007634:	4c0b      	ldr	r4, [pc, #44]	@ (8007664 <global_stdio_init.part.0+0x34>)
 8007636:	4a0c      	ldr	r2, [pc, #48]	@ (8007668 <global_stdio_init.part.0+0x38>)
 8007638:	601a      	str	r2, [r3, #0]
 800763a:	4620      	mov	r0, r4
 800763c:	2200      	movs	r2, #0
 800763e:	2104      	movs	r1, #4
 8007640:	f7ff ff94 	bl	800756c <std>
 8007644:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007648:	2201      	movs	r2, #1
 800764a:	2109      	movs	r1, #9
 800764c:	f7ff ff8e 	bl	800756c <std>
 8007650:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007654:	2202      	movs	r2, #2
 8007656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800765a:	2112      	movs	r1, #18
 800765c:	f7ff bf86 	b.w	800756c <std>
 8007660:	240042d0 	.word	0x240042d0
 8007664:	24004198 	.word	0x24004198
 8007668:	080075d9 	.word	0x080075d9

0800766c <__sfp_lock_acquire>:
 800766c:	4801      	ldr	r0, [pc, #4]	@ (8007674 <__sfp_lock_acquire+0x8>)
 800766e:	f7f9 bd53 	b.w	8001118 <__retarget_lock_acquire_recursive>
 8007672:	bf00      	nop
 8007674:	24000420 	.word	0x24000420

08007678 <__sfp_lock_release>:
 8007678:	4801      	ldr	r0, [pc, #4]	@ (8007680 <__sfp_lock_release+0x8>)
 800767a:	f7f9 bd62 	b.w	8001142 <__retarget_lock_release_recursive>
 800767e:	bf00      	nop
 8007680:	24000420 	.word	0x24000420

08007684 <__sinit>:
 8007684:	b510      	push	{r4, lr}
 8007686:	4604      	mov	r4, r0
 8007688:	f7ff fff0 	bl	800766c <__sfp_lock_acquire>
 800768c:	6a23      	ldr	r3, [r4, #32]
 800768e:	b11b      	cbz	r3, 8007698 <__sinit+0x14>
 8007690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007694:	f7ff bff0 	b.w	8007678 <__sfp_lock_release>
 8007698:	4b04      	ldr	r3, [pc, #16]	@ (80076ac <__sinit+0x28>)
 800769a:	6223      	str	r3, [r4, #32]
 800769c:	4b04      	ldr	r3, [pc, #16]	@ (80076b0 <__sinit+0x2c>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1f5      	bne.n	8007690 <__sinit+0xc>
 80076a4:	f7ff ffc4 	bl	8007630 <global_stdio_init.part.0>
 80076a8:	e7f2      	b.n	8007690 <__sinit+0xc>
 80076aa:	bf00      	nop
 80076ac:	080075f1 	.word	0x080075f1
 80076b0:	240042d0 	.word	0x240042d0

080076b4 <_fwalk_sglue>:
 80076b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076b8:	4607      	mov	r7, r0
 80076ba:	4688      	mov	r8, r1
 80076bc:	4614      	mov	r4, r2
 80076be:	2600      	movs	r6, #0
 80076c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076c4:	f1b9 0901 	subs.w	r9, r9, #1
 80076c8:	d505      	bpl.n	80076d6 <_fwalk_sglue+0x22>
 80076ca:	6824      	ldr	r4, [r4, #0]
 80076cc:	2c00      	cmp	r4, #0
 80076ce:	d1f7      	bne.n	80076c0 <_fwalk_sglue+0xc>
 80076d0:	4630      	mov	r0, r6
 80076d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076d6:	89ab      	ldrh	r3, [r5, #12]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d907      	bls.n	80076ec <_fwalk_sglue+0x38>
 80076dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076e0:	3301      	adds	r3, #1
 80076e2:	d003      	beq.n	80076ec <_fwalk_sglue+0x38>
 80076e4:	4629      	mov	r1, r5
 80076e6:	4638      	mov	r0, r7
 80076e8:	47c0      	blx	r8
 80076ea:	4306      	orrs	r6, r0
 80076ec:	3568      	adds	r5, #104	@ 0x68
 80076ee:	e7e9      	b.n	80076c4 <_fwalk_sglue+0x10>

080076f0 <iprintf>:
 80076f0:	b40f      	push	{r0, r1, r2, r3}
 80076f2:	b507      	push	{r0, r1, r2, lr}
 80076f4:	4906      	ldr	r1, [pc, #24]	@ (8007710 <iprintf+0x20>)
 80076f6:	ab04      	add	r3, sp, #16
 80076f8:	6808      	ldr	r0, [r1, #0]
 80076fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80076fe:	6881      	ldr	r1, [r0, #8]
 8007700:	9301      	str	r3, [sp, #4]
 8007702:	f000 fa8f 	bl	8007c24 <_vfiprintf_r>
 8007706:	b003      	add	sp, #12
 8007708:	f85d eb04 	ldr.w	lr, [sp], #4
 800770c:	b004      	add	sp, #16
 800770e:	4770      	bx	lr
 8007710:	24000024 	.word	0x24000024

08007714 <_puts_r>:
 8007714:	6a03      	ldr	r3, [r0, #32]
 8007716:	b570      	push	{r4, r5, r6, lr}
 8007718:	6884      	ldr	r4, [r0, #8]
 800771a:	4605      	mov	r5, r0
 800771c:	460e      	mov	r6, r1
 800771e:	b90b      	cbnz	r3, 8007724 <_puts_r+0x10>
 8007720:	f7ff ffb0 	bl	8007684 <__sinit>
 8007724:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007726:	07db      	lsls	r3, r3, #31
 8007728:	d405      	bmi.n	8007736 <_puts_r+0x22>
 800772a:	89a3      	ldrh	r3, [r4, #12]
 800772c:	0598      	lsls	r0, r3, #22
 800772e:	d402      	bmi.n	8007736 <_puts_r+0x22>
 8007730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007732:	f7f9 fcf1 	bl	8001118 <__retarget_lock_acquire_recursive>
 8007736:	89a3      	ldrh	r3, [r4, #12]
 8007738:	0719      	lsls	r1, r3, #28
 800773a:	d502      	bpl.n	8007742 <_puts_r+0x2e>
 800773c:	6923      	ldr	r3, [r4, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d135      	bne.n	80077ae <_puts_r+0x9a>
 8007742:	4621      	mov	r1, r4
 8007744:	4628      	mov	r0, r5
 8007746:	f000 f8c5 	bl	80078d4 <__swsetup_r>
 800774a:	b380      	cbz	r0, 80077ae <_puts_r+0x9a>
 800774c:	f04f 35ff 	mov.w	r5, #4294967295
 8007750:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007752:	07da      	lsls	r2, r3, #31
 8007754:	d405      	bmi.n	8007762 <_puts_r+0x4e>
 8007756:	89a3      	ldrh	r3, [r4, #12]
 8007758:	059b      	lsls	r3, r3, #22
 800775a:	d402      	bmi.n	8007762 <_puts_r+0x4e>
 800775c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800775e:	f7f9 fcf0 	bl	8001142 <__retarget_lock_release_recursive>
 8007762:	4628      	mov	r0, r5
 8007764:	bd70      	pop	{r4, r5, r6, pc}
 8007766:	2b00      	cmp	r3, #0
 8007768:	da04      	bge.n	8007774 <_puts_r+0x60>
 800776a:	69a2      	ldr	r2, [r4, #24]
 800776c:	429a      	cmp	r2, r3
 800776e:	dc17      	bgt.n	80077a0 <_puts_r+0x8c>
 8007770:	290a      	cmp	r1, #10
 8007772:	d015      	beq.n	80077a0 <_puts_r+0x8c>
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	6022      	str	r2, [r4, #0]
 800777a:	7019      	strb	r1, [r3, #0]
 800777c:	68a3      	ldr	r3, [r4, #8]
 800777e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007782:	3b01      	subs	r3, #1
 8007784:	60a3      	str	r3, [r4, #8]
 8007786:	2900      	cmp	r1, #0
 8007788:	d1ed      	bne.n	8007766 <_puts_r+0x52>
 800778a:	2b00      	cmp	r3, #0
 800778c:	da11      	bge.n	80077b2 <_puts_r+0x9e>
 800778e:	4622      	mov	r2, r4
 8007790:	210a      	movs	r1, #10
 8007792:	4628      	mov	r0, r5
 8007794:	f000 f85f 	bl	8007856 <__swbuf_r>
 8007798:	3001      	adds	r0, #1
 800779a:	d0d7      	beq.n	800774c <_puts_r+0x38>
 800779c:	250a      	movs	r5, #10
 800779e:	e7d7      	b.n	8007750 <_puts_r+0x3c>
 80077a0:	4622      	mov	r2, r4
 80077a2:	4628      	mov	r0, r5
 80077a4:	f000 f857 	bl	8007856 <__swbuf_r>
 80077a8:	3001      	adds	r0, #1
 80077aa:	d1e7      	bne.n	800777c <_puts_r+0x68>
 80077ac:	e7ce      	b.n	800774c <_puts_r+0x38>
 80077ae:	3e01      	subs	r6, #1
 80077b0:	e7e4      	b.n	800777c <_puts_r+0x68>
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	1c5a      	adds	r2, r3, #1
 80077b6:	6022      	str	r2, [r4, #0]
 80077b8:	220a      	movs	r2, #10
 80077ba:	701a      	strb	r2, [r3, #0]
 80077bc:	e7ee      	b.n	800779c <_puts_r+0x88>
	...

080077c0 <puts>:
 80077c0:	4b02      	ldr	r3, [pc, #8]	@ (80077cc <puts+0xc>)
 80077c2:	4601      	mov	r1, r0
 80077c4:	6818      	ldr	r0, [r3, #0]
 80077c6:	f7ff bfa5 	b.w	8007714 <_puts_r>
 80077ca:	bf00      	nop
 80077cc:	24000024 	.word	0x24000024

080077d0 <__sread>:
 80077d0:	b510      	push	{r4, lr}
 80077d2:	460c      	mov	r4, r1
 80077d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077d8:	f000 f952 	bl	8007a80 <_read_r>
 80077dc:	2800      	cmp	r0, #0
 80077de:	bfab      	itete	ge
 80077e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80077e2:	89a3      	ldrhlt	r3, [r4, #12]
 80077e4:	181b      	addge	r3, r3, r0
 80077e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80077ea:	bfac      	ite	ge
 80077ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80077ee:	81a3      	strhlt	r3, [r4, #12]
 80077f0:	bd10      	pop	{r4, pc}

080077f2 <__swrite>:
 80077f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077f6:	461f      	mov	r7, r3
 80077f8:	898b      	ldrh	r3, [r1, #12]
 80077fa:	05db      	lsls	r3, r3, #23
 80077fc:	4605      	mov	r5, r0
 80077fe:	460c      	mov	r4, r1
 8007800:	4616      	mov	r6, r2
 8007802:	d505      	bpl.n	8007810 <__swrite+0x1e>
 8007804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007808:	2302      	movs	r3, #2
 800780a:	2200      	movs	r2, #0
 800780c:	f000 f926 	bl	8007a5c <_lseek_r>
 8007810:	89a3      	ldrh	r3, [r4, #12]
 8007812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007816:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800781a:	81a3      	strh	r3, [r4, #12]
 800781c:	4632      	mov	r2, r6
 800781e:	463b      	mov	r3, r7
 8007820:	4628      	mov	r0, r5
 8007822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007826:	f000 b94d 	b.w	8007ac4 <_write_r>

0800782a <__sseek>:
 800782a:	b510      	push	{r4, lr}
 800782c:	460c      	mov	r4, r1
 800782e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007832:	f000 f913 	bl	8007a5c <_lseek_r>
 8007836:	1c43      	adds	r3, r0, #1
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	bf15      	itete	ne
 800783c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800783e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007842:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007846:	81a3      	strheq	r3, [r4, #12]
 8007848:	bf18      	it	ne
 800784a:	81a3      	strhne	r3, [r4, #12]
 800784c:	bd10      	pop	{r4, pc}

0800784e <__sclose>:
 800784e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007852:	f000 b89d 	b.w	8007990 <_close_r>

08007856 <__swbuf_r>:
 8007856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007858:	460e      	mov	r6, r1
 800785a:	4614      	mov	r4, r2
 800785c:	4605      	mov	r5, r0
 800785e:	b118      	cbz	r0, 8007868 <__swbuf_r+0x12>
 8007860:	6a03      	ldr	r3, [r0, #32]
 8007862:	b90b      	cbnz	r3, 8007868 <__swbuf_r+0x12>
 8007864:	f7ff ff0e 	bl	8007684 <__sinit>
 8007868:	69a3      	ldr	r3, [r4, #24]
 800786a:	60a3      	str	r3, [r4, #8]
 800786c:	89a3      	ldrh	r3, [r4, #12]
 800786e:	071a      	lsls	r2, r3, #28
 8007870:	d501      	bpl.n	8007876 <__swbuf_r+0x20>
 8007872:	6923      	ldr	r3, [r4, #16]
 8007874:	b943      	cbnz	r3, 8007888 <__swbuf_r+0x32>
 8007876:	4621      	mov	r1, r4
 8007878:	4628      	mov	r0, r5
 800787a:	f000 f82b 	bl	80078d4 <__swsetup_r>
 800787e:	b118      	cbz	r0, 8007888 <__swbuf_r+0x32>
 8007880:	f04f 37ff 	mov.w	r7, #4294967295
 8007884:	4638      	mov	r0, r7
 8007886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007888:	6823      	ldr	r3, [r4, #0]
 800788a:	6922      	ldr	r2, [r4, #16]
 800788c:	1a98      	subs	r0, r3, r2
 800788e:	6963      	ldr	r3, [r4, #20]
 8007890:	b2f6      	uxtb	r6, r6
 8007892:	4283      	cmp	r3, r0
 8007894:	4637      	mov	r7, r6
 8007896:	dc05      	bgt.n	80078a4 <__swbuf_r+0x4e>
 8007898:	4621      	mov	r1, r4
 800789a:	4628      	mov	r0, r5
 800789c:	f000 fcec 	bl	8008278 <_fflush_r>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d1ed      	bne.n	8007880 <__swbuf_r+0x2a>
 80078a4:	68a3      	ldr	r3, [r4, #8]
 80078a6:	3b01      	subs	r3, #1
 80078a8:	60a3      	str	r3, [r4, #8]
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	1c5a      	adds	r2, r3, #1
 80078ae:	6022      	str	r2, [r4, #0]
 80078b0:	701e      	strb	r6, [r3, #0]
 80078b2:	6962      	ldr	r2, [r4, #20]
 80078b4:	1c43      	adds	r3, r0, #1
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d004      	beq.n	80078c4 <__swbuf_r+0x6e>
 80078ba:	89a3      	ldrh	r3, [r4, #12]
 80078bc:	07db      	lsls	r3, r3, #31
 80078be:	d5e1      	bpl.n	8007884 <__swbuf_r+0x2e>
 80078c0:	2e0a      	cmp	r6, #10
 80078c2:	d1df      	bne.n	8007884 <__swbuf_r+0x2e>
 80078c4:	4621      	mov	r1, r4
 80078c6:	4628      	mov	r0, r5
 80078c8:	f000 fcd6 	bl	8008278 <_fflush_r>
 80078cc:	2800      	cmp	r0, #0
 80078ce:	d0d9      	beq.n	8007884 <__swbuf_r+0x2e>
 80078d0:	e7d6      	b.n	8007880 <__swbuf_r+0x2a>
	...

080078d4 <__swsetup_r>:
 80078d4:	b538      	push	{r3, r4, r5, lr}
 80078d6:	4b29      	ldr	r3, [pc, #164]	@ (800797c <__swsetup_r+0xa8>)
 80078d8:	4605      	mov	r5, r0
 80078da:	6818      	ldr	r0, [r3, #0]
 80078dc:	460c      	mov	r4, r1
 80078de:	b118      	cbz	r0, 80078e8 <__swsetup_r+0x14>
 80078e0:	6a03      	ldr	r3, [r0, #32]
 80078e2:	b90b      	cbnz	r3, 80078e8 <__swsetup_r+0x14>
 80078e4:	f7ff fece 	bl	8007684 <__sinit>
 80078e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078ec:	0719      	lsls	r1, r3, #28
 80078ee:	d422      	bmi.n	8007936 <__swsetup_r+0x62>
 80078f0:	06da      	lsls	r2, r3, #27
 80078f2:	d407      	bmi.n	8007904 <__swsetup_r+0x30>
 80078f4:	2209      	movs	r2, #9
 80078f6:	602a      	str	r2, [r5, #0]
 80078f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078fc:	81a3      	strh	r3, [r4, #12]
 80078fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007902:	e033      	b.n	800796c <__swsetup_r+0x98>
 8007904:	0758      	lsls	r0, r3, #29
 8007906:	d512      	bpl.n	800792e <__swsetup_r+0x5a>
 8007908:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800790a:	b141      	cbz	r1, 800791e <__swsetup_r+0x4a>
 800790c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007910:	4299      	cmp	r1, r3
 8007912:	d002      	beq.n	800791a <__swsetup_r+0x46>
 8007914:	4628      	mov	r0, r5
 8007916:	f000 f911 	bl	8007b3c <_free_r>
 800791a:	2300      	movs	r3, #0
 800791c:	6363      	str	r3, [r4, #52]	@ 0x34
 800791e:	89a3      	ldrh	r3, [r4, #12]
 8007920:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007924:	81a3      	strh	r3, [r4, #12]
 8007926:	2300      	movs	r3, #0
 8007928:	6063      	str	r3, [r4, #4]
 800792a:	6923      	ldr	r3, [r4, #16]
 800792c:	6023      	str	r3, [r4, #0]
 800792e:	89a3      	ldrh	r3, [r4, #12]
 8007930:	f043 0308 	orr.w	r3, r3, #8
 8007934:	81a3      	strh	r3, [r4, #12]
 8007936:	6923      	ldr	r3, [r4, #16]
 8007938:	b94b      	cbnz	r3, 800794e <__swsetup_r+0x7a>
 800793a:	89a3      	ldrh	r3, [r4, #12]
 800793c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007944:	d003      	beq.n	800794e <__swsetup_r+0x7a>
 8007946:	4621      	mov	r1, r4
 8007948:	4628      	mov	r0, r5
 800794a:	f000 fce3 	bl	8008314 <__smakebuf_r>
 800794e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007952:	f013 0201 	ands.w	r2, r3, #1
 8007956:	d00a      	beq.n	800796e <__swsetup_r+0x9a>
 8007958:	2200      	movs	r2, #0
 800795a:	60a2      	str	r2, [r4, #8]
 800795c:	6962      	ldr	r2, [r4, #20]
 800795e:	4252      	negs	r2, r2
 8007960:	61a2      	str	r2, [r4, #24]
 8007962:	6922      	ldr	r2, [r4, #16]
 8007964:	b942      	cbnz	r2, 8007978 <__swsetup_r+0xa4>
 8007966:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800796a:	d1c5      	bne.n	80078f8 <__swsetup_r+0x24>
 800796c:	bd38      	pop	{r3, r4, r5, pc}
 800796e:	0799      	lsls	r1, r3, #30
 8007970:	bf58      	it	pl
 8007972:	6962      	ldrpl	r2, [r4, #20]
 8007974:	60a2      	str	r2, [r4, #8]
 8007976:	e7f4      	b.n	8007962 <__swsetup_r+0x8e>
 8007978:	2000      	movs	r0, #0
 800797a:	e7f7      	b.n	800796c <__swsetup_r+0x98>
 800797c:	24000024 	.word	0x24000024

08007980 <memset>:
 8007980:	4402      	add	r2, r0
 8007982:	4603      	mov	r3, r0
 8007984:	4293      	cmp	r3, r2
 8007986:	d100      	bne.n	800798a <memset+0xa>
 8007988:	4770      	bx	lr
 800798a:	f803 1b01 	strb.w	r1, [r3], #1
 800798e:	e7f9      	b.n	8007984 <memset+0x4>

08007990 <_close_r>:
 8007990:	b538      	push	{r3, r4, r5, lr}
 8007992:	4d06      	ldr	r5, [pc, #24]	@ (80079ac <_close_r+0x1c>)
 8007994:	2300      	movs	r3, #0
 8007996:	4604      	mov	r4, r0
 8007998:	4608      	mov	r0, r1
 800799a:	602b      	str	r3, [r5, #0]
 800799c:	f7f9 fa81 	bl	8000ea2 <_close>
 80079a0:	1c43      	adds	r3, r0, #1
 80079a2:	d102      	bne.n	80079aa <_close_r+0x1a>
 80079a4:	682b      	ldr	r3, [r5, #0]
 80079a6:	b103      	cbz	r3, 80079aa <_close_r+0x1a>
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	bd38      	pop	{r3, r4, r5, pc}
 80079ac:	240042d4 	.word	0x240042d4

080079b0 <_reclaim_reent>:
 80079b0:	4b29      	ldr	r3, [pc, #164]	@ (8007a58 <_reclaim_reent+0xa8>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4283      	cmp	r3, r0
 80079b6:	b570      	push	{r4, r5, r6, lr}
 80079b8:	4604      	mov	r4, r0
 80079ba:	d04b      	beq.n	8007a54 <_reclaim_reent+0xa4>
 80079bc:	69c3      	ldr	r3, [r0, #28]
 80079be:	b1ab      	cbz	r3, 80079ec <_reclaim_reent+0x3c>
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	b16b      	cbz	r3, 80079e0 <_reclaim_reent+0x30>
 80079c4:	2500      	movs	r5, #0
 80079c6:	69e3      	ldr	r3, [r4, #28]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	5959      	ldr	r1, [r3, r5]
 80079cc:	2900      	cmp	r1, #0
 80079ce:	d13b      	bne.n	8007a48 <_reclaim_reent+0x98>
 80079d0:	3504      	adds	r5, #4
 80079d2:	2d80      	cmp	r5, #128	@ 0x80
 80079d4:	d1f7      	bne.n	80079c6 <_reclaim_reent+0x16>
 80079d6:	69e3      	ldr	r3, [r4, #28]
 80079d8:	4620      	mov	r0, r4
 80079da:	68d9      	ldr	r1, [r3, #12]
 80079dc:	f000 f8ae 	bl	8007b3c <_free_r>
 80079e0:	69e3      	ldr	r3, [r4, #28]
 80079e2:	6819      	ldr	r1, [r3, #0]
 80079e4:	b111      	cbz	r1, 80079ec <_reclaim_reent+0x3c>
 80079e6:	4620      	mov	r0, r4
 80079e8:	f000 f8a8 	bl	8007b3c <_free_r>
 80079ec:	6961      	ldr	r1, [r4, #20]
 80079ee:	b111      	cbz	r1, 80079f6 <_reclaim_reent+0x46>
 80079f0:	4620      	mov	r0, r4
 80079f2:	f000 f8a3 	bl	8007b3c <_free_r>
 80079f6:	69e1      	ldr	r1, [r4, #28]
 80079f8:	b111      	cbz	r1, 8007a00 <_reclaim_reent+0x50>
 80079fa:	4620      	mov	r0, r4
 80079fc:	f000 f89e 	bl	8007b3c <_free_r>
 8007a00:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007a02:	b111      	cbz	r1, 8007a0a <_reclaim_reent+0x5a>
 8007a04:	4620      	mov	r0, r4
 8007a06:	f000 f899 	bl	8007b3c <_free_r>
 8007a0a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a0c:	b111      	cbz	r1, 8007a14 <_reclaim_reent+0x64>
 8007a0e:	4620      	mov	r0, r4
 8007a10:	f000 f894 	bl	8007b3c <_free_r>
 8007a14:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007a16:	b111      	cbz	r1, 8007a1e <_reclaim_reent+0x6e>
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f000 f88f 	bl	8007b3c <_free_r>
 8007a1e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007a20:	b111      	cbz	r1, 8007a28 <_reclaim_reent+0x78>
 8007a22:	4620      	mov	r0, r4
 8007a24:	f000 f88a 	bl	8007b3c <_free_r>
 8007a28:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007a2a:	b111      	cbz	r1, 8007a32 <_reclaim_reent+0x82>
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f000 f885 	bl	8007b3c <_free_r>
 8007a32:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007a34:	b111      	cbz	r1, 8007a3c <_reclaim_reent+0x8c>
 8007a36:	4620      	mov	r0, r4
 8007a38:	f000 f880 	bl	8007b3c <_free_r>
 8007a3c:	6a23      	ldr	r3, [r4, #32]
 8007a3e:	b14b      	cbz	r3, 8007a54 <_reclaim_reent+0xa4>
 8007a40:	4620      	mov	r0, r4
 8007a42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a46:	4718      	bx	r3
 8007a48:	680e      	ldr	r6, [r1, #0]
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f000 f876 	bl	8007b3c <_free_r>
 8007a50:	4631      	mov	r1, r6
 8007a52:	e7bb      	b.n	80079cc <_reclaim_reent+0x1c>
 8007a54:	bd70      	pop	{r4, r5, r6, pc}
 8007a56:	bf00      	nop
 8007a58:	24000024 	.word	0x24000024

08007a5c <_lseek_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4d07      	ldr	r5, [pc, #28]	@ (8007a7c <_lseek_r+0x20>)
 8007a60:	4604      	mov	r4, r0
 8007a62:	4608      	mov	r0, r1
 8007a64:	4611      	mov	r1, r2
 8007a66:	2200      	movs	r2, #0
 8007a68:	602a      	str	r2, [r5, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f7f9 fa40 	bl	8000ef0 <_lseek>
 8007a70:	1c43      	adds	r3, r0, #1
 8007a72:	d102      	bne.n	8007a7a <_lseek_r+0x1e>
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	b103      	cbz	r3, 8007a7a <_lseek_r+0x1e>
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	bd38      	pop	{r3, r4, r5, pc}
 8007a7c:	240042d4 	.word	0x240042d4

08007a80 <_read_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	4d07      	ldr	r5, [pc, #28]	@ (8007aa0 <_read_r+0x20>)
 8007a84:	4604      	mov	r4, r0
 8007a86:	4608      	mov	r0, r1
 8007a88:	4611      	mov	r1, r2
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	602a      	str	r2, [r5, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	f7f9 f9ce 	bl	8000e30 <_read>
 8007a94:	1c43      	adds	r3, r0, #1
 8007a96:	d102      	bne.n	8007a9e <_read_r+0x1e>
 8007a98:	682b      	ldr	r3, [r5, #0]
 8007a9a:	b103      	cbz	r3, 8007a9e <_read_r+0x1e>
 8007a9c:	6023      	str	r3, [r4, #0]
 8007a9e:	bd38      	pop	{r3, r4, r5, pc}
 8007aa0:	240042d4 	.word	0x240042d4

08007aa4 <_sbrk_r>:
 8007aa4:	b538      	push	{r3, r4, r5, lr}
 8007aa6:	4d06      	ldr	r5, [pc, #24]	@ (8007ac0 <_sbrk_r+0x1c>)
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	4604      	mov	r4, r0
 8007aac:	4608      	mov	r0, r1
 8007aae:	602b      	str	r3, [r5, #0]
 8007ab0:	f7f9 fa2c 	bl	8000f0c <_sbrk>
 8007ab4:	1c43      	adds	r3, r0, #1
 8007ab6:	d102      	bne.n	8007abe <_sbrk_r+0x1a>
 8007ab8:	682b      	ldr	r3, [r5, #0]
 8007aba:	b103      	cbz	r3, 8007abe <_sbrk_r+0x1a>
 8007abc:	6023      	str	r3, [r4, #0]
 8007abe:	bd38      	pop	{r3, r4, r5, pc}
 8007ac0:	240042d4 	.word	0x240042d4

08007ac4 <_write_r>:
 8007ac4:	b538      	push	{r3, r4, r5, lr}
 8007ac6:	4d07      	ldr	r5, [pc, #28]	@ (8007ae4 <_write_r+0x20>)
 8007ac8:	4604      	mov	r4, r0
 8007aca:	4608      	mov	r0, r1
 8007acc:	4611      	mov	r1, r2
 8007ace:	2200      	movs	r2, #0
 8007ad0:	602a      	str	r2, [r5, #0]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	f7f9 f9c9 	bl	8000e6a <_write>
 8007ad8:	1c43      	adds	r3, r0, #1
 8007ada:	d102      	bne.n	8007ae2 <_write_r+0x1e>
 8007adc:	682b      	ldr	r3, [r5, #0]
 8007ade:	b103      	cbz	r3, 8007ae2 <_write_r+0x1e>
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	bd38      	pop	{r3, r4, r5, pc}
 8007ae4:	240042d4 	.word	0x240042d4

08007ae8 <__errno>:
 8007ae8:	4b01      	ldr	r3, [pc, #4]	@ (8007af0 <__errno+0x8>)
 8007aea:	6818      	ldr	r0, [r3, #0]
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	24000024 	.word	0x24000024

08007af4 <__libc_init_array>:
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	4d0d      	ldr	r5, [pc, #52]	@ (8007b2c <__libc_init_array+0x38>)
 8007af8:	4c0d      	ldr	r4, [pc, #52]	@ (8007b30 <__libc_init_array+0x3c>)
 8007afa:	1b64      	subs	r4, r4, r5
 8007afc:	10a4      	asrs	r4, r4, #2
 8007afe:	2600      	movs	r6, #0
 8007b00:	42a6      	cmp	r6, r4
 8007b02:	d109      	bne.n	8007b18 <__libc_init_array+0x24>
 8007b04:	4d0b      	ldr	r5, [pc, #44]	@ (8007b34 <__libc_init_array+0x40>)
 8007b06:	4c0c      	ldr	r4, [pc, #48]	@ (8007b38 <__libc_init_array+0x44>)
 8007b08:	f000 fc62 	bl	80083d0 <_init>
 8007b0c:	1b64      	subs	r4, r4, r5
 8007b0e:	10a4      	asrs	r4, r4, #2
 8007b10:	2600      	movs	r6, #0
 8007b12:	42a6      	cmp	r6, r4
 8007b14:	d105      	bne.n	8007b22 <__libc_init_array+0x2e>
 8007b16:	bd70      	pop	{r4, r5, r6, pc}
 8007b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b1c:	4798      	blx	r3
 8007b1e:	3601      	adds	r6, #1
 8007b20:	e7ee      	b.n	8007b00 <__libc_init_array+0xc>
 8007b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b26:	4798      	blx	r3
 8007b28:	3601      	adds	r6, #1
 8007b2a:	e7f2      	b.n	8007b12 <__libc_init_array+0x1e>
 8007b2c:	080084fc 	.word	0x080084fc
 8007b30:	080084fc 	.word	0x080084fc
 8007b34:	080084fc 	.word	0x080084fc
 8007b38:	08008500 	.word	0x08008500

08007b3c <_free_r>:
 8007b3c:	b538      	push	{r3, r4, r5, lr}
 8007b3e:	4605      	mov	r5, r0
 8007b40:	2900      	cmp	r1, #0
 8007b42:	d041      	beq.n	8007bc8 <_free_r+0x8c>
 8007b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b48:	1f0c      	subs	r4, r1, #4
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	bfb8      	it	lt
 8007b4e:	18e4      	addlt	r4, r4, r3
 8007b50:	f7ff fd00 	bl	8007554 <__malloc_lock>
 8007b54:	4a1d      	ldr	r2, [pc, #116]	@ (8007bcc <_free_r+0x90>)
 8007b56:	6813      	ldr	r3, [r2, #0]
 8007b58:	b933      	cbnz	r3, 8007b68 <_free_r+0x2c>
 8007b5a:	6063      	str	r3, [r4, #4]
 8007b5c:	6014      	str	r4, [r2, #0]
 8007b5e:	4628      	mov	r0, r5
 8007b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b64:	f7ff bcfc 	b.w	8007560 <__malloc_unlock>
 8007b68:	42a3      	cmp	r3, r4
 8007b6a:	d908      	bls.n	8007b7e <_free_r+0x42>
 8007b6c:	6820      	ldr	r0, [r4, #0]
 8007b6e:	1821      	adds	r1, r4, r0
 8007b70:	428b      	cmp	r3, r1
 8007b72:	bf01      	itttt	eq
 8007b74:	6819      	ldreq	r1, [r3, #0]
 8007b76:	685b      	ldreq	r3, [r3, #4]
 8007b78:	1809      	addeq	r1, r1, r0
 8007b7a:	6021      	streq	r1, [r4, #0]
 8007b7c:	e7ed      	b.n	8007b5a <_free_r+0x1e>
 8007b7e:	461a      	mov	r2, r3
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	b10b      	cbz	r3, 8007b88 <_free_r+0x4c>
 8007b84:	42a3      	cmp	r3, r4
 8007b86:	d9fa      	bls.n	8007b7e <_free_r+0x42>
 8007b88:	6811      	ldr	r1, [r2, #0]
 8007b8a:	1850      	adds	r0, r2, r1
 8007b8c:	42a0      	cmp	r0, r4
 8007b8e:	d10b      	bne.n	8007ba8 <_free_r+0x6c>
 8007b90:	6820      	ldr	r0, [r4, #0]
 8007b92:	4401      	add	r1, r0
 8007b94:	1850      	adds	r0, r2, r1
 8007b96:	4283      	cmp	r3, r0
 8007b98:	6011      	str	r1, [r2, #0]
 8007b9a:	d1e0      	bne.n	8007b5e <_free_r+0x22>
 8007b9c:	6818      	ldr	r0, [r3, #0]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	6053      	str	r3, [r2, #4]
 8007ba2:	4408      	add	r0, r1
 8007ba4:	6010      	str	r0, [r2, #0]
 8007ba6:	e7da      	b.n	8007b5e <_free_r+0x22>
 8007ba8:	d902      	bls.n	8007bb0 <_free_r+0x74>
 8007baa:	230c      	movs	r3, #12
 8007bac:	602b      	str	r3, [r5, #0]
 8007bae:	e7d6      	b.n	8007b5e <_free_r+0x22>
 8007bb0:	6820      	ldr	r0, [r4, #0]
 8007bb2:	1821      	adds	r1, r4, r0
 8007bb4:	428b      	cmp	r3, r1
 8007bb6:	bf04      	itt	eq
 8007bb8:	6819      	ldreq	r1, [r3, #0]
 8007bba:	685b      	ldreq	r3, [r3, #4]
 8007bbc:	6063      	str	r3, [r4, #4]
 8007bbe:	bf04      	itt	eq
 8007bc0:	1809      	addeq	r1, r1, r0
 8007bc2:	6021      	streq	r1, [r4, #0]
 8007bc4:	6054      	str	r4, [r2, #4]
 8007bc6:	e7ca      	b.n	8007b5e <_free_r+0x22>
 8007bc8:	bd38      	pop	{r3, r4, r5, pc}
 8007bca:	bf00      	nop
 8007bcc:	24004194 	.word	0x24004194

08007bd0 <__sfputc_r>:
 8007bd0:	6893      	ldr	r3, [r2, #8]
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	b410      	push	{r4}
 8007bd8:	6093      	str	r3, [r2, #8]
 8007bda:	da08      	bge.n	8007bee <__sfputc_r+0x1e>
 8007bdc:	6994      	ldr	r4, [r2, #24]
 8007bde:	42a3      	cmp	r3, r4
 8007be0:	db01      	blt.n	8007be6 <__sfputc_r+0x16>
 8007be2:	290a      	cmp	r1, #10
 8007be4:	d103      	bne.n	8007bee <__sfputc_r+0x1e>
 8007be6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bea:	f7ff be34 	b.w	8007856 <__swbuf_r>
 8007bee:	6813      	ldr	r3, [r2, #0]
 8007bf0:	1c58      	adds	r0, r3, #1
 8007bf2:	6010      	str	r0, [r2, #0]
 8007bf4:	7019      	strb	r1, [r3, #0]
 8007bf6:	4608      	mov	r0, r1
 8007bf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <__sfputs_r>:
 8007bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c00:	4606      	mov	r6, r0
 8007c02:	460f      	mov	r7, r1
 8007c04:	4614      	mov	r4, r2
 8007c06:	18d5      	adds	r5, r2, r3
 8007c08:	42ac      	cmp	r4, r5
 8007c0a:	d101      	bne.n	8007c10 <__sfputs_r+0x12>
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	e007      	b.n	8007c20 <__sfputs_r+0x22>
 8007c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c14:	463a      	mov	r2, r7
 8007c16:	4630      	mov	r0, r6
 8007c18:	f7ff ffda 	bl	8007bd0 <__sfputc_r>
 8007c1c:	1c43      	adds	r3, r0, #1
 8007c1e:	d1f3      	bne.n	8007c08 <__sfputs_r+0xa>
 8007c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c24 <_vfiprintf_r>:
 8007c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c28:	460d      	mov	r5, r1
 8007c2a:	b09d      	sub	sp, #116	@ 0x74
 8007c2c:	4614      	mov	r4, r2
 8007c2e:	4698      	mov	r8, r3
 8007c30:	4606      	mov	r6, r0
 8007c32:	b118      	cbz	r0, 8007c3c <_vfiprintf_r+0x18>
 8007c34:	6a03      	ldr	r3, [r0, #32]
 8007c36:	b90b      	cbnz	r3, 8007c3c <_vfiprintf_r+0x18>
 8007c38:	f7ff fd24 	bl	8007684 <__sinit>
 8007c3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c3e:	07d9      	lsls	r1, r3, #31
 8007c40:	d405      	bmi.n	8007c4e <_vfiprintf_r+0x2a>
 8007c42:	89ab      	ldrh	r3, [r5, #12]
 8007c44:	059a      	lsls	r2, r3, #22
 8007c46:	d402      	bmi.n	8007c4e <_vfiprintf_r+0x2a>
 8007c48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c4a:	f7f9 fa65 	bl	8001118 <__retarget_lock_acquire_recursive>
 8007c4e:	89ab      	ldrh	r3, [r5, #12]
 8007c50:	071b      	lsls	r3, r3, #28
 8007c52:	d501      	bpl.n	8007c58 <_vfiprintf_r+0x34>
 8007c54:	692b      	ldr	r3, [r5, #16]
 8007c56:	b99b      	cbnz	r3, 8007c80 <_vfiprintf_r+0x5c>
 8007c58:	4629      	mov	r1, r5
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	f7ff fe3a 	bl	80078d4 <__swsetup_r>
 8007c60:	b170      	cbz	r0, 8007c80 <_vfiprintf_r+0x5c>
 8007c62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c64:	07dc      	lsls	r4, r3, #31
 8007c66:	d504      	bpl.n	8007c72 <_vfiprintf_r+0x4e>
 8007c68:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6c:	b01d      	add	sp, #116	@ 0x74
 8007c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c72:	89ab      	ldrh	r3, [r5, #12]
 8007c74:	0598      	lsls	r0, r3, #22
 8007c76:	d4f7      	bmi.n	8007c68 <_vfiprintf_r+0x44>
 8007c78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c7a:	f7f9 fa62 	bl	8001142 <__retarget_lock_release_recursive>
 8007c7e:	e7f3      	b.n	8007c68 <_vfiprintf_r+0x44>
 8007c80:	2300      	movs	r3, #0
 8007c82:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c84:	2320      	movs	r3, #32
 8007c86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c8e:	2330      	movs	r3, #48	@ 0x30
 8007c90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007e40 <_vfiprintf_r+0x21c>
 8007c94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c98:	f04f 0901 	mov.w	r9, #1
 8007c9c:	4623      	mov	r3, r4
 8007c9e:	469a      	mov	sl, r3
 8007ca0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ca4:	b10a      	cbz	r2, 8007caa <_vfiprintf_r+0x86>
 8007ca6:	2a25      	cmp	r2, #37	@ 0x25
 8007ca8:	d1f9      	bne.n	8007c9e <_vfiprintf_r+0x7a>
 8007caa:	ebba 0b04 	subs.w	fp, sl, r4
 8007cae:	d00b      	beq.n	8007cc8 <_vfiprintf_r+0xa4>
 8007cb0:	465b      	mov	r3, fp
 8007cb2:	4622      	mov	r2, r4
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	f7ff ffa1 	bl	8007bfe <__sfputs_r>
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	f000 80a7 	beq.w	8007e10 <_vfiprintf_r+0x1ec>
 8007cc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cc4:	445a      	add	r2, fp
 8007cc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f000 809f 	beq.w	8007e10 <_vfiprintf_r+0x1ec>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cdc:	f10a 0a01 	add.w	sl, sl, #1
 8007ce0:	9304      	str	r3, [sp, #16]
 8007ce2:	9307      	str	r3, [sp, #28]
 8007ce4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ce8:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cea:	4654      	mov	r4, sl
 8007cec:	2205      	movs	r2, #5
 8007cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cf2:	4853      	ldr	r0, [pc, #332]	@ (8007e40 <_vfiprintf_r+0x21c>)
 8007cf4:	f7f8 faf4 	bl	80002e0 <memchr>
 8007cf8:	9a04      	ldr	r2, [sp, #16]
 8007cfa:	b9d8      	cbnz	r0, 8007d34 <_vfiprintf_r+0x110>
 8007cfc:	06d1      	lsls	r1, r2, #27
 8007cfe:	bf44      	itt	mi
 8007d00:	2320      	movmi	r3, #32
 8007d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d06:	0713      	lsls	r3, r2, #28
 8007d08:	bf44      	itt	mi
 8007d0a:	232b      	movmi	r3, #43	@ 0x2b
 8007d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d10:	f89a 3000 	ldrb.w	r3, [sl]
 8007d14:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d16:	d015      	beq.n	8007d44 <_vfiprintf_r+0x120>
 8007d18:	9a07      	ldr	r2, [sp, #28]
 8007d1a:	4654      	mov	r4, sl
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	f04f 0c0a 	mov.w	ip, #10
 8007d22:	4621      	mov	r1, r4
 8007d24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d28:	3b30      	subs	r3, #48	@ 0x30
 8007d2a:	2b09      	cmp	r3, #9
 8007d2c:	d94b      	bls.n	8007dc6 <_vfiprintf_r+0x1a2>
 8007d2e:	b1b0      	cbz	r0, 8007d5e <_vfiprintf_r+0x13a>
 8007d30:	9207      	str	r2, [sp, #28]
 8007d32:	e014      	b.n	8007d5e <_vfiprintf_r+0x13a>
 8007d34:	eba0 0308 	sub.w	r3, r0, r8
 8007d38:	fa09 f303 	lsl.w	r3, r9, r3
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	9304      	str	r3, [sp, #16]
 8007d40:	46a2      	mov	sl, r4
 8007d42:	e7d2      	b.n	8007cea <_vfiprintf_r+0xc6>
 8007d44:	9b03      	ldr	r3, [sp, #12]
 8007d46:	1d19      	adds	r1, r3, #4
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	9103      	str	r1, [sp, #12]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	bfbb      	ittet	lt
 8007d50:	425b      	neglt	r3, r3
 8007d52:	f042 0202 	orrlt.w	r2, r2, #2
 8007d56:	9307      	strge	r3, [sp, #28]
 8007d58:	9307      	strlt	r3, [sp, #28]
 8007d5a:	bfb8      	it	lt
 8007d5c:	9204      	strlt	r2, [sp, #16]
 8007d5e:	7823      	ldrb	r3, [r4, #0]
 8007d60:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d62:	d10a      	bne.n	8007d7a <_vfiprintf_r+0x156>
 8007d64:	7863      	ldrb	r3, [r4, #1]
 8007d66:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d68:	d132      	bne.n	8007dd0 <_vfiprintf_r+0x1ac>
 8007d6a:	9b03      	ldr	r3, [sp, #12]
 8007d6c:	1d1a      	adds	r2, r3, #4
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	9203      	str	r2, [sp, #12]
 8007d72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d76:	3402      	adds	r4, #2
 8007d78:	9305      	str	r3, [sp, #20]
 8007d7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007e50 <_vfiprintf_r+0x22c>
 8007d7e:	7821      	ldrb	r1, [r4, #0]
 8007d80:	2203      	movs	r2, #3
 8007d82:	4650      	mov	r0, sl
 8007d84:	f7f8 faac 	bl	80002e0 <memchr>
 8007d88:	b138      	cbz	r0, 8007d9a <_vfiprintf_r+0x176>
 8007d8a:	9b04      	ldr	r3, [sp, #16]
 8007d8c:	eba0 000a 	sub.w	r0, r0, sl
 8007d90:	2240      	movs	r2, #64	@ 0x40
 8007d92:	4082      	lsls	r2, r0
 8007d94:	4313      	orrs	r3, r2
 8007d96:	3401      	adds	r4, #1
 8007d98:	9304      	str	r3, [sp, #16]
 8007d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d9e:	4829      	ldr	r0, [pc, #164]	@ (8007e44 <_vfiprintf_r+0x220>)
 8007da0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007da4:	2206      	movs	r2, #6
 8007da6:	f7f8 fa9b 	bl	80002e0 <memchr>
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d03f      	beq.n	8007e2e <_vfiprintf_r+0x20a>
 8007dae:	4b26      	ldr	r3, [pc, #152]	@ (8007e48 <_vfiprintf_r+0x224>)
 8007db0:	bb1b      	cbnz	r3, 8007dfa <_vfiprintf_r+0x1d6>
 8007db2:	9b03      	ldr	r3, [sp, #12]
 8007db4:	3307      	adds	r3, #7
 8007db6:	f023 0307 	bic.w	r3, r3, #7
 8007dba:	3308      	adds	r3, #8
 8007dbc:	9303      	str	r3, [sp, #12]
 8007dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dc0:	443b      	add	r3, r7
 8007dc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dc4:	e76a      	b.n	8007c9c <_vfiprintf_r+0x78>
 8007dc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dca:	460c      	mov	r4, r1
 8007dcc:	2001      	movs	r0, #1
 8007dce:	e7a8      	b.n	8007d22 <_vfiprintf_r+0xfe>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	3401      	adds	r4, #1
 8007dd4:	9305      	str	r3, [sp, #20]
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	f04f 0c0a 	mov.w	ip, #10
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007de2:	3a30      	subs	r2, #48	@ 0x30
 8007de4:	2a09      	cmp	r2, #9
 8007de6:	d903      	bls.n	8007df0 <_vfiprintf_r+0x1cc>
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d0c6      	beq.n	8007d7a <_vfiprintf_r+0x156>
 8007dec:	9105      	str	r1, [sp, #20]
 8007dee:	e7c4      	b.n	8007d7a <_vfiprintf_r+0x156>
 8007df0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007df4:	4604      	mov	r4, r0
 8007df6:	2301      	movs	r3, #1
 8007df8:	e7f0      	b.n	8007ddc <_vfiprintf_r+0x1b8>
 8007dfa:	ab03      	add	r3, sp, #12
 8007dfc:	9300      	str	r3, [sp, #0]
 8007dfe:	462a      	mov	r2, r5
 8007e00:	4b12      	ldr	r3, [pc, #72]	@ (8007e4c <_vfiprintf_r+0x228>)
 8007e02:	a904      	add	r1, sp, #16
 8007e04:	4630      	mov	r0, r6
 8007e06:	f3af 8000 	nop.w
 8007e0a:	4607      	mov	r7, r0
 8007e0c:	1c78      	adds	r0, r7, #1
 8007e0e:	d1d6      	bne.n	8007dbe <_vfiprintf_r+0x19a>
 8007e10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e12:	07d9      	lsls	r1, r3, #31
 8007e14:	d405      	bmi.n	8007e22 <_vfiprintf_r+0x1fe>
 8007e16:	89ab      	ldrh	r3, [r5, #12]
 8007e18:	059a      	lsls	r2, r3, #22
 8007e1a:	d402      	bmi.n	8007e22 <_vfiprintf_r+0x1fe>
 8007e1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e1e:	f7f9 f990 	bl	8001142 <__retarget_lock_release_recursive>
 8007e22:	89ab      	ldrh	r3, [r5, #12]
 8007e24:	065b      	lsls	r3, r3, #25
 8007e26:	f53f af1f 	bmi.w	8007c68 <_vfiprintf_r+0x44>
 8007e2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e2c:	e71e      	b.n	8007c6c <_vfiprintf_r+0x48>
 8007e2e:	ab03      	add	r3, sp, #12
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	462a      	mov	r2, r5
 8007e34:	4b05      	ldr	r3, [pc, #20]	@ (8007e4c <_vfiprintf_r+0x228>)
 8007e36:	a904      	add	r1, sp, #16
 8007e38:	4630      	mov	r0, r6
 8007e3a:	f000 f879 	bl	8007f30 <_printf_i>
 8007e3e:	e7e4      	b.n	8007e0a <_vfiprintf_r+0x1e6>
 8007e40:	080084c0 	.word	0x080084c0
 8007e44:	080084ca 	.word	0x080084ca
 8007e48:	00000000 	.word	0x00000000
 8007e4c:	08007bff 	.word	0x08007bff
 8007e50:	080084c6 	.word	0x080084c6

08007e54 <_printf_common>:
 8007e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e58:	4616      	mov	r6, r2
 8007e5a:	4698      	mov	r8, r3
 8007e5c:	688a      	ldr	r2, [r1, #8]
 8007e5e:	690b      	ldr	r3, [r1, #16]
 8007e60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e64:	4293      	cmp	r3, r2
 8007e66:	bfb8      	it	lt
 8007e68:	4613      	movlt	r3, r2
 8007e6a:	6033      	str	r3, [r6, #0]
 8007e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e70:	4607      	mov	r7, r0
 8007e72:	460c      	mov	r4, r1
 8007e74:	b10a      	cbz	r2, 8007e7a <_printf_common+0x26>
 8007e76:	3301      	adds	r3, #1
 8007e78:	6033      	str	r3, [r6, #0]
 8007e7a:	6823      	ldr	r3, [r4, #0]
 8007e7c:	0699      	lsls	r1, r3, #26
 8007e7e:	bf42      	ittt	mi
 8007e80:	6833      	ldrmi	r3, [r6, #0]
 8007e82:	3302      	addmi	r3, #2
 8007e84:	6033      	strmi	r3, [r6, #0]
 8007e86:	6825      	ldr	r5, [r4, #0]
 8007e88:	f015 0506 	ands.w	r5, r5, #6
 8007e8c:	d106      	bne.n	8007e9c <_printf_common+0x48>
 8007e8e:	f104 0a19 	add.w	sl, r4, #25
 8007e92:	68e3      	ldr	r3, [r4, #12]
 8007e94:	6832      	ldr	r2, [r6, #0]
 8007e96:	1a9b      	subs	r3, r3, r2
 8007e98:	42ab      	cmp	r3, r5
 8007e9a:	dc26      	bgt.n	8007eea <_printf_common+0x96>
 8007e9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ea0:	6822      	ldr	r2, [r4, #0]
 8007ea2:	3b00      	subs	r3, #0
 8007ea4:	bf18      	it	ne
 8007ea6:	2301      	movne	r3, #1
 8007ea8:	0692      	lsls	r2, r2, #26
 8007eaa:	d42b      	bmi.n	8007f04 <_printf_common+0xb0>
 8007eac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007eb0:	4641      	mov	r1, r8
 8007eb2:	4638      	mov	r0, r7
 8007eb4:	47c8      	blx	r9
 8007eb6:	3001      	adds	r0, #1
 8007eb8:	d01e      	beq.n	8007ef8 <_printf_common+0xa4>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	6922      	ldr	r2, [r4, #16]
 8007ebe:	f003 0306 	and.w	r3, r3, #6
 8007ec2:	2b04      	cmp	r3, #4
 8007ec4:	bf02      	ittt	eq
 8007ec6:	68e5      	ldreq	r5, [r4, #12]
 8007ec8:	6833      	ldreq	r3, [r6, #0]
 8007eca:	1aed      	subeq	r5, r5, r3
 8007ecc:	68a3      	ldr	r3, [r4, #8]
 8007ece:	bf0c      	ite	eq
 8007ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ed4:	2500      	movne	r5, #0
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	bfc4      	itt	gt
 8007eda:	1a9b      	subgt	r3, r3, r2
 8007edc:	18ed      	addgt	r5, r5, r3
 8007ede:	2600      	movs	r6, #0
 8007ee0:	341a      	adds	r4, #26
 8007ee2:	42b5      	cmp	r5, r6
 8007ee4:	d11a      	bne.n	8007f1c <_printf_common+0xc8>
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	e008      	b.n	8007efc <_printf_common+0xa8>
 8007eea:	2301      	movs	r3, #1
 8007eec:	4652      	mov	r2, sl
 8007eee:	4641      	mov	r1, r8
 8007ef0:	4638      	mov	r0, r7
 8007ef2:	47c8      	blx	r9
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	d103      	bne.n	8007f00 <_printf_common+0xac>
 8007ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8007efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f00:	3501      	adds	r5, #1
 8007f02:	e7c6      	b.n	8007e92 <_printf_common+0x3e>
 8007f04:	18e1      	adds	r1, r4, r3
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	2030      	movs	r0, #48	@ 0x30
 8007f0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f0e:	4422      	add	r2, r4
 8007f10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f18:	3302      	adds	r3, #2
 8007f1a:	e7c7      	b.n	8007eac <_printf_common+0x58>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	4622      	mov	r2, r4
 8007f20:	4641      	mov	r1, r8
 8007f22:	4638      	mov	r0, r7
 8007f24:	47c8      	blx	r9
 8007f26:	3001      	adds	r0, #1
 8007f28:	d0e6      	beq.n	8007ef8 <_printf_common+0xa4>
 8007f2a:	3601      	adds	r6, #1
 8007f2c:	e7d9      	b.n	8007ee2 <_printf_common+0x8e>
	...

08007f30 <_printf_i>:
 8007f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f34:	7e0f      	ldrb	r7, [r1, #24]
 8007f36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f38:	2f78      	cmp	r7, #120	@ 0x78
 8007f3a:	4691      	mov	r9, r2
 8007f3c:	4680      	mov	r8, r0
 8007f3e:	460c      	mov	r4, r1
 8007f40:	469a      	mov	sl, r3
 8007f42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f46:	d807      	bhi.n	8007f58 <_printf_i+0x28>
 8007f48:	2f62      	cmp	r7, #98	@ 0x62
 8007f4a:	d80a      	bhi.n	8007f62 <_printf_i+0x32>
 8007f4c:	2f00      	cmp	r7, #0
 8007f4e:	f000 80d2 	beq.w	80080f6 <_printf_i+0x1c6>
 8007f52:	2f58      	cmp	r7, #88	@ 0x58
 8007f54:	f000 80b9 	beq.w	80080ca <_printf_i+0x19a>
 8007f58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f60:	e03a      	b.n	8007fd8 <_printf_i+0xa8>
 8007f62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f66:	2b15      	cmp	r3, #21
 8007f68:	d8f6      	bhi.n	8007f58 <_printf_i+0x28>
 8007f6a:	a101      	add	r1, pc, #4	@ (adr r1, 8007f70 <_printf_i+0x40>)
 8007f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f70:	08007fc9 	.word	0x08007fc9
 8007f74:	08007fdd 	.word	0x08007fdd
 8007f78:	08007f59 	.word	0x08007f59
 8007f7c:	08007f59 	.word	0x08007f59
 8007f80:	08007f59 	.word	0x08007f59
 8007f84:	08007f59 	.word	0x08007f59
 8007f88:	08007fdd 	.word	0x08007fdd
 8007f8c:	08007f59 	.word	0x08007f59
 8007f90:	08007f59 	.word	0x08007f59
 8007f94:	08007f59 	.word	0x08007f59
 8007f98:	08007f59 	.word	0x08007f59
 8007f9c:	080080dd 	.word	0x080080dd
 8007fa0:	08008007 	.word	0x08008007
 8007fa4:	08008097 	.word	0x08008097
 8007fa8:	08007f59 	.word	0x08007f59
 8007fac:	08007f59 	.word	0x08007f59
 8007fb0:	080080ff 	.word	0x080080ff
 8007fb4:	08007f59 	.word	0x08007f59
 8007fb8:	08008007 	.word	0x08008007
 8007fbc:	08007f59 	.word	0x08007f59
 8007fc0:	08007f59 	.word	0x08007f59
 8007fc4:	0800809f 	.word	0x0800809f
 8007fc8:	6833      	ldr	r3, [r6, #0]
 8007fca:	1d1a      	adds	r2, r3, #4
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6032      	str	r2, [r6, #0]
 8007fd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e09d      	b.n	8008118 <_printf_i+0x1e8>
 8007fdc:	6833      	ldr	r3, [r6, #0]
 8007fde:	6820      	ldr	r0, [r4, #0]
 8007fe0:	1d19      	adds	r1, r3, #4
 8007fe2:	6031      	str	r1, [r6, #0]
 8007fe4:	0606      	lsls	r6, r0, #24
 8007fe6:	d501      	bpl.n	8007fec <_printf_i+0xbc>
 8007fe8:	681d      	ldr	r5, [r3, #0]
 8007fea:	e003      	b.n	8007ff4 <_printf_i+0xc4>
 8007fec:	0645      	lsls	r5, r0, #25
 8007fee:	d5fb      	bpl.n	8007fe8 <_printf_i+0xb8>
 8007ff0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ff4:	2d00      	cmp	r5, #0
 8007ff6:	da03      	bge.n	8008000 <_printf_i+0xd0>
 8007ff8:	232d      	movs	r3, #45	@ 0x2d
 8007ffa:	426d      	negs	r5, r5
 8007ffc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008000:	4859      	ldr	r0, [pc, #356]	@ (8008168 <_printf_i+0x238>)
 8008002:	230a      	movs	r3, #10
 8008004:	e011      	b.n	800802a <_printf_i+0xfa>
 8008006:	6821      	ldr	r1, [r4, #0]
 8008008:	6833      	ldr	r3, [r6, #0]
 800800a:	0608      	lsls	r0, r1, #24
 800800c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008010:	d402      	bmi.n	8008018 <_printf_i+0xe8>
 8008012:	0649      	lsls	r1, r1, #25
 8008014:	bf48      	it	mi
 8008016:	b2ad      	uxthmi	r5, r5
 8008018:	2f6f      	cmp	r7, #111	@ 0x6f
 800801a:	4853      	ldr	r0, [pc, #332]	@ (8008168 <_printf_i+0x238>)
 800801c:	6033      	str	r3, [r6, #0]
 800801e:	bf14      	ite	ne
 8008020:	230a      	movne	r3, #10
 8008022:	2308      	moveq	r3, #8
 8008024:	2100      	movs	r1, #0
 8008026:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800802a:	6866      	ldr	r6, [r4, #4]
 800802c:	60a6      	str	r6, [r4, #8]
 800802e:	2e00      	cmp	r6, #0
 8008030:	bfa2      	ittt	ge
 8008032:	6821      	ldrge	r1, [r4, #0]
 8008034:	f021 0104 	bicge.w	r1, r1, #4
 8008038:	6021      	strge	r1, [r4, #0]
 800803a:	b90d      	cbnz	r5, 8008040 <_printf_i+0x110>
 800803c:	2e00      	cmp	r6, #0
 800803e:	d04b      	beq.n	80080d8 <_printf_i+0x1a8>
 8008040:	4616      	mov	r6, r2
 8008042:	fbb5 f1f3 	udiv	r1, r5, r3
 8008046:	fb03 5711 	mls	r7, r3, r1, r5
 800804a:	5dc7      	ldrb	r7, [r0, r7]
 800804c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008050:	462f      	mov	r7, r5
 8008052:	42bb      	cmp	r3, r7
 8008054:	460d      	mov	r5, r1
 8008056:	d9f4      	bls.n	8008042 <_printf_i+0x112>
 8008058:	2b08      	cmp	r3, #8
 800805a:	d10b      	bne.n	8008074 <_printf_i+0x144>
 800805c:	6823      	ldr	r3, [r4, #0]
 800805e:	07df      	lsls	r7, r3, #31
 8008060:	d508      	bpl.n	8008074 <_printf_i+0x144>
 8008062:	6923      	ldr	r3, [r4, #16]
 8008064:	6861      	ldr	r1, [r4, #4]
 8008066:	4299      	cmp	r1, r3
 8008068:	bfde      	ittt	le
 800806a:	2330      	movle	r3, #48	@ 0x30
 800806c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008070:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008074:	1b92      	subs	r2, r2, r6
 8008076:	6122      	str	r2, [r4, #16]
 8008078:	f8cd a000 	str.w	sl, [sp]
 800807c:	464b      	mov	r3, r9
 800807e:	aa03      	add	r2, sp, #12
 8008080:	4621      	mov	r1, r4
 8008082:	4640      	mov	r0, r8
 8008084:	f7ff fee6 	bl	8007e54 <_printf_common>
 8008088:	3001      	adds	r0, #1
 800808a:	d14a      	bne.n	8008122 <_printf_i+0x1f2>
 800808c:	f04f 30ff 	mov.w	r0, #4294967295
 8008090:	b004      	add	sp, #16
 8008092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008096:	6823      	ldr	r3, [r4, #0]
 8008098:	f043 0320 	orr.w	r3, r3, #32
 800809c:	6023      	str	r3, [r4, #0]
 800809e:	4833      	ldr	r0, [pc, #204]	@ (800816c <_printf_i+0x23c>)
 80080a0:	2778      	movs	r7, #120	@ 0x78
 80080a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80080a6:	6823      	ldr	r3, [r4, #0]
 80080a8:	6831      	ldr	r1, [r6, #0]
 80080aa:	061f      	lsls	r7, r3, #24
 80080ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80080b0:	d402      	bmi.n	80080b8 <_printf_i+0x188>
 80080b2:	065f      	lsls	r7, r3, #25
 80080b4:	bf48      	it	mi
 80080b6:	b2ad      	uxthmi	r5, r5
 80080b8:	6031      	str	r1, [r6, #0]
 80080ba:	07d9      	lsls	r1, r3, #31
 80080bc:	bf44      	itt	mi
 80080be:	f043 0320 	orrmi.w	r3, r3, #32
 80080c2:	6023      	strmi	r3, [r4, #0]
 80080c4:	b11d      	cbz	r5, 80080ce <_printf_i+0x19e>
 80080c6:	2310      	movs	r3, #16
 80080c8:	e7ac      	b.n	8008024 <_printf_i+0xf4>
 80080ca:	4827      	ldr	r0, [pc, #156]	@ (8008168 <_printf_i+0x238>)
 80080cc:	e7e9      	b.n	80080a2 <_printf_i+0x172>
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	f023 0320 	bic.w	r3, r3, #32
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	e7f6      	b.n	80080c6 <_printf_i+0x196>
 80080d8:	4616      	mov	r6, r2
 80080da:	e7bd      	b.n	8008058 <_printf_i+0x128>
 80080dc:	6833      	ldr	r3, [r6, #0]
 80080de:	6825      	ldr	r5, [r4, #0]
 80080e0:	6961      	ldr	r1, [r4, #20]
 80080e2:	1d18      	adds	r0, r3, #4
 80080e4:	6030      	str	r0, [r6, #0]
 80080e6:	062e      	lsls	r6, r5, #24
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	d501      	bpl.n	80080f0 <_printf_i+0x1c0>
 80080ec:	6019      	str	r1, [r3, #0]
 80080ee:	e002      	b.n	80080f6 <_printf_i+0x1c6>
 80080f0:	0668      	lsls	r0, r5, #25
 80080f2:	d5fb      	bpl.n	80080ec <_printf_i+0x1bc>
 80080f4:	8019      	strh	r1, [r3, #0]
 80080f6:	2300      	movs	r3, #0
 80080f8:	6123      	str	r3, [r4, #16]
 80080fa:	4616      	mov	r6, r2
 80080fc:	e7bc      	b.n	8008078 <_printf_i+0x148>
 80080fe:	6833      	ldr	r3, [r6, #0]
 8008100:	1d1a      	adds	r2, r3, #4
 8008102:	6032      	str	r2, [r6, #0]
 8008104:	681e      	ldr	r6, [r3, #0]
 8008106:	6862      	ldr	r2, [r4, #4]
 8008108:	2100      	movs	r1, #0
 800810a:	4630      	mov	r0, r6
 800810c:	f7f8 f8e8 	bl	80002e0 <memchr>
 8008110:	b108      	cbz	r0, 8008116 <_printf_i+0x1e6>
 8008112:	1b80      	subs	r0, r0, r6
 8008114:	6060      	str	r0, [r4, #4]
 8008116:	6863      	ldr	r3, [r4, #4]
 8008118:	6123      	str	r3, [r4, #16]
 800811a:	2300      	movs	r3, #0
 800811c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008120:	e7aa      	b.n	8008078 <_printf_i+0x148>
 8008122:	6923      	ldr	r3, [r4, #16]
 8008124:	4632      	mov	r2, r6
 8008126:	4649      	mov	r1, r9
 8008128:	4640      	mov	r0, r8
 800812a:	47d0      	blx	sl
 800812c:	3001      	adds	r0, #1
 800812e:	d0ad      	beq.n	800808c <_printf_i+0x15c>
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	079b      	lsls	r3, r3, #30
 8008134:	d413      	bmi.n	800815e <_printf_i+0x22e>
 8008136:	68e0      	ldr	r0, [r4, #12]
 8008138:	9b03      	ldr	r3, [sp, #12]
 800813a:	4298      	cmp	r0, r3
 800813c:	bfb8      	it	lt
 800813e:	4618      	movlt	r0, r3
 8008140:	e7a6      	b.n	8008090 <_printf_i+0x160>
 8008142:	2301      	movs	r3, #1
 8008144:	4632      	mov	r2, r6
 8008146:	4649      	mov	r1, r9
 8008148:	4640      	mov	r0, r8
 800814a:	47d0      	blx	sl
 800814c:	3001      	adds	r0, #1
 800814e:	d09d      	beq.n	800808c <_printf_i+0x15c>
 8008150:	3501      	adds	r5, #1
 8008152:	68e3      	ldr	r3, [r4, #12]
 8008154:	9903      	ldr	r1, [sp, #12]
 8008156:	1a5b      	subs	r3, r3, r1
 8008158:	42ab      	cmp	r3, r5
 800815a:	dcf2      	bgt.n	8008142 <_printf_i+0x212>
 800815c:	e7eb      	b.n	8008136 <_printf_i+0x206>
 800815e:	2500      	movs	r5, #0
 8008160:	f104 0619 	add.w	r6, r4, #25
 8008164:	e7f5      	b.n	8008152 <_printf_i+0x222>
 8008166:	bf00      	nop
 8008168:	080084d1 	.word	0x080084d1
 800816c:	080084e2 	.word	0x080084e2

08008170 <__sflush_r>:
 8008170:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008178:	0716      	lsls	r6, r2, #28
 800817a:	4605      	mov	r5, r0
 800817c:	460c      	mov	r4, r1
 800817e:	d454      	bmi.n	800822a <__sflush_r+0xba>
 8008180:	684b      	ldr	r3, [r1, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	dc02      	bgt.n	800818c <__sflush_r+0x1c>
 8008186:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008188:	2b00      	cmp	r3, #0
 800818a:	dd48      	ble.n	800821e <__sflush_r+0xae>
 800818c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800818e:	2e00      	cmp	r6, #0
 8008190:	d045      	beq.n	800821e <__sflush_r+0xae>
 8008192:	2300      	movs	r3, #0
 8008194:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008198:	682f      	ldr	r7, [r5, #0]
 800819a:	6a21      	ldr	r1, [r4, #32]
 800819c:	602b      	str	r3, [r5, #0]
 800819e:	d030      	beq.n	8008202 <__sflush_r+0x92>
 80081a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80081a2:	89a3      	ldrh	r3, [r4, #12]
 80081a4:	0759      	lsls	r1, r3, #29
 80081a6:	d505      	bpl.n	80081b4 <__sflush_r+0x44>
 80081a8:	6863      	ldr	r3, [r4, #4]
 80081aa:	1ad2      	subs	r2, r2, r3
 80081ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80081ae:	b10b      	cbz	r3, 80081b4 <__sflush_r+0x44>
 80081b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80081b2:	1ad2      	subs	r2, r2, r3
 80081b4:	2300      	movs	r3, #0
 80081b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081b8:	6a21      	ldr	r1, [r4, #32]
 80081ba:	4628      	mov	r0, r5
 80081bc:	47b0      	blx	r6
 80081be:	1c43      	adds	r3, r0, #1
 80081c0:	89a3      	ldrh	r3, [r4, #12]
 80081c2:	d106      	bne.n	80081d2 <__sflush_r+0x62>
 80081c4:	6829      	ldr	r1, [r5, #0]
 80081c6:	291d      	cmp	r1, #29
 80081c8:	d82b      	bhi.n	8008222 <__sflush_r+0xb2>
 80081ca:	4a2a      	ldr	r2, [pc, #168]	@ (8008274 <__sflush_r+0x104>)
 80081cc:	410a      	asrs	r2, r1
 80081ce:	07d6      	lsls	r6, r2, #31
 80081d0:	d427      	bmi.n	8008222 <__sflush_r+0xb2>
 80081d2:	2200      	movs	r2, #0
 80081d4:	6062      	str	r2, [r4, #4]
 80081d6:	04d9      	lsls	r1, r3, #19
 80081d8:	6922      	ldr	r2, [r4, #16]
 80081da:	6022      	str	r2, [r4, #0]
 80081dc:	d504      	bpl.n	80081e8 <__sflush_r+0x78>
 80081de:	1c42      	adds	r2, r0, #1
 80081e0:	d101      	bne.n	80081e6 <__sflush_r+0x76>
 80081e2:	682b      	ldr	r3, [r5, #0]
 80081e4:	b903      	cbnz	r3, 80081e8 <__sflush_r+0x78>
 80081e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80081e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081ea:	602f      	str	r7, [r5, #0]
 80081ec:	b1b9      	cbz	r1, 800821e <__sflush_r+0xae>
 80081ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081f2:	4299      	cmp	r1, r3
 80081f4:	d002      	beq.n	80081fc <__sflush_r+0x8c>
 80081f6:	4628      	mov	r0, r5
 80081f8:	f7ff fca0 	bl	8007b3c <_free_r>
 80081fc:	2300      	movs	r3, #0
 80081fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8008200:	e00d      	b.n	800821e <__sflush_r+0xae>
 8008202:	2301      	movs	r3, #1
 8008204:	4628      	mov	r0, r5
 8008206:	47b0      	blx	r6
 8008208:	4602      	mov	r2, r0
 800820a:	1c50      	adds	r0, r2, #1
 800820c:	d1c9      	bne.n	80081a2 <__sflush_r+0x32>
 800820e:	682b      	ldr	r3, [r5, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d0c6      	beq.n	80081a2 <__sflush_r+0x32>
 8008214:	2b1d      	cmp	r3, #29
 8008216:	d001      	beq.n	800821c <__sflush_r+0xac>
 8008218:	2b16      	cmp	r3, #22
 800821a:	d11e      	bne.n	800825a <__sflush_r+0xea>
 800821c:	602f      	str	r7, [r5, #0]
 800821e:	2000      	movs	r0, #0
 8008220:	e022      	b.n	8008268 <__sflush_r+0xf8>
 8008222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008226:	b21b      	sxth	r3, r3
 8008228:	e01b      	b.n	8008262 <__sflush_r+0xf2>
 800822a:	690f      	ldr	r7, [r1, #16]
 800822c:	2f00      	cmp	r7, #0
 800822e:	d0f6      	beq.n	800821e <__sflush_r+0xae>
 8008230:	0793      	lsls	r3, r2, #30
 8008232:	680e      	ldr	r6, [r1, #0]
 8008234:	bf08      	it	eq
 8008236:	694b      	ldreq	r3, [r1, #20]
 8008238:	600f      	str	r7, [r1, #0]
 800823a:	bf18      	it	ne
 800823c:	2300      	movne	r3, #0
 800823e:	eba6 0807 	sub.w	r8, r6, r7
 8008242:	608b      	str	r3, [r1, #8]
 8008244:	f1b8 0f00 	cmp.w	r8, #0
 8008248:	dde9      	ble.n	800821e <__sflush_r+0xae>
 800824a:	6a21      	ldr	r1, [r4, #32]
 800824c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800824e:	4643      	mov	r3, r8
 8008250:	463a      	mov	r2, r7
 8008252:	4628      	mov	r0, r5
 8008254:	47b0      	blx	r6
 8008256:	2800      	cmp	r0, #0
 8008258:	dc08      	bgt.n	800826c <__sflush_r+0xfc>
 800825a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800825e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008262:	81a3      	strh	r3, [r4, #12]
 8008264:	f04f 30ff 	mov.w	r0, #4294967295
 8008268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800826c:	4407      	add	r7, r0
 800826e:	eba8 0800 	sub.w	r8, r8, r0
 8008272:	e7e7      	b.n	8008244 <__sflush_r+0xd4>
 8008274:	dfbffffe 	.word	0xdfbffffe

08008278 <_fflush_r>:
 8008278:	b538      	push	{r3, r4, r5, lr}
 800827a:	690b      	ldr	r3, [r1, #16]
 800827c:	4605      	mov	r5, r0
 800827e:	460c      	mov	r4, r1
 8008280:	b913      	cbnz	r3, 8008288 <_fflush_r+0x10>
 8008282:	2500      	movs	r5, #0
 8008284:	4628      	mov	r0, r5
 8008286:	bd38      	pop	{r3, r4, r5, pc}
 8008288:	b118      	cbz	r0, 8008292 <_fflush_r+0x1a>
 800828a:	6a03      	ldr	r3, [r0, #32]
 800828c:	b90b      	cbnz	r3, 8008292 <_fflush_r+0x1a>
 800828e:	f7ff f9f9 	bl	8007684 <__sinit>
 8008292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d0f3      	beq.n	8008282 <_fflush_r+0xa>
 800829a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800829c:	07d0      	lsls	r0, r2, #31
 800829e:	d404      	bmi.n	80082aa <_fflush_r+0x32>
 80082a0:	0599      	lsls	r1, r3, #22
 80082a2:	d402      	bmi.n	80082aa <_fflush_r+0x32>
 80082a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082a6:	f7f8 ff37 	bl	8001118 <__retarget_lock_acquire_recursive>
 80082aa:	4628      	mov	r0, r5
 80082ac:	4621      	mov	r1, r4
 80082ae:	f7ff ff5f 	bl	8008170 <__sflush_r>
 80082b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082b4:	07da      	lsls	r2, r3, #31
 80082b6:	4605      	mov	r5, r0
 80082b8:	d4e4      	bmi.n	8008284 <_fflush_r+0xc>
 80082ba:	89a3      	ldrh	r3, [r4, #12]
 80082bc:	059b      	lsls	r3, r3, #22
 80082be:	d4e1      	bmi.n	8008284 <_fflush_r+0xc>
 80082c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082c2:	f7f8 ff3e 	bl	8001142 <__retarget_lock_release_recursive>
 80082c6:	e7dd      	b.n	8008284 <_fflush_r+0xc>

080082c8 <__swhatbuf_r>:
 80082c8:	b570      	push	{r4, r5, r6, lr}
 80082ca:	460c      	mov	r4, r1
 80082cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d0:	2900      	cmp	r1, #0
 80082d2:	b096      	sub	sp, #88	@ 0x58
 80082d4:	4615      	mov	r5, r2
 80082d6:	461e      	mov	r6, r3
 80082d8:	da0d      	bge.n	80082f6 <__swhatbuf_r+0x2e>
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082e0:	f04f 0100 	mov.w	r1, #0
 80082e4:	bf14      	ite	ne
 80082e6:	2340      	movne	r3, #64	@ 0x40
 80082e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082ec:	2000      	movs	r0, #0
 80082ee:	6031      	str	r1, [r6, #0]
 80082f0:	602b      	str	r3, [r5, #0]
 80082f2:	b016      	add	sp, #88	@ 0x58
 80082f4:	bd70      	pop	{r4, r5, r6, pc}
 80082f6:	466a      	mov	r2, sp
 80082f8:	f000 f848 	bl	800838c <_fstat_r>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	dbec      	blt.n	80082da <__swhatbuf_r+0x12>
 8008300:	9901      	ldr	r1, [sp, #4]
 8008302:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008306:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800830a:	4259      	negs	r1, r3
 800830c:	4159      	adcs	r1, r3
 800830e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008312:	e7eb      	b.n	80082ec <__swhatbuf_r+0x24>

08008314 <__smakebuf_r>:
 8008314:	898b      	ldrh	r3, [r1, #12]
 8008316:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008318:	079d      	lsls	r5, r3, #30
 800831a:	4606      	mov	r6, r0
 800831c:	460c      	mov	r4, r1
 800831e:	d507      	bpl.n	8008330 <__smakebuf_r+0x1c>
 8008320:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	6123      	str	r3, [r4, #16]
 8008328:	2301      	movs	r3, #1
 800832a:	6163      	str	r3, [r4, #20]
 800832c:	b003      	add	sp, #12
 800832e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008330:	ab01      	add	r3, sp, #4
 8008332:	466a      	mov	r2, sp
 8008334:	f7ff ffc8 	bl	80082c8 <__swhatbuf_r>
 8008338:	9f00      	ldr	r7, [sp, #0]
 800833a:	4605      	mov	r5, r0
 800833c:	4639      	mov	r1, r7
 800833e:	4630      	mov	r0, r6
 8008340:	f7ff f888 	bl	8007454 <_malloc_r>
 8008344:	b948      	cbnz	r0, 800835a <__smakebuf_r+0x46>
 8008346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800834a:	059a      	lsls	r2, r3, #22
 800834c:	d4ee      	bmi.n	800832c <__smakebuf_r+0x18>
 800834e:	f023 0303 	bic.w	r3, r3, #3
 8008352:	f043 0302 	orr.w	r3, r3, #2
 8008356:	81a3      	strh	r3, [r4, #12]
 8008358:	e7e2      	b.n	8008320 <__smakebuf_r+0xc>
 800835a:	89a3      	ldrh	r3, [r4, #12]
 800835c:	6020      	str	r0, [r4, #0]
 800835e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008362:	81a3      	strh	r3, [r4, #12]
 8008364:	9b01      	ldr	r3, [sp, #4]
 8008366:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800836a:	b15b      	cbz	r3, 8008384 <__smakebuf_r+0x70>
 800836c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008370:	4630      	mov	r0, r6
 8008372:	f000 f81d 	bl	80083b0 <_isatty_r>
 8008376:	b128      	cbz	r0, 8008384 <__smakebuf_r+0x70>
 8008378:	89a3      	ldrh	r3, [r4, #12]
 800837a:	f023 0303 	bic.w	r3, r3, #3
 800837e:	f043 0301 	orr.w	r3, r3, #1
 8008382:	81a3      	strh	r3, [r4, #12]
 8008384:	89a3      	ldrh	r3, [r4, #12]
 8008386:	431d      	orrs	r5, r3
 8008388:	81a5      	strh	r5, [r4, #12]
 800838a:	e7cf      	b.n	800832c <__smakebuf_r+0x18>

0800838c <_fstat_r>:
 800838c:	b538      	push	{r3, r4, r5, lr}
 800838e:	4d07      	ldr	r5, [pc, #28]	@ (80083ac <_fstat_r+0x20>)
 8008390:	2300      	movs	r3, #0
 8008392:	4604      	mov	r4, r0
 8008394:	4608      	mov	r0, r1
 8008396:	4611      	mov	r1, r2
 8008398:	602b      	str	r3, [r5, #0]
 800839a:	f7f8 fd8e 	bl	8000eba <_fstat>
 800839e:	1c43      	adds	r3, r0, #1
 80083a0:	d102      	bne.n	80083a8 <_fstat_r+0x1c>
 80083a2:	682b      	ldr	r3, [r5, #0]
 80083a4:	b103      	cbz	r3, 80083a8 <_fstat_r+0x1c>
 80083a6:	6023      	str	r3, [r4, #0]
 80083a8:	bd38      	pop	{r3, r4, r5, pc}
 80083aa:	bf00      	nop
 80083ac:	240042d4 	.word	0x240042d4

080083b0 <_isatty_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	4d06      	ldr	r5, [pc, #24]	@ (80083cc <_isatty_r+0x1c>)
 80083b4:	2300      	movs	r3, #0
 80083b6:	4604      	mov	r4, r0
 80083b8:	4608      	mov	r0, r1
 80083ba:	602b      	str	r3, [r5, #0]
 80083bc:	f7f8 fd8d 	bl	8000eda <_isatty>
 80083c0:	1c43      	adds	r3, r0, #1
 80083c2:	d102      	bne.n	80083ca <_isatty_r+0x1a>
 80083c4:	682b      	ldr	r3, [r5, #0]
 80083c6:	b103      	cbz	r3, 80083ca <_isatty_r+0x1a>
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	bd38      	pop	{r3, r4, r5, pc}
 80083cc:	240042d4 	.word	0x240042d4

080083d0 <_init>:
 80083d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d2:	bf00      	nop
 80083d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083d6:	bc08      	pop	{r3}
 80083d8:	469e      	mov	lr, r3
 80083da:	4770      	bx	lr

080083dc <_fini>:
 80083dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083de:	bf00      	nop
 80083e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083e2:	bc08      	pop	{r3}
 80083e4:	469e      	mov	lr, r3
 80083e6:	4770      	bx	lr
